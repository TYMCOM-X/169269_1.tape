^^
.spacing 1
.paper size 54,70
.left margin 10
.right margin 70
.tab stops 5 10 15 20 25 30 35 40 45 50 55 60 65 70
.paragraph 0
.number 0
.figure 1
.blank
.break
.title TITO USER'S GUIDE; SEPTEMBER 1975
.subtitle ENTERING TITO
.skip 20
.center
TITO USER'S GUIDE
.center
SEPTEMBER, 1975
.skip
.center
AUTHOR:##Chuck Younger
.center
SOURCE:##(YOUNGERC:35)TITO.RNO
.page
.index ENTERING TITO
.center
ENTERING TITO
.paragraph
From Monitor level type "R#TITO" to execute the TITO program.
TITO asks for an initial device assignment and density
setting.  (TEX asked only for a unit no.
and required logical assignment of devices to access devices
other than MTAn.)
.paragraph
.index DEVICE#NAME
The DEVICE#NAME may be the name of any magtape device.
.paragraph
.index DENSITY SETTING
The DENSITY#SETTING must be a decimal no., e.g. 6250,1600,800,556, or 200 and will be accepted only if the device is capable of using
the specified density.
.paragraph
.skip
.nofill
Example:##.R TITO(cr)
.skip
          TITO VERSION 15.0             (Printed by TITO)
          SYSTEM C35-P022/F             (Printed by TITO)
          DEVICE: MTA0(cr)
          TRACKS: 7                     (Printed by TITO)
          DENSITY (800,556,200): 800(cr)
          *
        (TITO is now ready to begin accepting commands)
.fill
.subtitle INITIALIZATION OF TAPES
.page
.index INITIALIZATION OF TAPES
.center
INITIALIZATION OF TAPES
.paragraph
With the exception of the CUT#AFTER command, which requires confirmation, a
tape may not be written on until it has been INITIALIZED.
There are three means provided for initializing tape.  These are
(a) the NEW#TAPE command; (b) the SKIP#WRITE#n command; and
(c) the APPEND command, roughly equivalent to SKIP#WRITE#E.
.paragraph
.index NEW TAPE
The NEW#TAPE command rewinds the tape to load point
so that the next STORE command will begin with saveset no. 1,
file no. 1.
.paragraph
.index SKIP WRITE
The SKIP#WRITE#n command skips forward n savesets, as SKIP#n,
but in addition, the tape is initialized.  WARNING:##SKIP#WRITE does
not rewind the tape before scanning forward.  A SKIP#WRITE issued
while not at load point may not position to the intended saveset.
For the purpose of writing elsewhere than at the beginning
or end of the tape, the CUT command is to be prefered.
.paragraph
SKIP#WRITE#E skips to logical end of tape.  The only deficiency
in this command is the possibility that the tape may be positioned past
logical end of tape when the command is issued.  The program
reads tape in buffered mode and the physical position of the tape
is unknown to the program.  The probable result is that TITO will
print a tape read error, and then skip to some previously defined
logical EOT which is past the actual logical end of tape.  Files written
here will disappear the next time the tape is scanned from load point,
and will eventually be overwritten as more files are added to the tape.
.paragraph
.index APPEND
The APPEND command does what SKIP#WRITE#E ought to do.  Unless TITO
is certain that the tape is positioned at logical end of tape,
a REWIND is automatically issued, followed by a SKIP#WRITE#E.
.subtitle NEW FEATURES
.page
.index NEW FEATURES
.center
NEW FEATURES
.paragraph
TITO features tape position numbers, verification of file
checksums, indirect files, translation of user names, and ability to continue to
drives other than the initially assigned tape drive.  In addition,
TITO is much less sensitive to tape format problems than TEX, and
is more selective in specifying sets of files to be processed in
the DIRECTORY, RESTORE, and GET commands.
.skip
.nofill
.index TAPE POSITIONS
1.  TAPE POSITIONS
.fill
.paragraph
Each file on tape contains a file position number which defines
the location of the file on tape.  Tape position numbers may be
used to further restrict the range of files selected on tape by
the RESTORE, GET, or DIRECTORY commands.  Files not in the range
will be ignored, and tape processing stops when a file position
greater than the end of range is read.
.paragraph
The first TITO file header record read on a tape will cause the
program to ask the operator for a tape position range.  Several
options exist at this point:##(1) the operator can type
"?" to print a list of options; (2) a "W" will print
the current tape position; (3) a series of tape position
nos. separated by commas or hyphens (to indicate a range of positions)
may be entered; (4) a carriage return may be typed to default to
all possible positions.  an "E" may be used for the end of a
range to denote the highest possible tape position.  Carriage return,
then, is equivalent to typing "1-E".
.paragraph
.nofill
EXAMPLE:##*DIRECTORY ALL(cr)
          INPUT TAPE POS. RANGE: W(cr)
          LAST KNOWN POS WAS 12
          INPUT TAPE POS. RANGE: 1,3-5,11,15-E(cr)
.skip
          THIS IS TAPE NO. 1 RECORDED 12:13 17-JUL-75
          SYSTEM C35-P022/P DRIVE MTA0 800 BPI 7 TRACK
.skip
          POSITION    FILE NAME      USER NAME
              1  1   TITO  .CMD     YOUNGERC
              3  1   USR   .CMD     YOUNGERC
              4  1   COM   .MAC     YOUNGERC
              5  1   CHR   .MAC     YOUNGERC
             11  1   UUO   .MAC     YOUNGERC
             15  1   BUG   .MAC     YOUNGERC
             16  1   LOOKUP.MAC     YOUNGERC
          TOTAL    7 FILES  FOR     YOUNGERC
.skip 2
          TOTAL 7 FILES FOR SAVE SET.
.skip
          LOGICAL EOT--NO SAVE SETS FOLLOW.
.skip
          TOTAL 7 FILES PROCESSED.
.skip
          *
.skip
.FILL
.skip
.nofill
.index FILE CHECKSUMS
2.  FILE CHECKSUMS
.fill
.paragraph
As each file is written to tape, its checksum is computed and written
just past the last data word in the file.  DIRECTORY, RESTORE, and
GET all read the tape data and recompute the tape checksum.  The new checksum is verified against the last word of data and
if a mismatch occurs, TITO prints "EXPECTED CHECKSUM" and the expected
checksum.  The checksum is also printed in the last six character positions
of a directory entry.
.paragraph
Whenever new files are added to a tape, it should be customary procedure
to make a directory of the files added.  The checksum printed will verify
that the files have been correctly written.
.paragraph
Making a full tape directory is more expensive that doing a directory
of the last few files written.  If saveset nos. are not desired (these
are printed in the directory only if the tape is at load point when
the DIRECTORY command is issued).  then a partial directory
may be made of the files written by specifying a partial range of
files instead of "1-E" or (cr).
.skip
.nofill
.index INDIRECT FILES
3.  INDIRECT FILES
.fill
.paragraph
The STORE, RESTORE, GET and DIRECTORY command are normally followed
by one of the following as the first modifier:## (1) a list of global
account nos preceded by "G", 
e.g. G11447,11550-11600,13464; (2) a list of PPN's
,e.g. [11447,113411],[11447,123046]; (3) a list of user names,
e.g. (KINGHAM),(BURGESST),(SALTYRON),(YOUNGERC) ; (4)
a list of filenames, e.g. (YOUNGERC)TITO.CMD,USR.CMD,BUG.*,*.REL; (5)
a user name followed by the pseudofilename ALL, e.g. (BURGESST)ALL
which matches all filenames for BURGESST; (6) the modifier
ALL, which matches all files in all directories; (7) a list of file
position numbers preceded by a "P" or a poundsign "_#", e.g. P2,3-5,13
or _#2,3-5,13.
In addition, TITO
permits a filename immediately preceded by an at-sign
"@" to be entered at this point.  This file is called an indirect file,
and it may contain anything which can normally be typed on the same
line as the command verb STORE, RESTORE, GET or DIRECTORY, with
one important difference:  carriage returns in the file are automatically
treated as commas.
.paragraph
Thus, the following are equivalent:
.skip
.nofill
.right margin 77
*STO#(YOUNGERC)*.CMD#STA#W#(YOUNGERC)USR.CMD<10><12341,,456453>(cr)
.right margin 70
.skip
or
.skip
*STO#@FOO#STA#W#(YOUNGERC)USR.CMD<10><12341,,456453>(cr)
.skip
where file FOO.# contains the following line:##(YOUNGERC)*.CMD.
.skip
or
.skip
*STO#@FOO#(YOUNGERC)USR.CMD<10><12341,,456453>(cr)
.skip
where file FOO.#contains the line:##(YOUNGERC)*.CMD#STA#
.skip
or
.skip
*STO#@FOO(cr)
.skip
where file FOO.#contains the line:
.skip
(YOUNGERC)*.CMD#STA#W#(YOUNGERC)USR.CMD<10><12341,,456453>
.skip
.skip
More typical indirect files might contain the following:
.skip
(multiple users)
.skip
(BURGESST)(cr)
(YOUNGERC)(cr)
(SALTYRON)(cr)
.skip 2
or
.skip
(multiple files)
.skip
(SALTYRON)DXMP.REL,COM.SAV(cr)
RKXXMA.,RKXXMO.(cr)
RKFOR.SHR(cr)
LOGINN.SHR(cr)
.skip
.fill
.paragraph
Indirect files may contain no more than about 62 filenames or 125 
individual user names.  TITO will print "RAN OUT OF SPACE FOR INPUT
STRING" when its command capacity is exceeded.
.paragraph
Indirect files may be specified in another user by placing the user
name in parentheses after the "@", e.g. "@(BURGESST)FIL.CMD".
.paragraph
WARNING:  Indiscriminate use of indirect files can be hazardous.
Indirect files should n created in directories other than OPER.
A user may find an indirect file in his directory and use it to discover
user names and filenames to which he has no legitimate access.  The
operator MUST in all cases examine the indirect file to see if the
owner of the indirect file has legitimate reason to access the files
contained therein.
.skip
.nofill
.index TRANSLATION OF USER NAMES
4.  TRANSLATION OF USER NAMES
.fill
.paragraph
Frequently it is necessary to restore files to a user on disc which
differs from the user on tape.  The GET command accomplishes this
for one user, but if many users are involved, the procedure is
tedious.  Another case in point is that a tape user is not
set up in the LUD on the system to receive the files.
.paragraph
TITO permits mapping between tape and disc
user names through a translation table.  When TITO locates a file
on tape, it checks to see if the [tape] user name is in its translation
table, and substitutes the [disc] PPN in the translation table for the
one on tape.  Tape files written by TEX, which do not have the
username on tape, are skipped.
.paragraph
.index TRANSLATE
The translation table may be set up through use of the TRANSLATE command
or by entering disc/tape username pairs in a RESTORE, GET,
DIRECTORY, or CUT#AFTER command line.
.paragraph
Disc/tape username pairs may be entered in a command line by typing
the disc username, an underscore or back arrow "__", and the tape username
where normally the [disc] user name would appear in the command:
.skip
.nofill
.left margin 15
*RESTORE (GBLOOD)__(ABLE)TAP.MAC(cr)
.skip
*RESTORE (GBLOOD)__(ABLE),(BURGESST)__(BAKER)(cr)
.skip
*RESTORE (GBLOOD),(GBLOOD)__(ABLE)(cr)
.skip
*CUT AFTER (GBLOOD)__(ABLE)TAP.MAC(cr)
.left margin 10
.fill
.paragraph
In the first example, file TAP.MAC from user name ABLE on
tape is restored to user GBLOOD.  A file named TAP.MAC on tape in user GBLOOD would be skipped.
.paragraph
In the second example, all
files in users ABLE and BAKER on tape are restored to users GBLOOD and
BURGESST, respectively.  Users GBLOOD and BURGESST on tape will
be skipped.
.paragraph
In the third example, files in users GBLOOD
and ABLE on tape are both restored to user GBLOOD.
If this had been a GET command, files from ABLE on tape would have
been mapped to disc user GBLOOD, since the GET function is weaker
than translation, but files from GBLOOD on tape
would have been mapped into the directory of the program user.
.paragraph
In the last
example, the cut on tape is performed
after file (ABLE)TAP.MAC, where ABLE was not in the LUD and could
not be entered directly into the command line.
.paragraph
Note that disc/tape username pairs are meaningful only when the
processing request is for individual usernames or files.  The
translation table is cleared after completion of the command.
.paragraph
The TRANSLATE command can be used to build a translation table which
will not be cleared after each command (unless the command involves
explicit translation).  Once the TRANSLATE command has been
issued, implicit translation remains in effect until the translation
.index UNTRANSLATE
table is cleared using the UNTRANSLATE command.  Implicit
translation has no effect on processing requests of GANS, individual
USERS, or individual FILENAMES. The translation table
will NOT
BE USED
FOR PERFORMING TRANSLATIONS UNLESS THE PROCESSING REQUEST IS
FOR ALL FILES WITHIN A RANGE OF TAPE POSITIONS.
.skip
.nofill
.left margin 15
*TRANSLATE (ABLE)__(BAKER)(cr)
.skip
*RESTORE _#1,5,7-13(cr)
.skip
(files in given positions with name BAKER
will be restored to user ABLE on disk.
files in given positions with names other
than BAKER will be skipped).
.skip
or
.skip
*RESTORE ALL(cr)
INPUT TAPE POS. RANGE: 1,5,7-13(cr)
.paragraph
.fill
.left margin 10
The TRANSLATE command can be used with an indirect file with a
separate disc/tape username pair on each line:
.nofill
.left margin 15
.skip
*TRANSLATE @TRA.CMD(cr)
.skip
where file TRA.CMD contains the following:
.skip
(ABLE)__(BAKER)(cr)
(BAKER)__(ABLE)(cr)
(CHARLIE)__(DELTA)(cr)
(EPSILON)__(GAMMA)(cr)
.left margin 10
.fill
.paragraph
Note that when this translation table is used, files from BAKER are
mapped into ABLE and files from ABLE are mapped into BAKER.
.skip
.nofill
.index MULTIPLE TAPES
5.  MULTIPLE TAPES
.fill
.paragraph
When the files in a saveset will not fit on one physical tape,
TITO generates continuation tapes.  The tape no. in the save
set (e.g. 1,2,...) is shown in the second column under the
heading "POSITION" in the tape directory.
.paragraph
When physical end of tape is reached, TITO prints one of the
following messages which indicate that the current operation (STORE,
RESTORE, GET, DIRECTORY):
.skip
.nofill
(SALTYRON) WILL BE CONTINUED ON THE NEXT TAPE.
.skip
or
.skip
FILE (SALTYRON)SRC.MAC WILL BE CONTINUED ON THE NEXT TAPE
STARTING WITH BLOCK 24.  PARTIAL CKSUM: 134256,,7703421
.skip
or (printed by STORE only)
.skip
THE LAST FILE ON THIS TAPE IS (SALTYRON)XRF.TES
THE FIRST FILE ON THE NEXT TAPE WILL BE (MARCINJ)HASH.REL
.skip 2
.fill
TITO then prints "MOUNT#NEXT#TAPE" and "CONTINUE#ON#DEVICE:#".
Several options are
available at this point:##(1) The operator can type "?" to print a list
of options; (2) "U" OR "UN" OR "UNL" will unload the
current tape; (3) "N" or "NO" will abort the current operation;
and (4) a magtape device name may be entered to signify that the
next tape is ready to go on said device.
.paragraph
The magtape device specified MUST be capable of writing at the same
density which was set for the preceding tape, and MUST be the
same no. of tracks.  Otherwise TITO prints "CANNOT CHANGE
NO. OF TRACKS IN PROCESS" or "CANNOT CHANGE DENSITY IN
PROCESS" and asks for the device name again.
.skip
.nofill
EXAMPLE:
.skip
FILE (YOUNGERC)TAP.MAC WILL BE CONTINUED ON THE NEXT TAPE
STARTING WITH BLOCK 192.  PARTIAL CKSUM: 14264,,223705
.skip
MOUNT NEXT TAPE
CONTINUE ON DEVICE: UNL(cr)
CONTINUE ON DEVICE: FTA2(cr)
TRACKS: 9                       (This is printed by TITO)
                                (No operator input is   )
                                (required.              )
TAPE NUMBER 2 FOR 15:20 15-JUL-75
STARTING WITH BLOCK 192 OF FILE (YOUNGERC)TAP.MAC.
.skip 2
.fill
.paragraph
If, for some reason, it becomes necessary to restart a STORE, RESTORE,
or DIRECTORY operation after an abort (operator typed "NO" to continue
on device or system crashed in the middle of an operation) then a
tape may be restarted beginning with a particular user, file,
and block within a file.  The following examples show how to restart
an ALL files operation with a (1) user; (2) file; (3) file and
block:
.skip
.nofill
*STO ALL STA W (MARCINJ)(cr)                            (1)
.skip
*STO ALL STA W (MARCINJ)ERA.SAV(cr)                     (2)
.skip
*STO ALL STA W (MARCINJ)ERA.SAV<200><405231,,37602>(cr) (3)
.skip
.fill
In the last example, the file ERA.SAV is to be continued
starting with block 200 and partial checksum 405231,,37602.  It is
necessary to enclose the block no. and the checksum in angle brackets "<  >" and the two halves of the checksum should
be separated by two commas ",,".  Note if the checksum is mistyped on
a STORE then a checksum mismatch will be indicated in subsequent
RESTORE or DIRECTORY operations.
.skip
.nofill
6.  OTHER
.fill
.paragraph
TITO is much less sensitive to tape format problems than TEX.
Saveset header records are not needed, and file marks on tapes
(except double file mark for logical EOT) have no special meaning.
Data records that do not belong to any file are simply ignored.
.paragraph
TITO does make the following checks on file header records:  (1)
the file pos. no must be one greater than the last file read; (2)
the file must be written at the same density as the previous file;
and (3) the date written must be greater than or equal to
the date the previous file was written.  TITO warns of such
incompatibilities and permits the operator to abort or to continue.
This feature may prove valuable in stopping a tape which is missing a
file mark at logical end of tape.
.paragraph
.index DIRECTORY
TITO features an expanded tape directory which is 86 columns wide.
In addition, each saveset header record printout includes the
system identification, the physical device name, and the density
and number of tracks recorded.
.paragraph
The DIRECTORY format is given below.
.skip
.nofill
Columns         Contents
 00-05          File position no. in octal
 06-08          Tape no. in saveset (1,2,3,...)
 12-17          Filename
 19-21          Filename extension
 27-38          Username
 41-45          Creation time
 47-55          Creation date
 58-62          Time tape written
 64-72          Date tape written
 73-77          Allocated size of file in blocks
 79-84          Checksum
.fill
.paragraph
Column headings are printed for each user, and the PPN for the
user is printed in the same line as total user files in columns 41-55.
Total blocks allocated to a user is printed in columns 72-77 of
this same line.
.paragraph
TITO prints usernames directly from tape without accessing the DUL.
If a tape contains no TEX savesets, a full directory can be made from
it on any Tymcom X system.
.subtitle NEW COMMANDS
.page
.index NEW COMMANDS
.center
NEW COMMANDS
.paragraph
The following commands are unique to TITO:  NEW#TAPE, APPEND, CUT#AFTER,
TRANSLATE, UNTRANSLATE,
UNLOAD, DEVICE, AND WHERE.  NEW#TAPE, APPEND, TRANSLATE, AND UNTRANSLATE
have already been described.
.paragraph
.index CUT AFTER
The CUT#AFTER command takes the form CUT#AFTER#filename and can be
used to redefine logical EOT.  It spaces out after the specified
filename and writes a dummy saveset trailer record and two filemarks.
The tape is then positioned between the two filemarks with the
logical end of tape flag set, so that an APPEND at this point initializes
the tape for writing without moving the tape.
.paragraph
CUT#AFTER will automatically skip any TEX formatted files that it
finds on tape.  The tape file specified to become the last tape file
must have a tape position no., i.e. must be a TITO file.
.paragraph
.nofill
Example:##*CUT#AFTER#(YOUNGERC)FOO.MAC(cr)
           INPUT TAPE POS. RANGE: 17(cr)
           ARE YOU SURE?(cr)
           CUT FINISHED--NOW POSITIONED AT LOGICAL END OF TAPE.
           *
.fill
.paragraph
There may be a noticeable delay between the time the command
is given and the time the program asks for the tape pos. range.
The delay is the time it takes TITO to locate a file header record on
tape.
.paragraph
.index UNLOAD
The UNLOAD command unloads the current tape without waiting for completion.
.paragraph
.index DEVICE
The DEVICE command can be used to change tape drives or to change
density settings of the drives.
It has the form
.skip
.nofill
DEVICE <DEVNAM> <DENSITY>(cr)
.skip
.fill
where <DEVNAM> and <DENSITY> are optional.  If <DEVNAM> is missing,
the current device is implied; if <DEVNAM> is present, TITO attempts
to use this device.  If <DENSITY> is missing, the command merely
prints all known characteristics of the device (or interrogates the
operator for them if the DEVICE is a new one unknown to TITO).
If <DENSITY> is present, then TITO will attempt to set that density
and ask for it to be reentered if the device is incapable
of this density setting.
.paragraph
.nofill
Example:
        (supposing initial device is MTA0)
          *DEV MTA1(cr)
          TRACKS: 7                     (Printed by TITO)
          DENSITY(800,556,200): 800(cr)
          *
        (we are now using device MTA1)
          *DEV MTA0(cr)
          MTA0: 800 BPI 7 TRACK
          *
        (we are now back to MTA0)
.fill
.paragraph
TITO keeps a table of device names and d density
settings which it uses so that the density does not
have to be reentered each time the DEVICE command is used.  It
is possible to confuse TITO by manipulating the unit select switches
on the DEC drives after the device name has already been entered.  In
this case the device name printed in the tape directory may be incorrect.
For this reason it is urged that the unit select switches be left alone,
and the DEVICE command be used to switch drives.  The old habit should
be forgotten quickly, as more effort is required
to change the switches, and the IBM and Calcomp drives do not have
the switches.
.paragraph
.index WHERE
The WHERE command prints the last tape position no. read.  The tape
will probably be positioned a few records past this position no.
TITO prints "POSITION UNKNOWN" if the current position no.
is meaningless.
.subtitle MIXED FORMAT TAPES
.page
.index MIXED FORMAT TAPES
.center
MIXED FORMAT TAPES
.paragraph
Files written by TITO have tape position nos. and other format
changes which prevent tapes from being read by the TEX program.
TEX tapes, however, can still be read by TITO.
Files written by TITO can be appended to TEX tapes,
though it is preferable for ease in tape handling to rebuild TEX tapes
in the new format.
.paragraph
Let us suppose that a tape contains old savesets written by TEX
and new savesets written by TITO.  Let us also
suppose that the savesets are not in chronological order as far as
the versions are concerned (somehow the operator got hold of an
old copy of TEX and appended to a tape which already contained
a TITO saveset).  Suppose the tape contains four savesets
written by: TEX; TITO; TEX; and TITO.  These
savesets are refered to below as savesets no. 1, 2, 3, and 4, respectively.
.paragraph
Since the DIRECTORY command no longer issues a rewind, a complete
tape directory is possible only if the REWIND command is issued before
the DIRECTORY command.  If the tape is initially positioned in
saveset no. 2 and and file position range 1-E is given, the
tape directory will not report files in saveset no. 1, since this
section contains no file position nos.  Saveset no. 3 will be printed,
however, since this is scanned before reaching position E.

If the tape is positioned somewhere in saveset no. 4 and file
positions are selected in saveset no. 2, TITO in all likelihood will
be unable to locate these files.  It will probably oscillate
between savesets no. 3 and 4, since the file positions in saveset no. 3 are zero.
In this case, a rewind should be issued to permit TITO to locate the
start of the file position range.
.paragraph
The RESTORE command will skip over files in saveset no. 3 if the
tape is initially positioned in saveset no. 2.  This prevents files
which were restored from saveset no. 2 from being accidentally
overwritten by the same names appearing in saveset no. 3.  Note
that the DIRECTORY command would not have skipped over the files.
(if it had, there would have been no way to make a full tape directory).
The RESTORE will quit when (a) there is nothing to do; or (b)
a file header is read one past the end of the specified range; or
(c) logical EOT is read.
.paragraph
To restore files written by TEX, the tape must be initially
positioned to the beginning of the saveset containing the files.
There is a saveset header record which contains information needed
to do date conversions.  Use REWIND and SKIP to position the tape.
The RESTORE will quit when (a) there is nothing to do; or (b) a saveset
trailer is read; or (c) logical EOT is read.
.paragraph
If the saveset header cannot be found, TEX issues a warning message
and asks if the operator wishes to continue.  If the tape is
a bad tape containing no saveset header, the operator should
continue at this point and get date conversions corresponding
to MONITORS P012 and later.  Otherwise, he should abort, which
automatically rewinds the tape so he can SKIP to the beginning
of the saveset.
.paragraph
Savesets written by TITO do not need saveset header
records since the required information is kept in the file header
record.
.subtitle OPERATING COMMANDS
.page
.index OPERATING COMMANDS
.center
OPERATING COMMANDS
.paragraph
All TITO commands and keyword modifiers may be abbreviated to the
mininum no. of characters required to make the command unique.
mininum no. of characters required to make the command unique.
For example, DIRECTORY may be abbreviated "DI" and DEVICE may be abbreviated
"DE".  TITO will always inform the operator if the abbreviation is not
unique, for example, the ambiguous abbreviation "D".
.paragraph
The following operating commands appear in both TEX and TITO.  They are documented here for completeness.
.skip
.nofill
COF
REWIND
RWNW
QUIT
HELP
UPDATE
NOUPDATE
SKIP
STORE
RESTORE
GET
DIRECTORY
MODE
.fill
.paragraph
.index COF
The COF command changes the output file from terminal to the specified
device.  The following devices
are valid objects for the COF command:##PRINTER, TERMINAL,
TELETYPE.  In addition, a filename in the file directory of the
program user may be specified.  The output file remains the one
specified until another COF command is issued, or until an altmode
(_^C in PDP mode) or a fatal error occurs.
.paragraph
.index REWIND
The REWIND command rewinds the tape to load point and waits
for completion before returning to the command dispatcher.
.paragraph
.index RWNW
The RWNW (ReWind No Wait) command rewinds the tape to load point
without waiting for completion.  The command returns immediately
to the command dispatcher.
.paragraph
.index QUIT
The QUIT command is used to exit the TITO program.  Two
altmodes (or _^C in PDP mode) can be used to accomplish the same.
.paragraph
.index HELP
The HELP command lists in summary form the program commands and the
purpose of each.  In addition, HELP may be typed in the middle
of a multipart command to obtain the options available at
that point.
.paragraph
.index UPDATE
The UPDATE command sets a switch (which remains set
until the user does a QUIT or NOUPDATE) which
specifies that files to be RESTORED will be opened in update mode.
This mode uses the blocks already allocated to a file instead of
acquiring new ones, so it can be useful when the system is
low on disc space and a particularly large file needs to be
restored.
.paragraph
.index NOUPDATE
The NOUPDATE command turns off the UPDATE mode switch so that the
normal mode of opening files is reinstated.
.paragraph
.index SKIP
The SKIP command takes as its object the number of savesets to
skip on tape.  If there are three savesets on tape, and the tape is
positioned at load point, SKIP 2 will cause the tape to be positioned
to the beginning of the third saveset.  SKIP E can be used to position
to logical end of tape.  Note that if a tape has n savesets, SKIP n from
load point will, in effect, position the tape to logical eot
but TITO cannot print a confirming "NOW POSITIONED AT LOGICAL END OF TAPE".
.paragraph
.page
The next four commands (STORE, RESTORE, GET, and DIRECTORY) have
identical three-part structures.
.paragraph
1.##The first part of each command is the verb (STORE, RESTORE, GET,
DIRECTORY).
.paragraph
.left margin 15
.index STORE
STORE is used to write files on tape and requires tape initialization.
.paragraph
.index RESTORE
RESTORE retrieves files from tape and places them in their
original directories.
.paragraph
.index GET
GET functions the same as RESTORE, except that the tape files are
written to the program user's directory.
.paragraph
.index DIRECTORY
DIRECTORY goes through all of the motions of RESTORE,
but files are not written to disc.  Instead a listing of tape
file names and positions is made.
.left margin 10
.paragraph
2.##The second part of each command is the object.  This may be
(1) a list of global account nos. preceded by "G", e.g. G1-4,6; (2) a list
of PPN's, e.g. [1,1],[1,4] or user names (SYS),(OPER);
(3) a list of filenames preceded by a PPN or user name, e.g.
.nofill
[1,4]A.X,B.X,C.X or (OPER)A.X,B.X,C.X;
.fill
(4) the directive "ALL" preceded by a username to select all
the files belonging to a user, or not preceded by a username to select
all files belonging to all users; (5) a list of file position numbers
preceded by "P" or poundsign "_#", e.g. _#1,3-5,14; or (6) an
indirect file preceded by
an "@" sign.
.paragraph
Position numbers, when used, are not meaningful to STORE.  When used
in the command line the effect is the same as if the directive "ALL"
was used.
.paragraph
Filenames, except for that of an indirect file, may contain wild
card characters "_#" or "?" to match any filename character,
or an asterisk in the name or extension portion of the filename
(or both) to match all names or extensions (or both).
.paragraph
3.##The third part of the command is a modifier to the second part
and a command may have more than one modifier.  The following
modifiers are available:##TWICE, THRICE, CREATED #AFTER,
CHANGED, and STARTING#WITH.  All modifiers can be used with any
command but the TWICE, THRICE, CREATED#AFTER, and CHANGED modifiers
are meaningful only to STORE.
.paragraph
.left margin 15
The TWICE modifier causes TITO to write two savesets instead of one
in the STORE command.
.paragraph
The THRICE modifier causes TITO to write three savesets instead of one
in the STORE command.
.paragraph
The CREATED#AFTER modifier takes as its object a date expressed as
HH:MM#DD#MON#YR, where HH:MM is the time in hours and minutes,
and DD#MON#YR is the day-month-year.  Files to be STOREd
are restricted to those created after the specified time and date.
The time and date may be abbreviated:  if only HH:MM is given,
the date defaults to the current day-month-year;  if only HH:MM#DD is
given, the date defaults to the current month-year; if only
HH:MM#DD#MON is given, the date defaults to the current year.
.paragraph
THe CHANGED modifier takes no object and specifies that all files
which do not have the "file dumped" bit on in the UFD will be written
to tape.  Note that the "file dumped" bit can be turned on only by
a "STORE#ALL#CHANGED" operation (backup).  Thus
the CHANGED modifier is specifying files which have changed since the
last backup operation.
.paragraph
The STARTING#WITH modifier takes username or filename as an object
and begins the current operation (STORE, RESTORE, GET, DIRECTORY)
at the specified user or filename.  In the case of files split between
tapes the object is a filename followed by block no. and partial
checksum enclosed in angle brackets "<>".
.left margin 10
.skip
.page
.index MODE
The MODE command is used to print or change a number of TITO
options.  One set of options pertains to what information prints
at the terminal during a STORE/RESTORE operation.  THe other
set of options pertains to what action is demanded of the operator
when an attempt is made by TITO to restore a file on top of an
existing file.
.paragraph
MODE is a three part command.  The first part is always MODE and
may be followed by a carriage return, in which case TITO
prints the prevailing modes.  The second part may be the name of
a file type
like OLD or SYS.  OLD files are files which exist on both disc and
tape and are about to be overwritten by a RESTORE or
GET operation.  SYS files are files in username (SYS) which
are very critical to the system operation
and have a separate mode switch to
protect them against being overwritten.
.paragraph
If the second part is a file type, then the third part of
the command tells what version of the file to use in case
a file exists on both disc and tape and is to be restored.
The version types are NEWEST, DISC, TAPE, and CONFIRM.
.left margin 15
.paragraph
NEWEST selects the most recent file, as determined by the creation
date.
.paragraph
DISC keeps the disc version of the file.  TITO will print
"NOT WRITING OVER FILE ...".
.paragraph
TAPE replaces the disc version from the tape in all cases.
.paragraph
CONFIRM is the normal mode and requires that the operator confirm
writing over the old file.
.left margin 10
.paragraph
The second part of the command may be an operation type, such as
STORE or RESTORE.  In this case the third part of the command
specifies what is to be printed on the
operator's terminal during the operation.  The listing controls
are TOTALS, USERS, and FILES.
.left margin 15
.paragraph
TOTALS prints only the grand totals for the operation, e.g. 
"XX##FILES#PROCESSED."
.paragraph
USERS prints totals for each user along with grand totals.  This
is the normal mode.
.paragraph
FILES prints each filename as it is read/written from/to tape, as
well as user and grand totals.
.left margin 10
.subtitle APPENDIX A
.page
.index APPENDIX A
.center
APPENDIX A
.index TAPE FORMATS
.center
TAPE FORMATS
.skip
.paragraph
The tape consists of savesets followed by logical end of tape (two
consecutive filemarks).  Each saveset consists of a saveset
header record, user files, and a saveset trailer record.  A filemark
separates each user on the tape and can also be found between
a saveset trailer and the saveset header of the next saveset.  No
filemark follows a user if the next record is a saveset trailer.
.paragraph
Each user is written as one physical tape file, and consists of
file header records and data records.  Each file begins with a
file header record which is always a new tape record.
.paragraph
The file header record
contains all extended lookup information about the file plus
tape parameters such as file pos. no., date written, etc.  The
balance of the file header record contains file data.
The last data record in a file contains at least 5 tape words.
The file checksum is written in the first word past the file data
and is repeated if necessary to up the record word count to 5.
.nofill
.skip
SAVESET HEADER(TRAILER) RECORD
.skip
WORD    BITS    CONTENTS
   0    0-17    Version No. of TITO that wrote saveset
       18-35    Wordcount that follows (=4)
   1    0-35    Sixbit /*fails/
   2    0-17    Sixbit /afe/
       18-35    Tape sequence no (tape number in saveset)
                positive in saveset header
                negative in saveset trailer
   3       0    Continuation tapes follow
           1    User continued
           2    File continued
        3-10    Spare
       11-21    Time saveset written
       22-35    Date saveset written in days since Jan 1, 1964
   4    0-35    XWD 1,2
.skip
DATA RECORD
.skip
WORD    BITS    CONTENTS
   0    0-17    Zero
       18-35    Wordcount that follows (maximum 777)
1-777   0-35    File data
.skip
FIRST BLOCK OF USER FILE (FILE HEADER RECORD)
.skip
WORD    BITS    CONTENTS
   0    0-17    -1
       18-35    Wordcount that follows (maximum 777)
   1    0-17    Sixbit /dsk/
       18-35    TITO version no. that wrote tape
   2    0-17    Zero
       18-35    Count for extended lookup (=40)
3-42    0-35    Extended lookup information.
43-70   0-35    Spare
71-72   0-35    72 bits of username in sixbit text
73-74   0-35    72 bits of system id from GETTAB table 11
  75    0-17    Tape density
       18-35    No. of tracks
  76    0-35    Sixbit device name in TITO version 15.  Tape drive
                serial no. in bits 18-35 in TITO version 14.
  77    0-10    Spare
       11-21    Time tape written
       22-35    Date tape written
 100    0-17    Tape sequence no. (tape no. in saveset)
       18-35    File no. on tape
101-777 0-35    File data
.fill
.subtitle APPENDIX B
.page
.index APPENDIX B
.center
APPENDIX B
.index MESSAGE CONTROL
.center
MESSAGE CONTROL
.skip
.paragraph
.index COF
TITO messages are normally directed to the terminal.  The COF
command may be used to direct output from the next command
to the file or device specified by the COF command.  In the past
this has resulted in the loss of some messages which should have
appeared on the terminal.
.paragraph
TITO directs some messages to the terminal only, some to the COF
file only, and some to both.  The following messages are directed
to both the terminal and the COF file:
.paragraph
.nofill
TAPE NUMBER XX FOR HH:MM DD-MON-YR
UNABLE TO DO LOOKUP ON UFD FOR USER ( ).  CONTINUING WITH NEXT USER
STORE COMPLETE, XX FILES.
UNABLE TO DO LOOKUP ON FILE ( ) . . CONTINUING WITH NEXT FILE.
ERROR READING UFD FOR ( )
ERROR IN READING FILE: ( ) . .
UNABLE TO MARK FILE ( ) .  AS DUMPED.
STARTING WITH BLOCK XX OF FILE ( ) . .
.skip
THE LAST FILE ON THIS TAPE IS: ( ) . 
THE FIRST FILE ON THE NEXT TAPE WILL BE: ( ) .
.skip
IRRECOVERABLE TAPE WRITE ERROR
PHYSICAL DEVICE ERROR
UNRECOGNIZABLE TAPE DATA
CONTINUING WITH FILE ( ) .
CONTINUING WITH NEXT USER.
XX TAPE ERRORS READING FILE ( ) .
ERROR WRITING TO FILE ( ) . .
SKIPPING REMAINDER OF FILE
STARTING WITH BLOCK XX OF FILE ( ) . .
DATE CONV ERR ON ( ) . .  CONTINUING...
NOT RESTORING ( ) . .  IT IS BAD ON TAPE.
BYPASSING ( ) . .  NOT ENOUGH DISC SPACE.
CANNOT ENTER ( ) . .---(REASON)
FILE ( ) .  .RBPOS RESET TO ZERO--PROCEEDING O.K.
BYPASSING ( ) . , LOOKUP FAILURE--(REASON)
UNABLE TO SET UFD INTERLOCK FOR ( ).
UNABLE TO RESET UFD INTERLOCK FOR ( ).
( ) WILL BE CONTINUED ON NEXT TAPE.
LOGICAL EOT--NO SAVE SETS FOLLOW.
TOTAL XX FILES PROCESSED.
BAD HEADER RECORD FOUND.
.skip
FILE ( ) .  WILL BE CONTINUED ON NEXT TAPE
STARTING WITH BLOCK XXX.  PARTIAL CKSUM:  YYYYY,,ZZZZZ
.skip
FILE ( ) .  HAD TOO LITTLE DATA ON TAPE.
FILE ( ) .  HAD TOO MUCH DATA ON TAPE.
FILE ( ) .  EXPECTED CHECKSUM AAAAAA
TROUBLE TRUNCATING ( ) .  --(REASON)
CANNOT TRUNCATE ( ) .  --(REASON)
TOTAL XX UFD'S SET UP.
FILE SOFTWARE WRITE PROTECTED
[DISC] SEARCH ERROR.
DISC PARITY ERROR
CANNOT ALLOCATE DISC.
.fill
.paragraph
The following messages are directed only to the current output file,
be it terminal or some other device:
.paragraph
.nofill
  PPP  (USERNAME)FILE.EXT       (MODE STORE/RESTORE FILES)
.skip
NOT WRITING OVER FILE ( ) . .
WRITING OVER FILE ( ) . .
TOTAL XX FILES FOR SAVE SET.
.skip
THIS IS SAVE SET NO. XX         (HEADER MESSAGES)
TAPE NO. XX RECORDED HH:MM DD-MON-YR
SYSTEM C35 DRIVE 145 800 BPI 7 TRACK
.skip
FILE ( ) .  GIVEN LICENSE OOOOOOOO.
FILE ( ) .  NOT GIVEN LICENSE OOOOOOOO.
.skip
  PPP  FILENM.EXT   USERNAME... (DIRECTORY ENTRY)
.skip
TOTAL XX FILES FOR  USERNAME... (TOTAL USER IN DIRECTORY)
.fill
.paragraph
Output from the HELP command may be directed to an output file.
All other messages, not listed above, are directed to the terminal
only.
.subtitle INDEX
.page
.center
INDEX
.skip
.print index
   ]%WWF