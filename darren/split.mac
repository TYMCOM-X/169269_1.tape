	TITLE	SPLIT - Split a file into pieces
	SUBTTL	Definitions

	SEARCH	UUOSYM

;Register equates

	S=0
	T1=1
	T2=2
	T3=3
	T4=4
	F=5

	P=17

; I/O channel equates

	CH1=:1
	CH2=:2
	SUBTTL	Get file names and init channels

ST:	JFCL
	RESET
	SKIPA	P,[-PDLSIZ,,PDL-1]
				;Don't clear input buffer first time around
F1INI:	  CLRBFI
	MOVEI	F,F1LKB		;Point to lookup block
	OUTSTR	[ASCIZ/
Input file name: /]
	PUSHJ	P,GETFNM	;Get file name from TTY, store in lookup block
	  JRST	F1INI		;Illegal file name or some such, try again
	MOVE	T1,[.CHOPN,,CH1]
	CHANIO	T1,OPNARG	;Open a channel for this file
	  JRST	OPNERR		;Die
	HRLI	T1,.CHLK	;Set up args
	CHANIO	T1,F1LKB	;Look up the file
	  JRST	LKPERR		;Die
	SETZM	BEGPAG		;Highest file page mapped so far
	MOVE	T1,.RBSIZ(F)
	ADDI	T1,777
	LSH	T1,-^D9		;Last page in file
	MOVEM	T1,MAXFP
NXTFIL:	OUTSTR	[ASCIZ /
Starting page number [/]
	MOVE	T1,BEGPAG
	ADDI	T1,1
	PUSHJ	P,TYPDEC	
	OUTSTR	[ASCIZ /]: /]
	PUSHJ	P,RDDEC
	  JRST	NXTFIL		;User entered garbage
	  JRST	GETEND		;User entered null string (cr-lf)
	JUMPLE	T1,NXTFIL	;User entered a real number, make 
	CAMLE	T1,BEGPAG	;Make sure >= BEGPAG+1
	CAMLE	T1,MAXFP	; sure it's > 0 and <= 512
	  JRST	NXTFIL
	SUBI	T1,1
	MOVEM	T1,BEGPAG
GETEND:	OUTSTR	[ASCIZ /
Ending page number [/]
	MOVE	T1,MAXFP
	ADDI	T1,1
	PUSHJ	P,TYPDEC	
	OUTSTR	[ASCIZ /]: /]
	PUSHJ	P,RDDEC
	  JRST	GETEND		;User entered garbage
	  MOVE	T1,MAXFP	;User entered null string (cr-lf)
	JUMPLE	T1,GETEND	;User entered a real number, make 
	CAMLE	T1,BEGPAG	;Make sure >= FILPAG+1
	CAMLE	T1,MAXFP
	  JRST	GETEND
GOTEND:	MOVEM	T1,ENDPAG

	SKIPA
F2INI:	  CLRBFI
	MOVEI	F,F2LKB
	OUTSTR	[ASCIZ /
Output file name: /]
	PUSHJ	P,GETFNM
	  JRST	F2INI
	MOVE	T1,[.CHOPN,,CH2]	;Enter output file
	CHANIO	T1,OPNARG
	  JRST	OPNERR
	HRLI	T1,.CHENT
	CHANIO	T1,F2LKB
	  JRST	ENTERR
	OUTSTR	[ASCIZ /
/]
	SETZM	FILPAG
	MOVE	T1,.JBREL	;Highest word in low seg
	ADDI	T1,777		;Round up
	LSH	T1,-^D9		;Convert to page number
	MOVEI	T2,1000		;Highest lowseg page + 1
	SUBI	T2,(T1)		;Number we have to work with
	LSH	T2,-1		;Number per buffer (1 buffer per file)
	MOVEM	T2,BUFSIZ
	TRO	T2,(1B7)	;Read-only bit plus count
	HRLI	T1,(T2)		;Arg for Map File Page
	MOVEM	T1,MAPARG
	ANDI	T2,777		;Get back buffer size only
	ADDI	T1,(T2)		;Start page for output buffer
	TRO	T2,(3B7)	;Read-write protection
	HRLI	T1,(T2)		;Arg for Create file page
	MOVEM	T1,CREARG

; Routine to map next file page

NXTPAG:	MOVE	T1,ENDPAG
	SUB	T1,BEGPAG
	CAML	T1,BUFSIZ
	  JRST	SIZOK
	MOVEM	T1,BUFSIZ
	TRO	T1,(1B7)
	HRLM	T1,MAPARG
	TRO	T1,(3B7)
	HRLM	T1,CREARG
SIZOK:	AOS	BEGPAG
	MOVE	T4,[.CHMFP,,CH1]
	CHANIO	T4,MAPARG
	  JRST	MAPERR
	MOVE	T1,BUFSIZ
	SOS	BEGPAG
	ADDM	T1,BEGPAG

	MOVE	T4,[.CHCFP,,CH2]
	MOVE	T2,FILPAG
	ADDI	T2,1
	CHANIO	T4,T2
	  JRST	CFPERR
	SOJG	T1,.-3

	AOS	FILPAG	
	MOVE	T4,[.CHMFP,,CH2]
	CHANIO	T4,CREARG
	  JRST	MAPERR
	MOVE	T1,BUFSIZ
	SOS	FILPAG
	ADDM	T1,FILPAG

	HRRZ	T2,MAPARG	;Source page
	LSH	T2,^D9		;Source address
	HRLI	T1,(T2)
	HRRZ	T2,CREARG	;Dest page
	LSH	T2,^D9
	HRRI	T1,(T2)
	HRRZ	T2,CREARG	;Dest page
	ADD	T2,BUFSIZ	; Page after last dest page
	LSH	T2,^D9
	SUBI	T2,1
	BLT	T1,(T2)		; last word is dest addr-1

	MOVE	T4,MAPARG	;Before mapping new file page,
	VREMOV	T4,		; dispose of old one
	  JRST	RMVERR		;Should never happen
	MOVE	T4,CREARG
	VREMOV	T4,
	  JRST	RMVERR

	MOVE	T3,BEGPAG
	MOVEI	T1,(T3)
	PUSHJ	P,TYPDEC
	OUTSTR	[ASCIZ /  /]
	CAMGE	T3,ENDPAG
	  JRST	NXTPAG

	MOVE	T1,[.CHCLS,,CH2]
	CHANIO	T1,
	MOVE	T1,[.CHREL,,CH2]
	CHANIO	T1,
	  JFCL
	
	OUTSTR	[ASCIZ /

	File Written...
/]
	CAMGE	T3,MAXFP
	  JRST	NXTFIL

XIT:	MOVE	T1,[.CHREL,,CH1]
	CHANIO	T1,		;RELEASE first file I/O channel
	  JFCL
	EXIT
	SUBTTL	GETFNM - Get File Name from terminal

GETFNM:
	SETZM	.RBCNT(F)	;Initially, say nothing in lookup block
	SETZM	.RBPPN(F)	;Clear out PPN in lookup block
	SETZM	USRNAM(F)	;And user name string
	SETZM	USRNAM+1(F)
	HRROI	T1,.AXIWL	;INCHWL AUXCAL
	AUXCAL	T1,T2		;Get char to T2
	  POPJ	P,
	CAIN	T2,15		;End-of-line?
	  POPJ	P,		;Yes, give error return
	CAIN	T2," "		;Leading blank?
	  JRST	.-3		;Yes, skip over leading blanks
	CAIE	T2,"("		;Start of user name?
	  JRST	FNAME		;No, scan file name
	MOVE	T3,[POINT 6,USRNAM(F)] ;Byte pointer to user name string
	MOVSI	T4,-^D12	;Maximum chars allowed in user name
GETUNM:
	AUXCAL	T1,T2		;Keep INCHWL-ing
	  POPJ	P,
	CAIN	T2,15		;End-of-line?
	  POPJ	P,		;Illegal here - give error return
	CAIN	T2,")"		;End of user name?
	  JRST	GETUN1		;Branch if yes
	PUSHJ	P,CVT726	;Convert 7-bit ASCII to SIXBIT
	  POPJ	P,		;Illegal char - error return
	IDPB	T2,T3		;Store into user name string
	AOBJN	T4,GETUNM
	AUXCAL	T1,T2		;This should be the close paren
	  POPJ	P,		;Give error return
	CAIE	T2,")"		;Is it?
	  POPJ	P,		;Error return - user name too long
GETUN1:
	MOVEI	T3,USRNAM(F)	;Address of SIXBIT user name string
	MOVEM	T3,.RBPPN(F)	;Store into lookup block
; Parse file name

FNAME:
	SETZM	.RBNAM(F)	;Clear file name from lookup block
	SETZM	.RBEXT(F)	;Also file extension
	MOVE	T3,[POINT 6,.RBNAM(F)] ;Byte pointer to SIXBIT file name
	MOVSI	T4,-6		;Max length of file name
	SKIPN	.RBPPN(F)	;Was there a user-name specified?
	  JRST	FNAME2		;If not, T2 has first char of file name
FNAME1:
	AUXCAL	T1,T2		;T1 still has INCHWL args
	  POPJ	P,		;Give bad return
FNAME2:
	CAIN	T2,15		;End of line?
	  JRST	FNEXIT		;Yes, escape from this routine
	CAIN	T2,"."		;End of file name?
	  JRST	FEXT		;Yes, scan for extension
	PUSHJ	P,CVT726	;Convert 7-bit ASCII to SIXBIT
	  POPJ	P,		;Illegal char - give error return
	IDPB	T2,T3		;Store next char of file name
	AOBJN	T4,FNAME1	;Loop up to 6

; Have scanned 6 chars of file-name, now look for "." or c-r,
; ignoring intermediate blanks.

	AUXCAL	T1,T2
	  POPJ	P,
	CAIN	T2," "
	  JRST	.-3		;Ignore blanks
	CAIN	T2,15		;Carriage return?
	  JRST	FNEXIT		;Escape if so
	CAIE	T2,"."		;Seperator?
	  POPJ	P,		;No, give error return

; Here to scan file extension
FEXT:
	MOVE	T3,[POINT 6,.RBEXT(F)]
	MOVSI	T4,-3		;Max length
FEXT1:
	AUXCAL	T1,T2
	  POPJ	P,		;Give error return
	CAIN	T2,15		;End-of-line?
	  JRST	FNEXIT		;Escape if so
	PUSHJ	P,CVT726	;Convert 7-bit ASCII to SIXBIT
	  POPJ	P,		;Illegal char - give error return
	IDPB	T2,T3		;Add to file extension string
	AOBJN	T4,FEXT1	;Loop up to 3 times
FNEXIT:	AUXCAL	T1,T2		;Eat input
	  POPJ	P,
	CAIE	T2,12		;Line-feed yet?
	  JRST	FNEXIT
	SKIPN	.RBNAM(F)	;Did we actually get some sort of file-name?
	  POPJ	P,		;No, give error return
	MOVEI	T1,LKBLEN	;Yes, store lookup block length
	MOVEM	T1,.RBCNT(F)
CPOPJ1:	AOS	(P)		;General purpose success return
	POPJ	P,		;Error return

; Routine to fold lower-case ASCII to upper case and convert to SIXBIT
; Entered with char in T2, no other AC's used.

CVT726:
	CAIL	T2,40		;Check for legal range for SIXBIT conversion
	CAILE	T2,"z"
	  POPJ	P,		;Give error return
	CAIL	T2,"a"		;Within range of lower-case
	ADDI	T2,"A"-"a"	;Fold to upper case
	SUBI	T2,40		;Adjust to SIXBIT character codes
	ANDI	T2,77		;And leave only six bits
	JRST	CPOPJ1		;Give good return
TYPDEC:	IDIVI	T1,^D10		;GET THE NEXT DECIMAL DIGIT
	HRLM	T2,0(P)		;SAVE DIGITS ON STACK IN REVERSE ORDER
	JUMPE	T1,TYPD2	;JUMP IF DONE
	PUSHJ	P,TYPDEC	;OTHERWISE, RECURSIVE CALL TO GET NEXT DIGIT
TYPD2:	HLRZ	T1,0(P)		;GET THE DIGITS BACK IN REVERSE ORDER
	ADDI	T1,"0"		;MAKE ASCII
	OUTCHR	T1		;TYPE IT
	POPJ	P,
; Routine to read decimal numbers from the terminal, terminated
; by a cr-lf.
; Returns binary value of decimal number in T1.
; Returns at call+1 if error (illegal char)
;	call + 2 if null digit string (cr-lf only)
;	call + 3 if T1 has actual binary input in it

RDDEC:	PUSH	P,T2
	MOVEI	T1,0		;Binary will be accumulated here
RDDEC1:	INCHWL	T2
	CAIN	T2,15		;End of line?
	  JRST	RDDEC2		;Whip out if so
	CAIL	T2,"0"
	CAILE	T2,"9"
	  JRST	RDERR		;Illegal character, error out
	SUBI	T2,"0"
	TLZ	T1,400000	;Clear "digit entered" flag
	IMULI	T1,^D10
	ADDI	T1,(T2)
	TLO	T1,400000	;Flag indicates at least one digit typed
	JRST	RDDEC1

; Here if we reached end-of-line without any illegal characters.

RDDEC2:	AOS	-1(P)		;Returns at least at call + 2
	TLZE	T1,400000	;If any digits typed (clear flag),
	AOS	-1(P)		; returns at call + 3
; Scan to end-of-line & exit
RDERR:	INCHWL	T2
	CAIE	T2,12
	  JRST	RDERR
	POP	P,T2
	POPJ	P,

	SUBTTL	Error message routines

OPNERR:	OUTSTR	[ASCIZ /
Error on OPEN for channel
/]
	JRST	XIT

LKPERR:	OUTSTR	[ASCIZ /
LOOKUP error for file
/]
	JRST	XIT

ENTERR:	OUTSTR	[ASCIZ /
ENTER error for file
/]
	JRST	XIT

CREERR:	OUTSTR	[ASCIZ /
Error on VCREAT
/]
	JRST	XIT

MAPERR:	OUTSTR	[ASCIZ /
Error on MAP
/]
	JRST	XIT

CFPERR:	OUTSTR	[ASCIZ /
Error on Create File Page 
/]
	JRST	XIT

RMVERR:	OUTSTR	[ASCIZ /
Error on VREMOV
/]
	JRST	XIT

VMVERR:	OUTSTR	[ASCIZ /
VMOVPG error
/]
	JRST	XIT
	SUBTTL	Pure storage

OPNARG:	0
	SIXBIT	/DSK/
	0

	LIT
	SUBTTL	Impure storage

F1LKB:	PHASE	0	;Extended lookup block (just a small one)
.RBCNT:	BLOCK	1PPN:	BLOCK	1
.RBNAM:	BLOCK	1
.RBEXT:	BLOCK	1
.RBPRV:	BLOCK	1
.RBSIZ:	BLOCK	1
.RBVER:	BLOCK	1
.RBFUT:	BLOCK	1
.RBEST:	BLOCK	1
.RBALC:	BLOCK	1
USRNAM:	BLOCK	2
	DEPHASE
	LKBLEN==.-F1LKB-2

F2LKB:	BLOCK	LKBLEN+2


MAPARG:	BLOCK	1	;First word of Map File Page arg block, also
			; used for VREMOV call
BEGPAG:	BLOCK	1	;Second word of Map File Page arg block
ENDPAG:	BLOCK	1

CREARG:	BLOCK	1
FILPAG:	BLOCK	1

MAXFP:	BLOCK	1
BUFSIZ:	BLOCK	1

	PDLSIZ=40
PDL:	BLOCK	PDLSIZ


	END	ST
   L%U;ø