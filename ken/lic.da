!! title DA Lic ;
! :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:::::::::::::::::::::::::::::::::::::+:::::::::::::::::::::::::::::::::::::
:                                                                         :
:                                                                         :
:				    Lic					  :
:                                                                         :
:                                                                         :
:::::::::::::::::::::::::::::::::::::+:::::::::::::::::::::::::::::::::::::


			  License-related stuff.


::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;


! ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;
!! title Rtn Cv.Name ;
! =========================================================================
=====================================+=====================================
=                                                                         =
=                                                                         =
=				Rtn Cv.Name				  =
=                                                                         =
=                                                                         =
=====================================+=====================================


==========================================================================;


  long real procedure Cv.Name (string Name);
  begin "Cv.Name"
    integer C;
    integer NM1;
    integer NM2;
    long real L;


! ========================================================================;
!! title SubRtn Radix.45 ;
! =========================================================================
=====================================+=====================================
=                                                                         =
=                                                                         =
=			      SubRtn Radix.45				  =
=                                                                         =
=                                                                         =
=====================================+=====================================


==========================================================================;


  simple integer procedure Radix.45 (integer Ch);
  begin "Radix.45"
    if (Ch >= "A" and Ch <= "Z") then
      return(Ch + 1 - "A");

    if (Ch >= "a" and Ch <= "z") then
      return(Ch + 1 - "a");

    if (Ch >= "0" and Ch <= "9") then
      return(Ch + 31 - "0");

    return(
	case Ch of
	(
	  [" "]  0,
	  ["-"]  28,
	  ["."]  29,
	  ["/"]  30,
	  [":"]  41,
	  ["*"]
	  ["@"]  42,
	  ["'"]  43,
	  else   44
	)
    );
  end "Radix.45";


! ===================================+=====================================
==========================================================================;
!! title Body Cv.Name ;
! ========================================================================;


    Name _ (Name & "            ")[1 for 12];
    NM1  _ NM2 _ 0;

    while (length(Name)) do
    begin
      C _ Radix.45(lop(Name));

      start!code
	MOVE	3, NM1;
	MOVE	1, NM2;
	IMULI	3, 45;
	MULI	1, 45;
	ADD	1, 3;
	ADD	2, C;
	MOVEM	1, NM1;
	MOVEM	2, NM2;
      end;
    end;

    memory[location(L)]   _ NM1;
    memory[location(L)+1] _ NM2;
    return(L);
  end "Cv.Name";


! ===================================+=====================================
==========================================================================;
!! title Rtn Cv.Hash ;
! =========================================================================
=====================================+=====================================
=                                                                         =
=                                                                         =
=				Rtn Cv.Hash				  =
=                                                                         =
=                                                                         =
=====================================+=====================================


==========================================================================;


  integer procedure Cv.Hash (string PW);
  begin "Cv.Hash"
    integer C;
    integer Fives;
    integer T1;
    integer T2;
    integer T3;
    integer T4;
    integer array X[0:4];


    X[0]  _ X[2] _ X[4] _ '555555555555;
    X[1]  _ X[3] _ '361275431652;
    Fives _ '343277244615;
    T3    _ 0;

    while (length(PW)) do
    begin "PSWLP"
      C    _ lop(PW);
      inc(X[0], C);
      inc(X[3], C);
      T4   _ '40;

      do
      begin "RAND"
	T1 _ X[T3];

	start!code
	  MOVE	1, T1;
	  MUL	1, Fives;
	  MOVEM	1, T1;
	  MOVEM	2, T2;
	end;

	inc(T3);
	inc(X[T3], T2);

	if (T3 = 4) then
	begin
	  T3   _ X[4] lsh -'42;
	  inc(X[0], X[4]);
	end;
      end "RAND"
      until ((dcr(T4)) <= 0);
    end "PSWLP";

    return(X[0]);
  end "Cv.Hash";


! ===================================+=====================================
==========================================================================;
!! title Rtn Get.Line ;
! =========================================================================
=====================================+=====================================
=                                                                         =
=                                                                         =
=			       Rtn Get.Line				  =
=                                                                         =
=                                                                         =
=====================================+=====================================


==========================================================================;


  string procedure Get.Line;
  begin "Get.Line"
    integer I;
    string  S;


    S _ null;

    do
    begin
      I _ auxclv(-1, 0, '46);		! input a character;

      if (I >= '173) then
	done;				! these are line breaks (ugh);

      if (I >= '140) then
	dcr(I, '40);			! convert lower to upper case;

      if (I >= '40) then
	S _ S & I;			! add to string if legal;
    end
    until (I < '40);

    if (I = #cr) then
      auxclv(-1, 0, '46);		! If CR then read the LF;

    auxclv(-1, 0, '11);			! Try and get node to echo;
    return(S);
  end "Get.Line";


! ===================================+=====================================
==========================================================================;
!! title Rtn Get.Lic ;
! =========================================================================
=====================================+=====================================
=                                                                         =
=                                                                         =
=				Rtn Get.Lic				  =
=                                                                         =
=                                                                         =
=====================================+=====================================


==========================================================================;


  string Oper.Name;


! ========================================================================;


  integer procedure Get.Lic (string OPN(null));
  begin "Get.Lic"
    long real Name;
    integer Hash;
    integer Lic;
    integer Ptr;
    integer OP;
    integer EOF;
    integer array Buf[0:'777];
    string  Tmp;

    define
      bomb (X) =
      <
	begin
	  print(X, crlf);
	  release(OP);
	  Oper.Name _ null;
	  return(0)
	end
      >;

    define
      Bfnm1 = 0,
      Bfnm2 = 1,
      Bfpsw = 2,
      Bflic = 3,
      Nm1   = <location(Name)>,
      Nm2   = <location(Name)+1>;

    if (length(OPN)) then
      Tmp _ OPN
    else
      while (true) do
      begin
	print("Oper name: ");
	Tmp _ Get.Line;

	if (Tmp = "?") then
	  print("Enter your name as it appears in the OPER",
	      " license file.", crlf)
	else
	  done;
      end;

    if (length(Tmp) = 0) then
      bomb("?no name given");

    Name _ Cv.Name(Oper.Name _ Tmp);
    auxclr(-1, memory['200], '64);

    while (true) do
    begin
      print("Password: ");
      Tmp _ Get.Line;

      if (Tmp = "?") then
	print("?", crlf,
	    "Enter your password associated with the OPER name ",
	    Oper.Name, ".", crlf)
      else
	done;
    end;

    Hash _ Cv.Hash(Tmp);
    print(crlf);
    auxclr(-1, memory[0], '64);
    auxclv(-1, 0, '11);
    open(OP _ getchan, "SYS", '17, 0, 0, 0, 0, EOF _ true);

    if (EOF) then
      bomb("?Can't init SYS:");

    begin "Lookup"
      define !CHLK = '4;	! CHANIO lookup function;
      define !RBLic = '14;	! RIB address of file license;
      integer array XL[0:!RBLic];

      XL[0] _ arrinfo(XL, 2);
      XL[2] _ cvsix("DRWSPR");
      XL[3] _ cvsix("EPO");
      chnior(OP, XL[0], !CHLK);

      if (not !SKIP!) then
	bomb("?OPER passwore not found");

      if ((XL[!RBLic] land '400000) = 0) then 
	bomb("?OPER password file has no license");
    end "Lookup";

    do
    begin "Search"
      arryin(OP, Buf[0], '1000);

      if (EOF) then
	done "Search";

      for Ptr _ 0 step 7 until '770 do
      begin "Try"
	if (Buf[Ptr + Bfnm1] neq memory[Nm1]) then
	  continue "Try";

	if (Buf[Ptr + Bfnm2] neq memory[Nm2]) then
	  continue "Try";

	EOF _ Buf[Ptr + Bfpsw] neq Hash;
	Lic _ Buf[Ptr + Bflic];
	done "Search";
      end "Try";
    end "Search"
    until (EOF);

    close(OP);
    release(OP);

    if (EOF) then
    begin
      print("?Bad name or password", crlf);
      return(0);
    end;

    return(Lic);
  end "Get.Lic";


! ===================================+=====================================
==========================================================================;

! :::::::::::::::::::::::::::::::::::+:::::::::::::::::::::::::::::::::::::
				  DA Lic
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;
 MnvF