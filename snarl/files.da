!! title DA File.IO ;
! :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::+::::::::::::::::::::::::::::::::::::::
:                                                                         :
:                                                                         :
:                                File.IO                                  :
:                                                                         :
:                                                                         :
::::::::::::::::::::::::::::::::::::+::::::::::::::::::::::::::::::::::::::


		       TYMCOM-X File I/O handling.


	! <<  Did we ever test the single-file instance of Del.Open?

	! <<  We need a server to print the contents of a file record.


::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;


  redefine  lh(X)  = <((X) lsh -18)>;		! S/b in a header file;
  redefine  rh(X)  = <((X) land '777777)>;


! -------------------------------------------------------------------------


	File Input/Output Mode designators (not necessarily equivalent
	to the PDP-10's notion of I/O modes).


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;


  define  T.INPUT  = 1;		! Text-input mode;
  define  T.OUTPUT = 2;		! Text-output mode;
  define  T.SETPL  = 4;		! Keep track of Line #, Page # and
				   Sos Line # via SETPL call;


! -------------------------------------------------------------------------


			  File information record.


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;


  r!c  $File
  (
    string  Full.Name;
    string  Device;
    string  User;
    string  Name;
    string  Ext;
    string  Cr.Date;
    integer Chan;
    integer Mode;
    integer Ibuf;
    integer Obuf;
    integer Count;
    integer Brchr;
    integer Eof;
    integer Linnum;
    integer Pagnum;
    integer Sosnum
  );


  define  $$Full.Name(X)  = <$File:Full.Name[X]>;
  define  $$Device(X)     = <$File:Device[X]>;
  define  $$User(X)       = <$File:User[X]>;
  define  $$Ext(X)        = <$File:Ext[X]>;
  define  $$Cr.Date(X)    = <$File:Cr.Date[X]>;
  define  $$Chan(X)       = <$File:Chan[X]>;
  define  $$Mode(X)       = <$File:Mode[X]>;
  define  $$Ibuf(X)       = <$File:Ibuf[X]>;
  define  $$Obuf(X)       = <$File:Obuf[X]>;
  define  $$Count(X)      = <$File:Count[X]>;
  define  $$Brchr(X)      = <$File:Brchr[X]>;
  define  $$Eof(X)        = <$File:Eof[X]>;
  define  $$Name(X)       = <$File:Name[X]>;
  define  $$Pagnum(X)     = <$File:Pagnum[X]>;
  define  $$Linnum(X)     = <$File:Linnum[X]>;
  define  $$Sosnum(X)     = <$File:Sosnum[X]>;


! -------------------------------------------------------------------------


	Record used to create a list of open files, which can be closed
	either individually, or all at once.


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;


  define  ALL.FILES = <n!r>;	! Argument to Close.File, representing;
				!  all open files;


  r!c  $Open
  (
    r!p ($File)  Fp;		! File pointer;
    r!p ($Open)  Nr		! Next record;
  );

  r!p ($Open)  Open.Hdr;


! ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;
!! title Rtn Add.Open ;
! =========================================================================
====================================+======================================
=                                                                         =
=                                                                         =
=                              Rtn Add.Open                               =
=                                                                         =
=                                                                         =
====================================+======================================


==========================================================================;


  procedure Add.Open (r!p ($File)  Ptr);
  begin "Add.Open"
    r!p ($Open)  Cur;

    Cur _ new!record($Open);
    $Open:Nr[Cur] _ Open.Hdr;
    Open.Hdr _ Cur;
    $Open:Fp[Cur] _ Ptr;
  end "Add.Open";


! ==================================+======================================
==========================================================================;
!! title Rtn Del.Open ;
! =========================================================================
====================================+======================================
=                                                                         =
=                                                                         =
=                              Rtn Del.Open                               =
=                                                                         =
=                                                                         =
====================================+======================================


==========================================================================;


  procedure Del.Open (r!p ($File)  Ptr);
  begin "Del.Open"
    r!p ($Open)  Cur;
    r!p ($Open)  Prev;

    Cur _ Open.Hdr;
    Prev _ n!r;

    while ((Cur neq n!r) and ($Open:Fp[Cur] neq Ptr)) do
    begin
      Prev _ Cur;
      Cur _ $Open:Nr[Cur];
    end;

    if (Cur neq n!r) then
      if (Prev neq n!r) then
	$Open:Nr[Prev] _ $Open:Nr[Cur]
      else
	Open.Hdr _ $Open:Nr[Cur];
  end "Del.Open";


! ==================================+======================================
==========================================================================;
!! title Rtn CVUser ;
! =========================================================================
====================================+======================================
=                                                                         =
=                                                                         =
=                               Rtn CVUser                                =
=                                                                         =
=                                                                         =
====================================+======================================


	Convert a PPN to a username.  This routine uses the slower of
	the two methods availible for finding the username.  If many
	lookups are anticipated, use the routine CV2User.


==========================================================================;


  simple string procedure CVUser (integer PPN);
  begin "CVUser"
    own integer array LkB[0:'30];
    own integer Chan;
    own integer Eof;

    LkB[0] _ arrinfo(LkB, 2);
    LkB[1] _ calli('16, '41);
    LkB[2] _ PPN;
    LkB[3] _ cvsix("UFD");

    open(Chan _ getchan, "DSK", '17, 0, 0, 0, 0, Eof);

    if (Eof) then
      return(null);

    chnior(Chan, LkB[0], 4);
    release(Chan);
    return(cv6str(LkB['27]) & cv6str(LkB['30]));
  end "CVUser";


! ==================================+======================================
==========================================================================;
!! title Rtn CV2User ;
! =========================================================================
====================================+======================================
=                                                                         =
=                                                                         =
=                              Rtn CV2User                                =
=                                                                         =
=                                                                         =
====================================+======================================


	Convert a PPN to a username.  This routine uses the faster of
	the known methods to find the username, and should be used when
	many conversions are anticipated.

	! <<  Recover the cache-logic from the original code in
	      (DWS)stream.sai.


==========================================================================;


  simple string procedure CV2User (integer PPN);
  begin "CV2User"
    own integer DUL;
    own integer DUL!EOF;
    own integer DUL!Block!Number;
    own integer array DUL!Block[0:127];
    own integer i;
    own integer hash;
    own integer lowitem;
    own integer lowvalue;
    own string  username;
  
    DUL _ -1;

    if (DUL < 0) then
    begin
      open(DUL _ getchan, "DSK", '16,0,0,DUL!EOF,DUL!EOF,DUL!EOF);
      lookup(DUL, "DUL.SYS[1,4]", DUL!EOF);
  
      if (DUL!EOF) then
	usererr(0,0,"Can't access (SYS)DUL.SYS");

      DUL!Block!Number _ -1;
    end;
  
    hash _ PPN mod 101 + 1;
    useti(DUL, hash);
  
    if (DUL!EOF) then
      username _ "[" & cvos(lh(PPN)) & "," & cvos(rh(PPN)) & "]"
    else
    begin
      while (true) do
      begin "search DUL"
  	if (hash neq DUL!Block!Number) then
	  arryin(DUL, DUL!Block[0], 128);

	DUL!Block!Number _ hash;
  
	for i _ 0 step 3 until 127 do
	 "search block"
	  if (DUL!Block[i] = PPN) then
	    done "search DUL"
	  else
	    if (DUL!Block[i] = 0) then
	      done "search DUL"
	    else
	      if (DUL!Block[i] < 0) then
		done "search block";
	end "search block";
  
	hash _ rh(DUL!Block[i]) + 1;
	useti(DUL, hash);
      end "search DUL";

      if (DUL!Block[i]) then
	username _ cv6str(DUL!Block[i+1]) & cv6str(DUL!Block[i+2])
      else
	username _ "[" & cvos(lh(PPN)) & "," & cvos(rh(PPN)) & "]";
    end;

    return(username);
  end "CV2User";


! ==================================+======================================
==========================================================================;
!! title Rtn Parse ;
! =========================================================================
====================================+======================================
=                                                                         =
=                                                                         =
=                               Rtn Parse                                 =
=                                                                         =
=                                                                         =
====================================+======================================


	Scans the filespec and breaks it into Device, Username,
	Filename, and Extension.  If the filespec uses a PPN instead of
	the username, the latter is looked up.

	! <<  "File" -> "Fnam" throughout.


==========================================================================;


  procedure Parse (string File;
      reference string Device, User, Name, Ext);

  begin "Parse"
    string  Tmp;
    integer Xt;
    integer Brk;
    integer Adr.PPN;

    File _ scan(File, Blk.Tbl, Brk);

      !  << This is a temporary hack to see if removing white space will
	    improve the outcome of our parse;

    Tmp _ File;

    Device _ scan(File, Fn.Tbl, Brk);

    ! <<  might scan off a PPN at this point;

    if (Brk neq ":") then
    begin
      Device _ "DSK";
      File _ Tmp;
    end;

    Name _ cv6str(cvfil(File, Xt, Adr.PPN));
    Ext  _ cv6str(Xt)[1 for 3];

    if (not lh(Adr.PPN) and rh(Adr.PPN)) then
      User _ cv6str(memory[Adr.PPN, integer]) &
	  cv6str(memory[Adr.PPN + 1, integer])
    else
      if (Adr.PPN = 0) then
	User _ null
      else
	User _ CVUser(Adr.PPN);

!    print("..file:      ", File, crlf);
!    print("..device:    ", Device, crlf);
!    print("..user:      ", User, crlf);
!    print("..Adr.PPN:   ", cvos(Adr.PPN), crlf);
!    print("..name:      ", Name, crlf);
!    print("..extension: ", Ext, crlf);
  end "Parse";


! ==================================+======================================
==========================================================================;
!! title Rtn Open.File ;
! =========================================================================
====================================+======================================
=                                                                         =
=                                                                         =
=                             Rtn Open.File                               =
=                                                                         =
=                                                                         =
====================================+======================================


==========================================================================;


  r!p ($File)  procedure Open.File (string Fnam; integer Mode);
  begin "Open.File"
    r!p ($File)  Q;
    string  T;
    integer Brk;
    integer M;
    integer Ibuf;
    integer Obuf;
    integer array SLB[0:5];

    define  T.BUFS  = 5;		! Number of buffers for I/O;
    define  T.COUNT = 200;		! Maximum line length;

    Q _ new!record($File);
    Ibuf _ Obuf _ 0;

    if (Mode land T.INPUT) then
    begin
      Ibuf _ T.BUFS;
      M _ 0;
      $$Count(Q) _ T.COUNT;
    end
    else
      if (Mode land T.OUTPUT) then
      begin
	Obuf _ T.BUFS;
	M _ 0;
	$$Count(Q) _ 0;
      end;

    Parse(Fnam, $$Device(Q), $$User(Q), $$Name(Q), $$Ext(Q));

    if (length($$User(Q))) then
      $$Full.Name(Q) _ "(" & $$User(Q) & ")"
    else
      $$Full.Name(Q) _ null;

    $$Full.Name(Q) _ $$Full.Name(Q) & $$Name(Q) &
			(if (length($$Ext(Q))) then
			  ("." & $$Ext(Q))
			else
			  (null));

    $$Chan(Q)   _ getchan;
    $$Mode(Q)   _ M;
    $$Ibuf(Q)   _ Ibuf;
    $$Obuf(Q)   _ Obuf;

    open($$Chan(Q),
	$$Device(Q),
	$$Mode(Q),
	$$Ibuf(Q),
	$$Obuf(Q),
	$$Count(Q),
	$$Brchr(Q),
	$$Eof(Q) _ true);

    if (Mode land T.SETPL) then
      setpl($$Chan(Q), $$Linnum(Q), $$Pagnum(Q), $$Sosnum(Q));

    if (not $$Eof(Q)) then
      if (Ibuf) then
	lookup($$Chan(Q),
	    $$Full.Name(Q),
	    $$Eof(Q) _ true)
      else
	if (Obuf) then
	  enter($$Chan(Q),
	      $$Full.Name(Q),
	      $$Eof(Q) _ true);
	! <<  else what?;

    if (Mode land T.SETPL) then
      $$Pagnum(Q) _ 1;

    if ($$Eof(Q)) then
      release($$Chan(Q))
    else
    begin			! <<  What does this do for output files?;
      integer Day;
      integer Time;

      fileinfo(SLB);

      Day  _ (((SLB[1] land '140000) lsh -2) lor (SLB[2] land '007777));
      Time _ ((SLB[2] land !xwd('000037, '770000)) lsh -12);

      $$Cr.Date(Q) _ DayTime(Day, Time);
      Add.Open(Q);
    end;

    return(Q);
  end "Open.File";


! ==================================+======================================
==========================================================================;
!! title Rtn Close.File ;
! =========================================================================
====================================+======================================
=                                                                         =
=                                                                         =
=                             Rtn Close.File                              =
=                                                                         =
=                                                                         =
====================================+======================================


==========================================================================;


  procedure Close.File (r!p ($File)  Ptr);
  begin "Close.File"
    r!p ($Open)  Cur;

    if (Ptr = ALL.FILES) then
    begin
      Cur _ Open.Hdr;

      while (Cur neq n!r) do
      begin
	release($$Chan($Open:Fp[Cur]));
	Cur _ $Open:Nr[Cur];
      end;

      Open.Hdr _ n!r;
    end
    else
    begin
      Del.Open(Ptr);
      release($$Chan(Ptr));
    end;
  end "Close.File";


! ==================================+======================================
==========================================================================;
!! title Rtn F.Error ;
! =========================================================================
====================================+======================================
=                                                                         =
=                                                                         =
=                              Rtn F.Error                                =
=                                                                         =
=                                                                         =
====================================+======================================


	! <<  This could be smarter.


==========================================================================;


  integer procedure F.Error (r!p ($File)  Ptr);
  begin "F.Error"
    integer Tmp;

    Tmp _ $$Eof(Ptr);

    print(">> ");

    if (Tmp = -1) then
      print("Device """, $$Device(Ptr), ":"" not availible.")
    else
    begin
      print (case (0 max rh(Tmp) min 4) of
	  ("No Such File ",
	  "Illegal PPN ",
	  "Protection ",
	  "Busy ",
	  "???? "));
      print("""", $$Full.Name(Ptr), """.");
    end;

    print(crlf, crlf);
    return(NON.FATAL);
  end "F.Error";


! ==================================+======================================
==========================================================================;

! ::::::::::::::::::::::::::::::::::+::::::::::::::::::::::::::::::::::::::
				DA File.IO
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;
4d03@