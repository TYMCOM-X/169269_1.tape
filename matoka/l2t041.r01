:
:
	SUBTTL CIRCUIT BUILDING ROUTINES

:THIS PROGRAM IS THE SOLE PROPERTY AND CONFIDENTIAL INFORMATION OF
:TYMSHARE INC., AND MAY NOT BE COPIED IN WHOLE OR IN PART OR
:DISCLOSED TO ANY THIRD PARTY WITHOUT THE PRIOR WRITTEN CONSENT OF
:TYMSHARE.

:
:			CIRCUIT BUILDING

:	BUILD A TERMINAL CIRCUIT.  THE DIRECT ROUTINE IS USED TO ESTABLISH
:  IF A CIRCUIT EXISTS, AND IF SO LEAVES THE CIRCUIT INFORMATION IN THE
:  DIRBYT (DIRECTION BYTE) TABLE.  GIVEN THAT A CIRCUIT EXISTS, BILCIR
:  INITIATES CIRCUIT BUILDING, WHICH OCCURS IN 3 STAGES.  BILCIR 
:  SENDS OUT COMMANDS FOR STAGE 1, THE REMAINING STAGES ARE GOVERNED
:  BY COMMANDS BILCIR ADDS TO THE LOGIN LIST.  THE PRPERM ROUTINE, WHICH
:  PROCESSES ACKNOWLEDGEMENTS, RECOGNIZES WHEN TO PROCEED WITH FURTHER
:  CIRCUIT BUILDING (VIA PRE-FABRICATED INSTRUCTIONS ON LOGIN LIST) WHEN
:  ALL ACKNOWLEDGMENTS TO CIRCUIT BUILDING ARE IN FROM THE PRIOR STAGE.
:  THE THREE STAGES ARE:
:	1.  PERMUTER CHANGES & NEEDLES ARE SENT FOR THE INTERIOR OF THE
:	  CIRCUIT.  IF THE DESTINATION IS T-I, THE DESTINATION BUFFER IS 
:	  CLEARED VIA THE 3 SUB 4 COMMAND, IT IS STUFFED VIA THE TYPE 1
:	  COMMANDS WITH LOGIN INFORMATION, AND THE PERM CHANGE FOR THIS
:	  BUFFER IS ALSO SENT (BASE DOES NOT LOOK AT BUFFER UNTIL THE
:	  TYPE 5, SUB 11 SENT IN STAGE 3 IS RECEIVED).
:	  IF THE DESTINATION IS T-II A CHANNEL ASSIGNMENT COMMAND
:	  IS SEND TO THE FIRST T-II NODE OF THE FINAL T-II SEGMENT
:	  OF THE CIRCUIT. (THE NEEDLE IN STAGE 3 WILL CONTAIN
:	  THE LOGIN INFORMATION).  ACKNOWLDEGEMENTS FOR ALL THE PERM 
:	  CHANGES & NEEDLES MUST BE RECEIVED BEFORE PROCEEDING TO STAGE 2.
:	2.  A NEEDLE OR PERM CHANGE IS SENT TO THE REMOTE.
:	  AN ACK IS REQUIRED TO PROCEED TO STAGE 3.
:	3.  A NEEDLE IS SENT TO COMPLETE THE CIRCUIT TO A T-II DESTINATION,
:	  OR A TYPE 5, SUBTYPE 11 IS SENT TO A DESTINATION T-I NODE.

:  NOTE- ONLY IF THE CIRCUIT IS ENTIRELY T-II THIS PROCESS SHORTENED,
:  IN WHICH CASE THE NEEDLE IS SENT IMMEDIATELY FOR THE WHOLE CIRCUIT.



	SUBTTL	LGCGEN - BUILD NORMAL CIRCUIT


:*******************************************************:
:							:
:		BUILD NORMAL USER CIRCUIT		:
:							:
:*******************************************************:

BILCIR	ST	LINK,BLINK	:SAVE LINK
	IF	1-NOTI
	:CHECK IF CAN CONTINUE
	LH	T1,ST03CT	:GET # T-I NODES IN TAKEOVER
	JGEFS	BILC00		:VALID COUNT

	STM	R0,NEGS03,,
	JAL	LINK,S03ERR,,
	LM	R0,NEGS03,,

BILC00	CLHI	T1,NOLOGIN	:CHECK THRESHOLD TO PERMIT LOGINS
	JLFS	BILC01		:TRY TO BUILD CIRCUIT

	LA	C3,TRYAGN,,	:SEND THIS MSG TO USER
	JAL	LINK,ESCAP3	:TERMINATE LOGIN - HANG USER
	L	LINK,BLINK	:RESTORE LINK
	JR	LINK		:RETURN TO CALLER

BILC01	LIS	T1,0
	ST	T1,PBAPP	:TELL PAPPEND BUILDING NEW CIRCUIT
	EI


	:SETUP SOME NEEDLE FLAGS
	JAL	LINK,LFLGRD	:GET LLFLAG
	LR	T2,R14
	NHI	T2,@IRCM	:ISOLATE IRC RESTRICTION
	SRLS	T2,IRCP		:RIGHT JUSTIFY SAME
	STH	T2,UIRCRF	:SAVE FOR INSPECTION BY DIRECT
	LR	C3,R14
	NI	C3,@SPEEDM	:ARE SPEED BITS SET
	IF	1-TIGOUG
	JEFS	BILC10		:NO

	LHI	T1,8000		:SET HIGH SPEED BIT

BILC10	STH	T1,H5		:SAVE HIGH SPEED BIT SETTING
	ELSE
	STH	C3,H5		:SAVE HIGH SPEED BIT SETTING
	EI
	SRLS	C3,SPEEDP-4	:POSITION SPEED BITS FOR NEEDLE FLAGS
	EXBR	T2,T2
	SLLS	T2,2		:POSITION IRC CODE IN CASE REBUILD
	OR	C3,T2		:MERGE IRC RESTRICTION

	THI	R14,@COSTTM	:IS BATCH CIRCUIT REQUESTED?
	JEFS	BILC11		:NO

	OHI	C3,NFCSTT	:SET SCOST FLAG

BILC11	HS	0

	IF	UFAST
	THI	R14,@PCIRM	:PRIORITY CIRCUIT?
	JEFS	BILC12		:NO

	OHI	C3,NFPRIC	:SET PRIORITY FLAG

BILC12	HS	0
	EI

	STH	C3,NFLAGS	:SAVE FOR NEEDLE BUILDING

	:REMEMBER TID
	LR	C3,R14		:SAVE LOGIN FLAGS FOR LATER
	LR	R15,R14
	NI	R15,@TIDM	:ISOLATE TID
	ST	R15,ASTEMP	:SAVE TID FOR LATER

	:CLEAR TARGET LISTS
	LM	R8,ZERO,,	:CLEAR C4-R15

TEQ	EQ	MAXDST-8	:EXCESS BEYOND 8
	IF	1-TEQ		:NO EXCESS
	STM	10-MAXDST,DIRHST :CLEAR DIRHST & DIRNOD 1/2 WORD LISTS
	ELSE
	RE
	STM	R8,DIRHST+4*TEQ	:CLEAR FINAL SEGMENT

TEQ	EQ	TEQ-8		:8 LESS TO CLEAR
	ER	TEQ+1		:FINISH IF WILL GO BEYOND START
	IF	TEQ+8		:ANY LEFT? (-8.LE.TEQ.LE.-1)
	STM	8-TEQ,DIRHST	:FINISH
	EI
	EI

	IF	SNETS
	:SETUP REQUESTING SUBNET
	LHL	R13,LOGID	:GET REQUESTING NODE
	NMAP(R13)
	LB	R13,SNETNT,R13,	:GET SUBNET NUMBER
	ELSE
	LIS	R13,0
	EI
	STH	R13,REQSNT	:REMEMBER REQUESTING SUBNET


	:SETUP REQUESTING HOST
	LIS	R13,LLCIR
	JAL	LINK,LREAD
	STH	R14,REQHST	:REMEMBER REQUESTING HOST #

	:RETRIEVE INITIAL TARGET LIST
	LIS	R13,LLUUN	:READ LLUUN FOR 1-2 HOSTS
	JAL	LINK,LREAD
	ST	R15,DIRHST	:SAVE FIRST 2 HOST #'S
	NHI	R15,7FFF	:THIS IS NON-ZERO IF MULTI TARGET HOST
	STH	R15,H3		:SAVE AS FLAG OF MULTI TARGET STATUS
	JE	BILC2		:IT IS SINGLE HOST

	:GET REMAINING HOSTS FOR MULTI-TARGET

TEQ	EQ	0		:FOR REPEAT LOOP
	RE
	LIS	R13,LLHOST+TEQ	:GET ADD'L HOSTS
	JAL	LINK,LREAD
	STM	R14,DIRHST+4+8*TEQ :SAVE NEXT 4 HOSTS

TEQ	EQ	TEQ+1
	ER	LLEXHB+1-TEQ


	:OBTAIN AVAILABLE TARGETS - AND SETUP FOR DIRECT USING
	:DIRLIST TO DEFINE TARGET NODES, DIRCST TO DEFINE THE
	:HOST COST AND DIRBYT TO DEFINE TARGET HOST (8000+HOST).
	:C4 IS INDEX FOR DIRHST (INITIAL TARGET HOST LIST)
	:C5 IS INDEX FOR AVAILABLE TARGET NODES (DIRNOD)
	:RECALL THAT A SINGLE HOST TARGET CAN BE ASSOCIATED WITH
	:SEVERAL TARGET NODES (MULTI-BASE HOST), AND SOME OF THE TARGET
	:HOSTS SELECTED DURING THE MUD READ MAY NOW BE UNAVAILABLE.

BILC2	LHL	R15,DIRHST,C4	:NEXT HOST #
	STH	R15,CHOST	:TEMP SAVE CURRENT HOST #
	JNFS	BILC3

	LR	C4,C4		:HOST LIST EXHAUSTED - WERE ANY FOUND
	JN	BILC6		:YES

	LA	C3,HSTZRO,,	:MSG 'NO HOST SPECIFIED'
	JAL	LINK,ESCAP3	:SEND MSG & MAKE USER GO AWAY
	J	BILRET		:RETURN TO CALLER

BILC3	HS	0
	IF	1-NOTI
	CLHI	R15,$A199	:IS THIS IS A PSEUDO HOST #
	JNFS	BILC3A		:NO

	L	T1,ASTEMP	:GET TID
	CLI	T1,$816^TIDP	:IF OCTAL 16 THIS IS LIKE AN AUX CIRCUIT
	JN	INSPCT		:THIS IS TERMINAL - GO TO DEBUGGER

	J	DLLOD0		:THIS IS DOWN LINE LOAD FROM A GATEWAY

	EI

BILC3A	JAL	LINK,HGET	:CHECK HOST CONDITION
	J	BILC3G		:HOST UNKNOWN

	J	BILC3G		:HOST NOT IN REQUESTING SUBNET

	J	BILC3F		:HOST DOWN

	J	CIRC1		:HOST ANSWERED

	LH	T1,H3		:HOST SHUT, CHECK MULTI-TARGET/USE SHUTS FLAG.
	JEFS	BILC3B		:CHECK FOR OVER-RIDE & ANOTHER BASE

	JL	CIRC1		:USE SHUTS FLAG SET

	LR	R12,R12		:MORE BASES ON HOST?
	JE	BILC5		:NO, CONTINUE

	J	HGETNX		:TRY NEXT BASE ON HOST

	:SINGLE TARGET,  CHECK OVERIDE.
	:IF OVERRIDE, TRY TO LOCATE AN ANSWERED BASE.
	:IF NONE, SET USE SHUTS FLAG AND USE COMMON CODE.

BILC3B	TI	C3,@SHUTM	:WORD 1 OF LLFLAG - TEST SHUT OVERIDE
	JEFS	BILC3C		:NO OVERIDE

	LR	C5,C5		:ANY ANSWERED BASES YET?
	JEFS	BILC3D		:NO, CHECK IF OTHERS.

BILC3C	LR	R12,R12		:ADDITIONAL BASES ON HOST?
	JN	HGETNX		:YES, TRY NEXT ONE

	LR	C5,C5		:HAVE WE FOUND ANY BASES ON HOST?
	JE	CIRC4		:NO - SEND HST & SHUT MSG, REINIT USER

	J	BILC6		:YES, FIND A PATH


	:LOOK FOR POSSIBLE UPS FOR OVERRIDE SITUATION.

BILC3D	LR	R12,R12		:ANY MORE BASES ON HOST?
	JE	CIRC1		:NO, TRY THIS SHUT ENTRY

	JAL	LINK,HGETNX	:GET NEXT BASE
	HC	0,0		:HOST UNKNOWN - SHOUULDN'T HAPPEN

	J	BILC3E		:NO OTHER HOST IN SUBNET

	J	BILC3E		:NO ADD'L UP

	J	CIRC1		:ANSWERED, TRY THIS ONE

	LR	R12,R12		:SHUT, MORE?
	JN	HGETNX		:YES - TRY IT

BILC3E	LCS	T1,1		:FLAG TO USE SHUTS
	STH	T1,H3		:ONLY USED WITH SINGLE HOST & OVERRIDE
	LHL	R15,DIRHST	:RECOVER HOST #
	J	BILC3A		:REPROCESS WITH USE SHUTS FLAG

BILC3F	LH	T1,H3		:DOWN, WAS MULTI-TARGET SPECIFIED?
	JG	BILC5		:YES, CONTINUE

	LR	C5,C5		:DID WE FIND OTHER BASES ON HOST?
	JE	CIRC5		:NO, SEND HST & DOWN MSG, REINIT USER

	J	BILC6		:YES, FIND A PATH

BILC3G	LH	T1,H3		:NOT IN NET, MULTI-TARGET SPECIFIED?
	JG	BILC5		:YES, CONTINUE

	LR	C5,C5		:DID WE FIND ANOTHER BASE BASE ON HOST?
	JE	CIRC6		:NO, SEND MESSAGES & REINIT USER

	J	BILC6		:YES, FIND A PATH


	:THIS HOST ANSWERED, SEE IF HAS PORTS
	:IF AVAILABLE & INTERNAL CIRCUIT - CHOOSE THIS HOST
	:AND BUILD INTERNAL CIRCUIT REGARDLESS OF HOST COST

CIRC1	LR	R0,R14		:COPY STATUS BYTE
	NHI	R0,HFPM^-8	:HOST OUT OF PORTS?
	JN	BILC4A		:HOST REPORTS OUT OF PORTS

	NHI	R14,HPAM^-8	:EXTRACT HPA
	LR	R0,R14		:SAVE HOST PORT ARRAY # (FOR INTERNAL CIRCUIT)
	LR	C6,R15		:SAVE BASE #
	LR	K2,R13		:SAVE HOST-BASE COST IF NEEDED
	IF	1-NOTI
	JAL	LINK,TBPA	:TEST IF BASE PORT AVAILABLE
	J	BILC4A		:NOT AVAILABLE, OTHER BASES ON HOST?

	EI
	CLH	C6,LOGID	:IS THIS AN INTERNAL CIRCUIT
	JE	BILCF		:YES - CHOOSE THIS HOST

	IF	(1-FULLTI)&(1-NOTI)
	CLHI	C6,T2BN		:IS BASE T-II NODE
	JLFS	BILC4		:NO

	SHI	C6,BRGAP+RIIGAP :MAP NODE #
	EI

BILC4	STH	C6,DIRLIST,C5	:SAVE MAPPED NODE # AS DESTINATION FOR DIRECT
	STH	C6,DIRNOD,C5	:SAVE A COPY FOR CHECKING END OF CIRCUIT
	STH	K2,DIRCST,C5	:SAVE HOST COST FOR DIRECT
	LHL	K2,CHOST	:RETRIEVE CURRENT HOST #
	OHI	K2,8000		:FLAG AS DESTINATION HOST
	STH	K2,DIRBYT-2,C6,C6 :SAVE FOR DIRECT
	AIS	C5,2		:INCR INDEX INTO DIRLIST
	CLHI	C5,2*MAXDST	:END OF LIST?
	JGEFS	BILC6		:YES

BILC4A	LR	R12,R12		:MORE BASES ON HOST?
	JEFS	BILC5		:NO

	LA	LINK,BILC3A+4	:RE-ESTABLISH RETURN ADDRESS
	J	HGETNX		:REENTER HGET FOR NEXT ENTRY

BILC5	AIS	C4,2		:INCR INDEX INTO HOST LIST
	CLHI	C4,2*MAXDST	:IS LIST EXHAUSTED
	JL	BILC2		:NO TARGET SELECTION COMPLETED -
:  IF ANY DESTINATIONS AVAILABLE BUILD THE CIRCUIT

BILC6	LR	C5,C5		:WERE ANY DESTINATIONS AVAILABLE
	JN	BILC8		:YES - FIND A PATH

	:NO DESTINATIONS AVAILABLE
	LHL	R15,DIRHST	:GET FIRST HOST IN LIST
	JAL	LINK,HGET	:REPORT IT'S STATUS
	J	CIRC6		:HOST UNKNOWN

	J	CIRC6		:HOST NOT IN REQUESTING SUBNET

	J	CIRC5		:HOST DOWN

	J	BILC7		:HOST ANSWERED, OUT OF PORTS?

	J	CIRC4		:HOST SHUT

BILC7	LR	R0,R14		:COPY STATUS
	NHI	R0,HFPM^-8	:REPORTED OUT OF PORTS?
	JN	CIRC7		:YES - TELL USER

	IF	1-NOTI
	NHI	R14,HPAM^-8	:EXTRACT HPA
	JAL	LINK,TBPA	:HOST IS UP - IS IT OUT OF PORTS
	J	CIRC7		:YES - TELL USER HOST OUT OF PORTS

	EI
	HC	0		:INCONSISTENT


	:DESTINATIONS AVAILABLE, FIND A PATH

BILC8	LIS	R0,0		:FLAG TO DIRECT TO USE ALL NODES
	STH	R0,DIRLIST,C5	:MARKER FOR END OF DESTINATION LIST
	LHL	R13,NFLAGS	:GET NEEDLE FLAGS FOR COST TABLE & SPEED
				:!!FIELD DEPENDENT CODE
	NHI	R13,NFCSTT!NFSPDB :EXTRACT BITS 
	SRLS	R13,2		:POSITION BITS AS A WORD INDEX
	L	R13,COSTTA,R13,	:GET COST TABLE ADDRESS

BILCB	JAL	LINK,DIRECT	:FIND A PATH TO THE NEAREST DESTINATION
	J	CIRC8		:NO PATH - INFORM USER

		:A PATH EXISTS
	LHL	K1,H1		:GET UNMAPPED DESTINATION BASE
	LHL	R15,BILHST	:DESTINATION HOST
	STH	R15,CHOST	:SAVE FOR NEEDLE BUILDER
	JAL	LINK,HBSGET	:GET HOST STATUS ON THIS BASE
	HC	0,0		:NOT IN NET -- FATAL ERROR

	J	CIRC4B		:MUST BE SHUT & OVERRIDE IS SET

BILCE1	LR	K2,R14		:COPY STATUS
	IF	NOTI
	LIS	R15,0		:NO PORT ASSIGNED TO T-II
	ELSE
	NHI	K2,HIQM^-8	:EXTRACT HIQ BIT FOR LATER
	NHI	R14,HPAM^-8	:EXTRACT PORT ARRAY #
	STH	R14,HSTPA	:SAVE HOST PORT ARRAY #
	JAL	LINK,BPA	:ASSIGN A PORT IN THE BASE
	HC	0,0		:NO PORT AVAILABLE - FATAL ERROR

	EI
	STH	R15,H7		:DEST BUF #
	LHL	T1,LOGID+2	:REMOTE BUF #
	STH	T1,H2		:SOURCE BUF #
	STH	T1,SRCBUF
	LR	R14,K2		:HIQ DESTINATION?
	JEFS	BILCE2		:NO

	LR	R14,C3		:RECOVER USER LOGIN FLAGS
	NHI	R14,@IIXM	:BIT SET?
	JEFS	BILCE2		:NO

	LHI	R14,NFIIXF	:NEEDLE FLAG FOR IIX CIRCUIT
	AHM	R14,NFLAGS	:SET FLAG

BILCE2	STH	R14,IIXFLG	:FLAG IIX CIRCUIT CAPABILITY (0<-->NOT IIX)
	JAL	LINK,ACTCR	:GENERATE ACCOUNTING INFO
	LHL	T2,H1		:DEST NODE #




	IF	1-NOTI
	:SETUP WHERE TO ADD COMMANDS TO LOGIN LIST
	:ACCORDING TO WHETHER DESTINATION IS T-I OR T-II
	:IF DESTINATION IS T-I, STUFF LOGIN INFO INTO BUFFER VIA CIRCC

	CLHI	T2,T2BN		:IS IT T-II
	JGEFS	CIRC1D		:YES

		:DEST NODE IS T-I
	JAL	LINK,CIRCC	:SEND USER NAME ETC TO BASE
	LIS	T1,LLPSWD	:START ADDING B'LETS AT LLPSWD
	STH	T1,TEMP		:SAVE THAT INFO
	LIS	R14,LLUUN	:DELETE B'LETS STARTING AT LLUUN THRU END
	LIS	R15,0
	JAL	LINK,LSUBDEL
	NOP
	J	CIRC1E

	EI

		:DEST NODE IS T-II

CIRC1D	JAL	LINK,LFLGRD	:READ LLFLAG
	EXHR	T1,R15		:RIGHT JUSTIFY END OF PASSWORD PTR
	AIS	R15,7		:GO TO FIRST B'LET AFTER USER NAME
	SRLS	R15,3
	NHI	R15,0FFF	:THIS B'LET
	STH	R15,TEMP	:START ADDING NEEDLES HERE
	SRLS	T1,3		:RIGHT JUSTIFY B'LET POSITION OF PSWD END
	NHI	T1,0FFF		:ISOLATE SAME
	CLR	T1,R15		:IS END OF PSWD PAST THIS POINT
	JLEFS	CIRC1E		:NO

	LR	R14,R15		:SET UP TO DELETE ALL B'LET FROM HERE ON
	LIS	R15,0
	JAL	LINK,LSUBDEL
	NOP
	IF	NOTI

CIRC1E	LHL	R15,LOGID	:REQUESTING NODE #
	LIS	R12,0		:INDICATE CIRCUIT STARTS IN T-II
	JAL	LINK,NEEDLE
	J	CIRCA		:COMPLETED

	HC	0,0		:CIRCUIT INCOMPLETE - FATAL ERROR

	ELSE

	:GENERATE SUP MESSAGES FOR REQUESTING NODE.
	:IF ALL T-II SEND NEEDLE, OTHERWISE SAVE PERM CHANGE
	:OR NEEDLE FOR START OF CIRCUIT ON LOGIN LIST.

CIRC1E	LHL	R15,LOGID	:REQUESTING NODE #
	CLHI	R15,T2BN	:IS IT T-II
	JL	CIRC1F		:NO

	:REQUESTING NODE IS T-II, BUILD NEEDLE - PUT ON LOGIN LIST
	:IF NOT ENTIRELY T-II, ELSE SEND NEEDLE & CLEAN UP LOGIN LIST
	LIS	R12,0		:INDICATE START OF CIRCUIT IN T-II
	JAL	LINK,NEEDLE	:BUILD A NEEDLE AS FAR AS IT WILL GO
	J	CIRCA		:CIRCUIT ENTIRELY IN T-II

	LIS	R12,0		:PREPARE ENTRY TO ASBUFF
	LIS	R13,0
	LHL	T1,CBUF-2	:LENGTH OF NEEDLE
	LHL	R14,CBUF-4,T1	:NEXT NODE # (T-I)
	NHI	R14,7FFF	:CLEAR SIGN BIT
	LHL	R15,W4		:LAST T-II NODE # IN NEEDLE
	STM	R12,ASTEMP	:SAVE FOR ASBUFF
	JAL	LINK,ANEDL	:PUT NEEDLE ON LOGIN LIST
	LHL	R13,TEMP	:CURRENT LOGIN-LIST B'LET
	LIS	T1,1
	AHM	T1,TEMP		:INCREMENT TO NEXT
	LHL	R14,W4		:LAST T-II NODE OF NEEDLE
	EXHR	R14,R14		:POSITION FOR LOGIN LIST LPERM ENTRY
	LHL	R15,ACTSQN+2	:LOW ORDER 16 BITS OF ACTSQN SHOULD BE UNIQUE
	OI	R15,1^1F	:SIGN BIT INDICATES LPERM ENTRY
	JAL	LINK,LWRITE	:ADD LPERM ENTRY FOR NEEDLE TO LOGIN LIST
	J	CIRC1G


	:REQUESTING NODE IS T-I

CIRC1F	JAL	LINK,ASCHAN	:ASSIGN A CHANNEL IN REMOTE
	STM	R12,ASTEMP	:SAVE FOR ASBUFF
	LHL	R14,LOGID	:REMOTE NODE #
	OHI	R14,2000	:TYPE 2 MSG
	EXHR	R14,R14
	OR	R14,C1		:SR1 & SR2 OF TYPE 2
	LHL	R15,IIXFLG	:IIX CIRCUIT?
	JEFS	CIRC1J		:NO

	OI	R14,8000	:INCLUDE IIX CIRCUIT FLAG IN PERM TO SOURCE

CIRC1J	LR	R15,C2		:SR3 OF TYP 2
	NI	R15,0FFFF	:RIGHT HALF ONLY
	LHL	R13,TEMP	:B'LET POSITION ON SUBLIST
	LR	C3,R13
	AIS	C3,1
	JAL	LINK,LWRITE
	L	R14,LOGID
	LR	R15,C2
	OI	R15,1^1F	:SIGN BIT INDICATE LPERM ENTRY
	LR	R13,C3		:B'LET POSITION
	AIS	C3,1
	STH	C3,TEMP
	JAL	LINK,LWRITE

	:IF DESTINATION IS T-I PUT TYPE 5 SUB 11 ON LOGIN LIST
	:(IF T-II, FINAL NEEDLE WILL BE ADDED WHEN GENERATED.)

CIRC1G	LHL	T1,H1		:DEST BASE #
	CLHI	T1,T2BN		:IS IT T-II
	JGE	CIRC1H		:YES

	OHI	T1,5000		:TYP 5 MSG
	LHL	R14,HSTPA	:HOST # IN BASE
	SLLS	R14,9		:POSITION PLUS 1 FOR SR2 OF TYP 5
	OH	R14,H7		:DEST BUF #
	SRLS	R14,1		:PORT & HOST #'S FOR TYP 5
	EXHR	T1,T1
	OR	R14,T1		:SR1 & SR2 FOR TYP 5
	LHI	R15,900		:SUBTYPE 11 (EXTERNAL LOGIN) SR3 OF TYPE 5
	LHL	T1,IIXFLG	:IIX CIRCUIT?
	JEFS	CIRC1K		:NO

	AIS	R15,1		:INCLUDE IIX CIRCUIT FLAG IN 5 SUB 9

CIRC1K	LHL	R13,TEMP
	LR	T1,R13
	AIS	T1,1
	STH	T1,TEMP
	JAL	LINK,LWRITE	:SAVE ON LOGIN LIST


	:PROCESS NEXT NODE IN INTERIOR OF CIRCUIT

CIRC1H	LM	R12,ASTEMP
	CLHI	R14,T2BN	:IS NEXT NODE T-II
	JGEFS	CIRC2Z		:YES - START NEEDLE BUILDING

		:NEXT NODE IS T-I, GENERATE TYPE 2'S
		:AND PLACE ON COMMAND & LPERM LISTS

CIRC2	JAL	LINK,ASBUFF	:ASSIGN PASSTHRU BUF IN NEXT NODE
	J	CIRC3		:END OF CIRCUIT

	JAL	LINK,PLACE	:ADD TO COMMAND & LPERM LISTS
	JAL	LINK,ASCHAN	:ASSIGN CHANNEL TO NEXT NODE
	JAL	LINK,PLACE	:ADD TO COMMAND & LPERM LISTS
	CLHI	R14,T2BN	:IS NEXT NODE T-II
	JLBS	CIRC2		:CONTINUE BUILDING T-I CIRCUIT

		:NEXT NODE IS T-II, GENERATE NEEDLE -
		:IF NOT END OF CIRCUIT PLACE ON COMMAND & LPERM LIST,
		:OTHERWISE ADD TO LOGIN LIST

CIRC2Z	JAL	LINK,CIR1T2	:CONTINUE BUILDING CIRCUIT IN T-II
	JFS	CIRC2Y; NOPR	:CIRCUIT COMPLETE

	J	CIRC2		:CONTINUE BUILDING IN T-I

	:CIRCUIT COMPLETE
	:CIRCUIT CONTAINS AT LEAST 1 T-I NODE AND IS NOT INTERNAL
	:HENCE THERE MUST BE SOME ACKNOWLEDGEMENTS PENDING-
	:IF NEIGHBOR OF SOURCE IS T-I, A LPERM ACK,
	:OTHERWISE A CHANNEL OR NEEDLE ACK. FROM SUBSEQUENT T-II SEGMENT.

CIRC2Y	LH	T1,PBAPP	:MAKE SURE ACKS ARE PENDING.
	JNFS	BILCMP		:YES - FINAL CLEANUP & RETURN TO CALLER

	HC	0,0		:CRASH-CIRCUIT BUILDING INCONSISTENCY

	:CIRCUIT BUILDING COMPLETED AND LOGIN NOW IN STATE 5
	:(WAITING FOR PERM ACKNOWLEDGEMENTS).  SET TO STATE 5,
	:UPDATE TIMEOUT, AND SAVE PERM THREAD & TIME IN LLFLAG.

BILCMP	LHI	R15,40		:UPDATE TIMEOUT BY 64 SECONDS
	JAL	LINK,LOG5UP	:UPDATE LOGIN LIST
	EI


BILRET	L	LINK,BLINK	:RESTORE LINK
	JR	LINK		:RETURN TO CALLER


:	TERMINAL INITIATED INTERNAL CIRCUIT

BILCF	STH	C6,H1		:SAVE BASE #
	STH	R0,HSTPA	:SAVE HOST PORT ARRAY #
	LR	R14,R0
	EXBR	R0,R0		:POSITION FOR TYP 2 MSG
	STH	R0,HSTPA2
	IF	NOTI
	LIS	R15,0		:FAKE PORT ASSIGNMENT
	ELSE
	LR	R15,C6
	JAL	LINK,BPA	:ASSIGN A PORT IN THE BASE
	HC	0,0		:NOT AVAILABLE - FATAL ERROR

	EI
	STH	R15,H7		:DEST BUF #
	LHL	T1,LOGID+2	:REMOTE BUF #
	STH	T1,H2		:SOURCE BUF #
	OHI	T1,1		:INSURE ODD BUF # SO PERM VALUE WILL BE OK
	STH	T1,SRCBUF
	LIS	R13,0		:SET FLAG & USE AUX INTERNAL CIRCUIT CODE
	STH	R13,H4
	JAL	LINK,LREAD	:READ TOP LEVEL B'LET
	STH	R14,STOUT	:SAVE TIMEOUT ITEM #
	J	AUXC0L		:CONTINUE BUILDING INTERNAL CIRCUIT

				:USING AUXILLARY CIRCUIT CODE

	IF	1-NOTI
	SUBTTL	LGCGEN - T-I RELATED CIRCUIT SUBROUTINES


:*******************************************************:
:							:
:   SUBROUTINE TO BUILD T-II CIRCUIT FROM A T-I NODE	:
:							:
:*******************************************************:

:  BUILD T-II CIRCUIT STARTING FROM T-I NODE UNTIL ANOTHER T-I NODE
:  OR DESTINATION IS REACHED.  R12-R15 CONTAIN CRITICAL INFORMATION.
:  THIS ROUTINE ALSO CALLED FROM AUX CIRCUIT BUILDER.  NEEDLES THAT
:  DO NOT COMPLETE THE CIRCUIT ARE INCOMPLETE, SINCE THE CHANNEL TO
:  THE NEXT T-I NODE IS NOT YET ASSIGNED.  THE NEXT CALL TO ASBUFF
:  NOTES THAT THE PREVIOUS NODE WAS T-II, FAKES A CALL TO ASCHAN TO
:  OBTAIN THE CHANNEL #, AND COMPLETES THE NEEDLE.  CIR1T2 LEAVES
:  INTERIOR CIRCUIT NEEDLES IN CBUF, AND AFTER IT IS COMPLETED
:  BY ASBUF, IT IS ADDED TO THE COMMAND LIST.  CIR1T2 ALSO ADDS THE 
:  LPERM ACK ENTRY FOR THE INTERIOR NEEDLE TO THE LPERM LIST.  IF THE
:  NEEDLE IS TERMINAL, CIR1T2 LEAVES IT IN THE LOGIN LIST.


CIR1T2	ST	LINK,ASLINK	:SAVE LINK
	STM	R12,ASTEMP	:SAVE RESULTS OF PRIOR ASCHAN CALL
	LR	R15,R14		:T-II NODE #
	LHL	C4,ASTEMP+0E	:NEIGHBOR NODE
	LR	R12,R12		:IS LINK OUT OF CHANNELS
	JN	CIRC2B		:NO

	JAL	LINK,NODGET	:SET OUT OF CHANNELS ON T-II NODE DESC
	HC	0,0		:CRASH - NODE MUST BE THERE!

	:SEARCH FOR LINK TO NODE <C4>
	LHI	T1,LINPTR+LNKNOD,R14 :ADDRESS OF FIRST NEIGHBOR NODE
	SHT(T1,LNKPSZ,C4,T2)
	HC	0,0		:NEIGHBOR MISMATCH - FATAL ERROR

	:FOUND LINK
	LHL	T2,LNKDSP,T1	:DISPL TO LINK DESC
	LIS	T1,NOCHAN	:BIT POSITION FOR OUT OF CHANNELS FLAG
	SBT	T1,LNKST,T2,R14	:SHOW LINK OUT OF CHANNELS

CIRC2B	LHL	T1,ASTEMP+6	:CHANNEL # ASSIGNED
	EXHR	R12,C4		:POSITION NODE #
	OR	R12,T1		:PASS THIS INFO TO NEEDLE BUILDER
	JAL	LINK,NEEDLE	:BUILD A NEEDLE AS FAR AS IT WILL GO
	J	CIRC2C		:THIS NEEDLE COMPLETES THE CIRCUIT

	LHL	R13,W4		:LAST T-II NODE OF NEEDLE
	LHL	R15,ACTSQN+2	:LOW ORDER 16 BITS OF INVOICE IS IDENIFIER
	JAL	LINK,PAPPEND	:APPEND NEEDLE ACK TO PERM RESPONSE LIST
	LIS	R12,0		:SET UP ENTRY TO ASBUFF
	STH	R12,W1		:ALSO TELL ASBUFF THE NEEDLE IS IN CBUFF
	LIS	R13,0
	LHL	T1,CBUF-2	:SIZE OF NEEDLE
	LHL	R14,CBUF-4,T1	:NEXT NODE IN CIRCUIT (T-I NODE)
	NHI	R14,7FFF	:CLEAR SIGN BIT
	LH	R15,W4		:LAST NODE # IN NEEDLE (T-II NODE)
	L	LINK,ASLINK	:RESTORE LINK
	J	4,LINK		:SKIP RETURN - CONTINUE BUILDING CIRCUIT IN T-I


	:THIS NEEDLE COMPLETES THE CIRCUIT & THE NEEDLE SUBROUTINE HAS
	:PUT THE NECESSARY LOGIN INFO IN NEEDLE.  PUT THE NEEDLE
	:ON THE LOGIN LIST, SEND RESERVE CHANNEL COMMAND
	:& ADD CORRESONDING RESERVE CHANNEL ACK TO LPERM LIST.
	:DELETE LOGIN LIST B'LETS CONTAINING USER NAME.

CIRC2C	JAL	LINK,ANEDL	:ADD FINAL NEEDLE TO LOGIN LIST
	L	R14,CBUF+0E	:T-I NODE #, CHANNEL # FOR RESERVE CHANNEL CMD
	OHI	R14,1100	:T-I NODE #, T-II COMMAND TYPE 11-CHAN #
	EXHR	R14,R14		:PUT DATA IN PROPER ORDER
	L	R15,CBUF+4	:INVOICE #
	STM	R14,CBUF+2	:DATA FOR TYPE 11 COMMAND
	LIS	R13,0A		:LENGTH OF T-II COMMAND
	STH	R13,CBUF-2
	JAL	LINK,C2APPEND	:APPEND TO LCOM
	LHL	R13,CBUF	:T-II NODE #
	NHI	R13,7FFF	:STRIP SIGN BIT
	LHL	R15,ACTSQN+2	:LOW ORDER 16 BITS OF INVOICE AS IDENTIFIER
	JAL	LINK,PAPPEND	:ADD CHANNEL RESERVE ACK TO LPERM LIST
	JAL	LINK,LFLGRD	:READ LLFLAG
	NHI	R15,7FFF	:ISOLATE END OF USER NAME PTR
	SIS	R15,1		:CALCULATE LAST B'LET USED FOR USER NAME
	SRLS	R15,3		:THIS IS IT
	LIS	R14,LLPSWD	:DELETE B'LET POSITIONS LLPSWD TO END OF NAME
	JAL	LINK,LSUBDEL
	NOP
	L	LINK,ASLINK	:RESTORE LINK
	JR	LINK		:RETURN - INDICATE CIRCUIT COMPLETE


CIRC3	JAL	LINK,PLACE	:ADD TO COMMAND & LPERM LIST
	J	BILCMP		:CLEAN UP & RETURN TO CALLER

	EI

	SUBTTL	LGCGEN - NORMAL CIRCUIT BUILD FAILURE HANDLERS


:*******************************************************:
:							:
:	NORMAL CIRCUIT COULDN'T BE BUILT		:
:							:
:*******************************************************:


	:HERE IF HOST IS SHUT 

CIRC4	JAL	LINK,CIRCH	:SEND HOST MSG IF THERE IS ONE
	LA	R15,HSHUT,,	:TELL USER NO LOGIN CAUSE HOST SHUT
	JAL	LINK,TLKLOG	:SEND MSG
	J	CIRC9		:REINITIAIZE USER LOGIN


	:HERE IF HOST SHUT & LOGIN WITH OVERRIDE

CIRC4B	STH	R14,HSTPA	:DEST PORT ARRAY #
	LA	R15,SHUT,,	:STRING PTR TO '^GSHUT^G'
	JAL	LINK,TLKLOG	:SEND STRING TO REMOTE
	LHL	R15,H1		:RESTORE UNMAPPED DEST NODE #
	LHL	R14,HSTPA
	J	BILCE1		:CONTINUE CIRCUIT BUILDING


	:HERE IF HOST DOWN

CIRC5	JAL	LINK,CIRCH	:SEND HOST MSG IF THERE IS ONE
	LA	R15,HDOWN,,	:MSG 'HOST DOWN'
	JAL	LINK,TLKLOG	:SEND MSG
	J	CIRC9		:REINITIALIZE USER LOGIN


	:HERE IF HOST NOT FOUND

CIRC6	JAL	LINK,CIRCH	:SEND HOST MSG IF THERE IS ONE
	LA	R15,HUNKWN,,	:'HOST NOT ON NET'
	JAL	LINK,TLKLOG	:SEND MSG TO REMOTE
	JFS	CIRC9		:REINITIALIZE USER LOGIN


	:HERE IF NO PORTS IN DEST BASE

CIRC7	LA	R15,HNPORT,,	:'HOST OUT OF PORTS'
	JAL	LINK,TLKLOG	:SEND MSG
	JFS	CIRC9		:REINITIALIZE USER LOGIN


	:HERE IF OUT OF CHANNELS IN REMOTE OR NO PATH FROM REMOTE

CIRC8	LA	R15,HCANT,,	:'CIRCUITS BUSY'
	JAL	LINK,TLKLOG	:SEND MSG


	:REINITIALIZE USER LOGIN

CIRC9	JAL	LINK,LFLGRD	:GET LLFLAG
	NI	R14,LFLGSM	:INIT LOGIN
	LHI	R15,UNSS	:MAKE USER NAME STRING NULL
	JAL	LINK,LFLGUP	:UPDATE LLFLAG
	LIS	R13,LLUUN	:UPDATE LLUUN - UUN & HOST # TO ZERO
	LIS	R14,0
	LIS	R15,0
	JAL	LINK,LWRITE
	LHI	R14,8000	:SEND TYPE 3 SUBTYPE 0
	LHI	R15,0C001	:EMPTY INPUT, ECHO, 'PLEASE LOGIN'
	JAL	LINK,REMSG	:SEND MSG
	J	BILRET		:RETURN TO CALLER



	IF	HDSMAX
:  SEND OPERATOR ENTERED HOST DOWN MESSAGE

CIRCH	LHL	T2,DIRHST	:GET HOST #
	CLHI	T2,HDSMAX	:MAX HOST # ALLOWED FOR MSG ON DISK
	JGR	LINK		:TOO LARGE, RETURN

	IF	MSC
	LHI	R15,HSTSTA,T2	:DISK ADDR OF MSG FOR THIS HOST
	ELSE
	LHI	R15,HSTSTA+(HSTLU^0D),T2 :DISK ADDR OF MSG FOR THIS HOST
	EI

CIRCH0	LHL	T1,NFREE	:CHECK # OF FREE B'LETS
	CLHI	T1,BLETSIZ/0C	:IF FEWER B'LETS SKIP MSG
	JLR	LINK		:RETURN

	IF	MSC
	CL	R15,HSTDSK+SHRPOS :IS THIS SEGMENT IN BUFFER
	JE	CIRCH1		:YES - SKIP DISK READ

	ST	R15,HSTDSK+SHRPOS :STORE DISK ADDR IN PARM BLOCK
	SVC	SHARE,HSTDSK	:ISSUE READ REQUEST
	LB	T1,HSTDSK+SHRRS	:LOAD STATUS BYTE
	JE	CIRCH1		:JUMP IF SUCCESSFUL

	DECHK(HSTDSK)		:COMMON ERROR ROUTINE
	IF	ERRTIM
	TIMERR(T1)
	ELSE
	STH	T1,ERRERR,,	:REPORT ERROR
	STH	R15,ERRERR+2,,	:REPORT DISK ADDRESS
	EI
	LIS	T1,0		:CLEAR ERROR RETURN
	STB	T1,HSTDSK	:PREPARE FOR NEXT READ
	JR	LINK		:SKIP MSG - RETURN

	ELSE
	CLH	R15,HSTDSK+6	:IS DATA FOR THIS ADDR ALREADY IN BUF
	JE	CIRCH1		:YES - SKIP DISK READ

	STH	R15,HSTDSK+6	:STORE DISK ADDR IN DISK PARAM BLOCK
	SVC	DK2SVC,HSTDSK	:SECTOR READ DISK WITH SLEEP
	LHL	T1,HSTDSK	:CHECK DISK STATUS
	JE	CIRCH1		:JUMP IF SUCCESSFUL

	DECHK(HSTDSK,DESEC)	:COMMON ERROR ROUTINE
	IF	ERRTIM
	TIMERR(T1)
	ELSE
	STH	T1,ERRERR,,	:REPORT ERROR CODE
	STH	R15,ERRERR+2,,	:REPORT DISK ADDR
	EI
	LIS	T1,0		:CLEAR ERROR RETURN (SET UP FOR NEXT READ)
	STH	T1,HSTDSK
	JR	LINK		:SKIP MSG - RETURN

	EI

CIRCH1	LB	R15,HTAREA,,	:COUNT BYTE
	JER	LINK		:NO MSG

CIRCH4	SIS	R15,1		:IGNORE ZERO AT END OF MSG
	STB	R15,HTAREA,,	:UPDATE CHAR COUNT

CIRCH2	LB	T1,HTAREA,R15,	:TRANSLATE UPPER CASE CHARS TO LOWER CASE
	NHI	T1,7F		:INSURE NO PARITY BIT
	CLHI	T1,41		:CHECK IF "A" OR LARGER
	JLFS	CIRCH3

	CLHI	T1,5A		:CHECK IF "Z" OR LESS
	JGFS	CIRCH3

	OHI	T1,20		:MAKE IT LOWER CASE
	STB	T1,HTAREA,R15,	:CHANGE CHAR IN STRING

CIRCH3	SIS	R15,1		:DECR STRING INDEX
	JG	CIRCH2		:MORE CHAR'S TO CHECK

	LA	R15,HTAREA,,	:ADDR OF STRING
	ST	LINK,W5		:SAVE LINK
	JAL	LINK,TLKLOG	:SEND MSG
	L	LINK,W5		:RESTORE LINK
	JR	LINK		:RETURN

	ELSE

CIRCH	JR	LINK		:NOP FOR NO HOST MESSAGE CONFIGURATION

	EI



	SUBTTL	LGCGEN - NEEDLE RELATED ROUTINES

:*******************************************************:
:							:
:		NEEDLE RELATED SUBROUTINES		:
:							:
:*******************************************************:

:CIRCUIT ENTIRELY IN TYMNET II - SEND NEEDLE AND CLEAN UP LOGIN

CIRCA	JAL	LINK,CIREND	:CALL ROUTINE TO SEND NEEDLE & DO CLEAN UP
	LIS	T1,1
	AM	T1,AT2CIR	:COUNT # OF ALL T-II CIRCUITS
	J	BILRET		:RETURN TO CALLER


:	THIS ROUTINE ALSO CALLED FROM AUX CIRCUIT BUILDER

CIREND	ST	LINK,ALINK	:SAVE LINK
	JAL	LINK,C2APPEND	:DISPATCH NEEDLE
	LIS	R13,LLTOP	:READ TOP LEVEL LOGIN LIST
	JAL	LINK,LREAD
	LR	C2,R15		:SAVE LOGID FOR LCHSUB
	LR	R15,R14		:TIMEOUT ITEM #
	JAL	LINK,TREMOVE	:REMOVE TIMEOUT
	JAL	LINK,LFLGRD	:READ LLFLAG
	LR	C3,R14		:SAVE TID
	JAL	LINK,LDELETE	:REMOVE LOGIN LIST ENTRY
	JAL	LINK,LCHSUB	:STOP MONITORING THIS PORT IF MONITORING
	LIS	R15,1
	LHL	T1,LOGID	:RECOVER NODE #
	NMAP(T1)
	AHM	R15,TLGSCL,T1,T1 :COUNT LOGIN SESSIONS CLOSED
	L	LINK,ALINK	:RESTORE LINK
	NI	C3,@TIDM	:ISOLATE TID
	JNR	LINK		:NOT AUX CIRCUIT - RETURN

	JAL	LINK,AUXDON	:SHOW NO AUX CIRCUIT IN PROGRESS
	L	LINK,ALINK	:RESTORE LINK
	JR	LINK		:RETURN


	IF	1-NOTI
:  ADD A NEEDLE BUILT IN CBUF TO THE LOGIN LIST AT B'LET POSITION IN "TEMP"
:  THIS ROUTINE MAKES WORD LOADS FROM HALF WORD BOUNDARIES

ANEDL	ST	LINK,ALINK	:SAVE LINK
	LHL	C6,CBUF-2	:NUMBER OF BYTES IN NEEDLE
	LR	R0,C6
	NHI	R0,7		:COMPUTE POSITION IN B'LET OF LAST HALF WORD
	SRLS	C6,3		:  OF NEEDLE & B'LET POSITION IN LIST
	AH	C6,TEMP		:THIS IS B'LET POSITION IN LIST
	STH	C6,W1		:SAVE FOR FUTURE FIX UP
	STH	R0,W1+2		:SAVE POSITION IN B'LET
	LIS	R0,1		:CONSTANT FOR ADDING TO TEMP
	LCS	C6,2		:INIT INDEX TO CBUF (INCLUDE PRECEEDING BYTE
	L	R14,CBUF-2	:  COUNT)
	OI	R14,1^1F	:MARK THIS AS A NEEDLE
	L	R15,CBUF+4,C6	:NEXT WORD OF DATA
	JFS	ANEDL2

ANEDL1	LM	R14,CBUF,C6	:TWO WORDS OF NEEDLE PER B'LET

ANEDL2	LHL	R13,TEMP	:SAVE IN THIS B'LET POSITION
	AHM	R0,TEMP		:INCR TEMP
	JAL	LINK,LWRITE	:ADD TO LOGIN LIST
	AIS	C6,8		:INCR INDEX TO NEEDLE
	CLH	C6,CBUF-2	:HAVE WE COPIED WHOLE NEEDLE
	JLBS	ANEDL1		:NO

	L	LINK,ALINK	:RESTORE LINK
	JR	LINK		:RETURN

	EI


:  BUILD A NEEDLE STARTING AT TYMNET II NODE # IN R15.  IF R12=0 THEN R15
:  IS ORIGIN OF CIRCUIT, ELSE R12 = TYMNET I NEIGHBOR NODE #, PERMUTER
:  TABLE POSITION.  THIS INFORMATION IS PLACED IN THE NEEDLE IMMEDIATELY
:  BEFORE THE NODE LIST.  NFLAGS IS SET BY CALLER TO NEEDLE FLAGS.
:  CHOST IS SET BY CALLER TO ULTIMATE DESTINATION HOST #, H1 IS DESTINATION NODE
:  CAN USE ALL REGISTERS EXCEPT R0, C3 & C6.
:  AT EXIT W4 IS LAST T-II NODE IN NEEDLE, RETURN IF CIRCUIT COMPLETED
:  SKIP RETURN IF INCOMPLETE.


NEEDLE	ST	LINK,NLINK	:SAVE LINK
	STH	R15,CBUF	:CREATE NEEDLE IN CBUF, LENGTH IN CBUF-2
	LHI	T1,980		:SET TYPE 9 (NEEDLE) & MARK LINK COUNT
	STH	T1,CBUF+2	:STORE IN NEEDLE
	L	T1,ACTSQN	:GET INVOICE # FOR ACCOUNTING
	ST	T1,CBUF+4	:STORE IN NEEDLE
	LHL	T1,NFLAGS	:NEEDLE FLAGS
	OHI	T1,8080		:ELIMINATE NEED FOR ESCAPING
	LIS	T2,0E		:THIS IS INDEX TO START OF NODE LIST
	L	C4,LOGID	:NODE #, BUFFER # FOR REQUESTOR
	SRHLS	C4,1		:NODE #, PORT #
	ST	C4,CBUF+0A	:PUT REQUESTING NODE, PORT IN NEEDLE
	LR	R12,R12		:IS CIRCUIT COMING FROM T-I
	JEFS	NDL0		:NO

	ST	R12,CBUF+0E	:STORE T-I NODE # & CHANNEL # IN NEEDLE
	AIS	T2,4		:NODE LIST NOW STARTS HERE
	OHI	T1,4		:SET FLAG TO SHOW START OF CIRCUIT IN T-I

NDL0	STH	T1,CBUF+8	:STORE FLAGS IN NEEDLE
	LIS	C4,0		:COUNT # OF LINKS IN CIRCUIT
	LHL	T1,H1		:DESTINATION NODE
	CLR	R15,T1		:IS START AND END OF NEEDLE SAME NODE
	JE	NDL2		:YES

	LR	R12,R12		:DID CIRCUIT COME FROM T-I?
	JEFS	NDL1		:NO

	LHI	R12,T2BN	:SETUP T-II COMPARISON
	J	NDL1C		:DECREMENT PASSTHROUGHS FOR T-II INTERFACE NODE

	:TRACE CIRCUIT, FILLING IN NEEDLE WITH NODES,
	:DECREMENT & CHECK T-II PASSTHROUGHS.

NDL1	LHI	R12,T2BN	:SETUP T-II COMPARISON

NDL1A	STH	R15,W4		:SAVE LAST T-II NODE USED
	NMAP(R15)
	LHL	R15,DIRBYT-2,R15,R15 :NEXT NODE IN CIRCUIT
	UMAP(R15)

	IF	1-NOTI
	CLR	R15,R12		:IS IT A T-II NODE
	JL	NDLA1		:NO - END NEEDLE HERE, WITH PROPER INDICATION

	EI
	STH	R15,CBUF,C4,T2	:STORE IN NODE # LIST IN NEEDLE
	AIS	C4,2		:INCR INDEX
	CLHI	C4,MXNEEDLE-10	:IS NEEDLE TOO BIG
	JLEFS	NDL1B		:NO

	J	NDLB1		:NEEDLE TOO BIG

NDL1B	CLR	R15,T1		:ARE WE AT DESTINATION BASE
	JE	NDL2		:YES

NDL1C	JAL	LINK,NODGET	:GET NODE DESC
	HC	0,0		:NOT THERE - FATAL

	LHL	R11,PASSN,R14	:# OF PASSTHRUS LEFT
	JGFS	NDL1D		:PASSTHROUGHS LEFT

	HC	0,0		:NO PASSTHROUGHS - FATAL

NDL1D	SIS	R11,1		:DECR # FREE
	STH	R11,PASSN,R14	:UPDATE NODE DESC
	JN	NDL1A		:IF NOT OUT OF PASTHRUS - LOOP

	:T-II NODE JUST WENT OUT OF PASSTHROUGHS.
	:SET NOPASS BIT IN EACH LINK STATUS BYTE & SET
	:NODE OUT OF PASSTHROUGHS.
	SBT	R11,,R14	:THIS SHOWS OUT OF PASSTHRUS
	SRLS	R13,1		:MAPPED NODE #
	SBT	R13,ANPBIT	:SHOW NO PASSTHROUGHS VIA THIS NODE
	SBT	R13,T2BIT	:DITTO
	IF	SNETS
	LB	R12,SNETNT,R13,	:GET SUBNET #
	AR	R12,R12		:DOUBLE FOR 1/2 OF WORD INDEX
	L	R12,SNETBA,R12,R12 :GET PASSTHROUGH BIT ARRAY ADDRESS
	SBT	R13,,R12	:SHOW NODE NOT USABLE FOR PASSTHROUGHS
	EI
	LIS	R12,NOPASS	:BIT POSITION FOR OUT OF PASSTHRUS FLAG IN LINK
	LHI	R11,LINPTR,R14	:SET UP TO SEARCH LINK DESC PTRS

NDL1E	LHL	R13,2,R11	:DISPL TO LINK DESC
	SBT	R12,,R13,R14	:SET OUT OF PASSTHRUS BIT
	AIS	R11,4		:INCR PTR
	LHL	R13,,R11	:NEIGHBOR #
	JNBS	NDL1E		:NOT DONE WITH SEARCH

	LHI	R12,T2BN	:RESTORE COMPARISON VALUE
	J	NDL1		:DONE WITH SEARCH - CONTINUE NEEDLE


	:AT DESTINATION

NDL2	LR	T1,C4		:# OF LINKS * 2
	SRLS	T1,1		:# OF LINKS IN CIRCUIT
	AHM	T1,CBUF+2	:STORE IN NEEDLE
	LHL	T1,CHOST	:DEST HOST #
	OHI	T1,8000		:SIGN BIT SHOWS DEST
	AHI	C4,2,T2		:INDEX PAST NODE LIST
	STH	T1,CBUF-2,C4	:STORE DEST HOST # IN NEEDLE
	LHL	T1,NFLAGS	:CHECK IF THIS IS COMMAND CIRCUIT
	THI	T1,3		:IS THIS A REBUILD CIRCUIT?
	JEFS	NDL2B		:NO

		:REBUILD CIRCUIT
	STH	C4,CBUF-2	:THIS IS LENGTH OF NEEDLE (NO USER NAME)
	L	LINK,NLINK	:RESTORE LINK
	JR	LINK		:RETURN SHOWING NEEDLE COMPLETE

		:NOT A REBUILD CIRCUIT, SEND TID, SOURCE NODE #,
		:REQUESTING PORT, FLAG, & USER NAME

NDL2B	JAL	LINK,LFLGRD	:READ LLFLAG
	CHVR	C2,R15		:SAVE PTR TO END OF USER NAME
	LR	C5,R14		:SAVE CR FLAG
	EXHR	T1,R14		:RIGHT JUSTIFY TID & HDUX FLAG
	NHI	T1,@(TIDM&DUPLXM)^-TIDP :ISOLATE SAME
	LR	T2,T1
	NHI	T2,@TIDM^-TIDP	:ISOLATE ONLY THE TID
	SIS	T2,$816		:IS THIS AUX CIRCUIT FROM A GATEWAY
	JNFS	NDL2C		:NO

	NHI	T1,@DUPLXM^-TIDP :MAKE TID ZERO - AUX CIRCUIT

NDL2C	EXBR	T1,T1		:LEFT JUSTIFY BYTE
	EXHR	T1,T1		:DITTO
	LHL	T2,REQHST	:!!WAS OH T1,REQHST
	JNFS	NDL2C1		:!!TEMP KLUDGE DUE TO NODE CODE BUG..

	LHI	T2,80		:!!NODE CODE NOT ESCAPING DATA IN NEEDLE

NDL2C1	OI	T1,0C0808000,T2	:MARK TID, NULL BYTE, SET 8000 BIT IN REQHST
	ST	T1,CBUF,C4	:STORE IN NEEDLE (NOTE - C4 IS EVEN)
	AIS	C4,4		:INDEX PAST  'C0!TID,80,8000+REQ HOST'
	TI	R14,@TGM	:IS TRANSPARENT GATEWAY BIT SET?
	JEFS	NDL2D		:NO

	LHI	T1,80!3F	:QUESTION PLUS MARK PARITY
	STB	T1,CBUF,C4	:STORE IN NEEDLE
	AIS	C4,1
	JFS	NDL3		:NO OPER STATUS WITH TRANSPARENT BIT

NDL2D	TI	R14,@SHUTM	:IS OPER STATUS SET
	JEFS	NDL3		:NO

	LHI	T1,80!21	:EXCLAIM PLUS MARK
	STB	T1,CBUF,C4	:STORE IN NEEDLE
	AIS	C4,1		:INCR PAST EXCLAIM

	:ADD USERNAME TO NEEDLE.  NOTE - THIS PIECE OF CODE IS ONLY
	:EXECUTED AFTER ACTCR IS CALLED, AND ACTCR SETS UP THE USERNAME
	:IN THE ARRAY UNAME WITH MARK PARITY

NDL3	SHI	C2,UNSS		:# CHARACTERS

NDL4	LIS	C1,0		:INDEX UNAME
	LHI	R14,7F		:MASK TO STRIP PARITY BIT

NDL5	LB	R15,UNAME,C1	:GET A CHARACTER
	NR	R15,R14		:STRIP SIGN BIT
	STB	R15,CBUF,C4	:PUT A CHARACTER
	AIS	C1,1		:BUMP UNAME INDEX
	AIS	C4,1		:BUMP CBUF INDEX
	SIS	C2,1		:DECREMENT COUNT
	JGBS	NDL5		:MORE TO DO

NDL6	LHI	R15,80!3B	:SEMICOLON
	TI	C5,@CRFLGM	:IS CR FLAG ON
	JEFS	NDL7		:NO - SEND SEMICOLON

	LHI	R15,80!0D	:CR

NDL7	STB	R15,CBUF,C4	:STORE IN NEEDLE
	THI	C4,1		:IS LAST HALFWORD FULL
	JNFS	NDL8		:YES

	AIS	C4,1
	LHI	R15,80		:ADD A NULL TO END OF STRING
	LHI	R15,CBUF,C4	:STORE IN NEEDLE

NDL8	AIS	C4,1		:SIZE OF NEEDLE
	STH	C4,CBUF-2	:STORE SIZE OF NEEDLE
	CLHI	C4,MXNEEDLE	:IS NEEDLE TOO LARGE
	JG	NDLB1		:YES

	L	LINK,NLINK	:RESTORE LINK
	JR	LINK		:NON-SKIP RETURN TO SHOW END OF CIRCUIT

	IF	1-NOTI

:	HERE IF END OF NEEDLE NOT END OF CIRCUIT
:	NEXT NODE IS T-1, WITH CHANNEL STILL UNDEFINED -


NDLA1	LHL	T1,CBUF+8	:FLAGS
	OHI	T1,NFT1TG	:SHOW END OF NEEDLE NOT END OF CIRCUIT
	STH	T1,CBUF+8	:STORE FLAGS IN NEEDLE
	OHI	R15,8000	:SET SIGN BIT TO SHOW END OF NODE LIST
	EXHR	R15,R15		:POSITION NODE &#, -1
	ST	R15,CBUF,C4,T2	:SHOW END OF NODE LIST, CHANNEL UNDEFINED
	EXHR	R15,R15		:!!IS R15 REALLY NEEDED?
	LR	T1,C4		:# OF LINKS * 2
	SRLS	T1,1		:# OF LINKS
	AHM	T1,CBUF+2	:STORE IN NEEDLE
	AHI	C4,4,T2		:SIZE OF NEEDLE
	CLHI	C4,MXNEEDLE	:IS NEEDLE TOO LONG
	JGFS	NDLB1		:YES

	STH	C4,CBUF-2	:SAVE NEEDLE SIZE
	L	LINK,NLINK	:RESTORE LINK
	J	4,LINK		:SKIP RETURN TO SHOW NOT END OF CIRCUIT

	EI


:  HERE IF NEEDLE BEING BUILT IS TOO LONG - ABANDON CIRCUIT BUILDING
:!!!THIS HAS FLAWS....

NDLB1	JAL	LINK,LFLGRD	:READ LLFLAG
	TI	R14,TIDM	:CHECK IF AUX CIRCUIT
	JNFS	NDLB2		:NO

	IF	1-NOTI
	LHL	R14,CHOST	:DEST HOST #
	CLHI	R14,$A197		:WAS THIS DIALOUT
	JE	DLL10		:YES - CLEAN UP AT THIS ADDR

	CLHI	R14,$A199	:WAS THIS DOWN LINE LOAD
	JE	DLL10		:YES - CLEAN UP AT THIS ADDR

	EI
	J	AUXC3		:USE AUX CIRCUIT CLEAN UP CODE

NDLB2	LIS	R14,LLPSWD	:CLEAN UP LOGIN LIST
	LIS	R15,0
	JAL	LINK,LSUBDEL
	LIS	R13,LLPSWD	:LLPSWD & LLUUN MUST EXIST
	LIS	R14,0
	LIS	R15,0
	JAL	LINK,LWRITE
	LIS	R13,LLUUN
	JAL	LINK,LWRITE
	J	CIRC8		:USE CLEAN UP CODE IN BILCIR


	SUBTTL	LGCGEN - REBUILD ROUTINES

:*******************************************************:
:						T-II 0D	:
:		PROCESS REBUILD REQUEST			:
:							:
:*******************************************************:
:REQUEST IS ESSENTIALLY COPIED TO A HOLD LIST (JLIST)	:
:AND PROCESSED AFTER A SLIGHT DELAY.  THERE IS A	:
:THRESHOLD FOR THE JLIST WHICH WHEN EXCEEDED WILL	:
:CAUSE A REJECTION.  INVALID NODES SPECIFYING THE LINK	:
:OR THE DESTINATION WILL ALSO CAUSE A REJECTION.	:
:*******************************************************:

REBILD	LHL	R15,CBUF+REBB	:BASE NODE TO BUILD CIRCUIT TO
	CLHI	R15,T2BN	:MUST BE T-II NODE
	JL	REBERR

	CLHI	R15,T2BN+MXT2ND	:CHECK UPPER RANGE FOR NODE #
	JGE	REBERR		:OUT OF RANGE

		:IF DESTINATION TAKEN, CHECK FOR VERSION 500+
		:!!TEMP - UNTILL ALL T-II RUNNING VERSION 500+
	LR	T1,R15		:SAVE NODE #
	AR	T1,T1
	L	T1,NODTBP-4*(BRGAP+RIIGAP),T1,T1 :PTR TO NODE DESCR.
	JLEFS	REBLDA		:NOT TAKEN

	LHL	T1,VERSION,T1	:GET VERSION #
	NHI	T1,0FFF		:ONLY THIS IS VERSION # PROPER
	CLHI	T1,$8500	:IS IT OK FOR REBUILD DESTINATION?
	JL	REBLDG		:NO

		:!!END TEMP

REBLDA	LH	R15,CBUF+REBN1	:LOAD NODE ABOVE FAILING LINK
	JGFS	REBLDC		:NOT DUMMY NODE PAIR

	L	R15,REBN1	:CHECK TO INSURE IS ACTUALLY -1
	AIS	R15,1
	JNFS	REBLDB		:NOT -1, CONTINUE WITH CONSISTENCY CHECKS

	ST	R15,CBUF+REBN1	:SET NODE PAIR TO 0 AS A FLAG
	J	REBLDD		:CONTINUE

REBLDB	LHL	R15,CBUF+REBN1	:USE UNSIGNED ARITH.

REBLDC	CLHI	R15,T2BN	:T-II NODE?
	JL	REBERR		:TOO LOW - ERROR

	CLHI	R15,T2BN+MXT2ND	:T-II NODE?
	JGE	REBERR		:TOO HIGH - ERROR

	LHL	R15,CBUF+REBN2	:LOAD NODE BELOW FAILING LINK
	CLHI	R15,T2BN	:T-II NODE?
	JL	REBERR		:TOO LOW - ERROR

	CLHI	R15,T2BN+MXT2ND	:T-II NODE?
	JGE	REBERR		:TOO HIGH - ERROR

REBLDD	JAL	LINK,JAPPEND,,	:ADD TO REBUILD LIST FOR TIMEOUT
	J	IND,,		:RETURN TO INPUT DISPATCHER

		:SKIP 6 RETURN --> LIST OVERFLOW
	LIS	T1,1		:LIST OVERFLOWED
	AHM	T1,RBOVFL,,	:INCR COUNT OF OVERFLOWS
	L	R15,CBUF+REBI	:GET INVOICE #
	ST	R15,ACTSQN	:THIS IS INVOICE # IN REQUEST
	LHL	C1,CBUF+REBB	:SAVE DEST BASE #
	JAL	LINK,REBFMS	:CREAT FAILURE MSG TO NODE
	LHL	R15,CBUF	:REQUESTING NODE
	JAL	LINK,NODGET	:IS NODE TAKEN?
	J	REBLDE		:NOT THERE, IGNORE SOURCE

	JAL	LINK,C2APPEND	:SEND TO REQUESTING NODE

REBLDE	LR	R15,C1		:GET DESTINATION NODE
	JAL	LINK,NODGET	:IS NODE TAKEN?
	J	REBLDF		:NOT THERE, IGNORE DESTINATION

	STH	R15,CBUF
	JAL	LINK,C2APPEND	:SEND TO DEST NODE

REBLDF	J	IND,,		:RETURN TO INPUT DISPATCHER

	:!!TEMP
	:REJECT REBUILD REQUEST AS TARGET NODE VERSION # TOO LOW

REBLDG	LIS	T1,1
	AHM	T1,NOREB,,	:BUMP COUNTS OF NO REBUILDS
	STH	R15,NOREB+2,,	:INDICATE LAST NODE #
	LHL	R15,CBUF	:SOURCE NODE #
	JAL	LINK,NODGET	:IS IT TAKEN?
	J	REBLDH		:NO, IGNORE REQUEST

	STH	R15,CBUF
	L	T1,CBUF+REBI	:RETRIEVE INVOICE #
	ST	T1,ACTSQN	:SETUP FOR REBFMS
	JAL	LINK,REBFMS	:CREATE REJECT MSG
	JAL	LINK,C2APPEND	:SEND IT

REBLDH	J	IND,,		:RETURN TO INPUT DISPATCHER

	:!!END TEMP
	



:*******************************************************:
:							:
:	PROCESS REBUILD REQUEST AFTER TIMEOUT DELAY	:
:							:
:*******************************************************:

REBLD0	L	R13,CBUF+REBF	:LOAD NEEDLE FLAGS AND TERMINAL PORT FOR LATER
	LHL	C1,CBUF		:NODE # MAKING REQUEST
	STH	C1,LOGID
	LHL	R13,CBUF+REBB	:BASE NODE TO BUILD CIRCUIT TO
	STH	R13,H2		:SAVE DEST NODE #
	NMAP(R13)
	LIS	T1,0		:DESTINATION MARKER FOR DIRECT
	STH	T1,DIRBYT-2,R13,R13 :PLACE IT
	EXHR	R13,R13
	ST	R13,DIRLIST	:INIT DIRECT TO ONE DEST
	ST	R13,DIRNOD	:SAVE MAPPED NODE # HERE AS WELL
	LHL	T1,CBUF+REBF	:FLAGS OF ORIGINAL NEEDLE
	OHI	T1,NFRBLD	:SHOW THIS IS A REBUILD
	STH	T1,NFLAGS	:SAVE FOR NEEDLE MAKER

	:!!FIELD DEPENDENT CODE
	EXBR	T2,T1		:RIGHT JUSTIFY IRC RESTRICTION
	NHI	T2,NFIRCF^-8	:EXTRACT FLAGS FOR IRC
	SRLS	T2,2		:RIGHT JUSTIFY
	STH	T2,UIRCRF	:SET IRC RESTRICTION FOR DIRECT
	LHL	T2,CBUF+REBH	:HOST # FROM ORIGINAL NEEDLE
	STH	T2,CHOST
	LHL	T2,CBUF+REBTP	:REQUESTING PORT #
	AR	T2,T2		:BUF #
	STH	T2,LOGID+2	:COMPLETE LOGID
	L	T2,CBUF+REBI	:INVOICE # FROM REBUILD REQUEST
	ST	T2,ACTSQN	:MAKE AVAILABLE FOR NEEDLE BUILDER
	LR	R15,C1		:REQUESTING NODE #
	JAL	LINK,NODGET	:FIND NODE DESC
	J	REBLD6		:CANNOT REBUILD WITHOUT SOURCE NODE DESC

	LHL	R15,CBUF+REBB	:DEST NODE #
	JAL	LINK,NODGET
	J	REBLD5		:CANNOT REBUILD WITHOUT NODE DESC

		:!!TEMP - CHECK VERSION 500+ OF T-II
	LHL	R0,VERSION,R14	:GET VERSION #
	NHI	R0,0FFF		:12 BITS ONLY
	CLHI	R0,$8500	:OK TARGET VERSION?
	JL	REBLD5		:NO

		:!!END TEMP
	JAL	LINK,RESHUT	:CLOSE LOST LINK IF NOT ALREADY CLOSED
	LIS	R0,1		:FLAG TO DIRECT TO CONSIDER T-II NODES ONLY

	:SELECT COST TABLE
	LHL	R13,NFLAGS	:RECOVER NEEDLE FLAGS
	THI	R13,NFCMDC	:WAS THIS A COMMAND CIRCUIT?
	JEFS	REBLD1		:NO

	LI	R13,SPCOST	:USER SUPERVISOR COST TABLE
	JFS	REBLD2	

				:!!FIELD DEPENDENT CODE

REBLD1	NHI	R13,NFCSTT!NFSPDB :EXTRACT BATCH/SPEED BITS
	SRLS	R13,2		:MAKE A WORD INDEX
	L	R13,COSTTA,R13,	:GET ADDRESS OF COST TABLE

REBLD2	JAL	LINK,DIRECT	:FIND A PATH
	J	REBLD4		:NO PATH

	JAL	LINK,REUSHT	:UNSHUT IF SHUT BY US
	LHL	T1,H2		:DEST NODE #
	STH	T1,H1
	LHL	R15,CBUF	:TELL NEEDLE BUILDER TO START AT THIS NODE
	LIS	R12,0		:SHOW NEEDLE STARTS IN T-II
	JAL	LINK,NEEDLE	:BUILD NEEDLE
	JFS	REBLD3		:NEEDLE COMPLETE FOR CIRCUIT

	HC	0		:COMPLETE SKIP RETURN

	HC	0,0		:INCONSISTENT - NEEDLE INCOMPLETE

REBLD3	JAL	LINK,C2APPEND	:SEND NEEDLE
	J	PTL1,,		:RETURN TO TIMEOUT PROCESSOR

	:***************************************:
	:					:
	:		REBUILD ERRORS		:
	:					:
	:***************************************:

	:NO PATH AVAILABLE FOR REBUILD

REBLD4	JAL	LINK,REUSHT	:UNSHUT IF SHUT BY US
	LIS	T1,1
	AHM	T1,RBFAIL,,	:INCR COUNT OF REBUILD FAILURES (NO PATH)
	LHL	R13,LOGID
	STH	R13,RBFAIL+2,,	:ANNOUNCE REQUESTOR NODE #
	LHL	T1,H2
	STH	T1,RBFAIL+4,,	:ANNOUNCE DESTINATION NODE #
	STH	R13,CBUF	:SEND MSG TO REQUESTOR ABOUT FAILURE
	JAL	LINK,REBFMS	:CREATE SUP MSG TO TELL NODE OF REBUILD FAILURE
	JAL	LINK,C2APPEND	:SEND MSG
	LHL	R13,H2		:DEST NODE #
	STH	R13,CBUF	:SEND SAME MSG TO DEST NODE
	JAL	LINK,C2APPEND
	J	PTL1,,		:RETURN TO TIMEOUT PROCESSOR


	:DESTINATION NODE FOR REBUILD CURRENTLY UNKNOWN

REBLD5	LIS	T1,1
	AHM	T1,NOREB,,	:INCR COUNT NO REBUILD (NO NODE DESC)
	STH	R15,NOREB+2,,	:ANNOUNCE NODE # FOR WHICH NO NODE DESC
	LHL	R13,LOGID	:NODE # OF REQUESTOR
	STH	R13,CBUF
	JAL	LINK,REBFMS	:CREATE SUP MSG TO TELL NODE OF REBUILD FAILURE
	JAL	LINK,C2APPEND
	J	PTL1,,		:RETURN TO TIMEOUT PROCESSOR


	:SUBROUTINE TO TELL NODE REQUESTING A REBUILD

	:SOURCE NODE NOT TAKEN.  IF DESTINATION NODE TAKEN
	:SEND A FAILURE MESSAGE.

REBLD6	LIS	T1,1
	AHM	T1,NOREB,,	:COUNT FAILURES DUE TO NO DESCRIPTORS
	STH	R15,NOREB+2,,	:REMEMBER LOST NODE
	LHL	R15,CBUF+REBB	:DESTINATION
	JAL	LINK,NODGET	:IS NODE THERE?
	J	REBLD7		:NO, NOTHING TO DO

	JAL	LINK,REBFMS	:CREATE BASIC MESSAGE
	STH	R15,CBUF	:DESTINATION NODE
	JAL	LINK,C2APPEND	:SEND FAILURE MESSAGE

REBLD7	J	PTL1,,		:RETURN TO PTL

	:BAD REBUILD REQUEST - NODE # NOT VALID FOR REBUILD

REBERR	LHI	R13,EM0080	:ERROR # - BAD REBUILD REQUEST
	LHL	T1,CBUF		:REQUESTING NODE #
	LHL	R14,CBUF+REBB	:DEST NODE #
	EXHR	T1,T1
	OR	R14,T1
	L	R15,CBUF+REBN1	:PUT BAD LINK NODES IN R15
	JAL	LINK,ERRFIL,,
	J	IND,,		:RETURN TO INPUT DISPATCHER



	:***************************************:
	:					:
	:	REBUILD UTILITIES		:
	:					:
	:***************************************:

	:SUBROUTINE TO TELL NODE REQUESTING A REBUILD
	:OF REBUILD FAILURE

REBFMS	LHI	T1,0F8B		:TYP F SUBTYP B
	STH	T1,CBUF+2
	L	T2,ACTSQN
	ST	T2,CBUF+4	:TELL HIM THE INVOICE #
	LIS	T1,8		:THIS IS LENGTH OF MSG
	STH	T1,CBUF-2
	JR	LINK


:SHUT LINK BETWEEN NODES FOR REBILD PROCESS

RESHUT	STM	R0,DIRSAV	:SAVE ALL THE REGISTERS
	L	R15,CBUF+REBN1	:GET NODE NUMBERS OF LINK TO SHUT
	JE	RESHU1		:NO LINK PROVIDED, SKIP SHUT LOGIC

	TS	TMPC		:INIT ALREADY SHUT FLAG TO -1
	LIS	R0,1		:REQUEST SHUT
	STH	R0,TMPA		:NO DIAGNOSTICS TO LOG PLEASE
	JAL	LINK,TSHUT,,	:PERFORM TSHUT ROUTINE
	L	R15,CBUF+REBN1	:RESTORE CONTENTS OF REG15
	LH	T1,TMPC		:GET ALREADY SHUT FLAG
	JLFS	RESHU1		:IF NOT ALREADY SHUT SKIP NEXT

	LIS	R15,0		:ELSE CLEAR NODES SHUT

RESHU1	ST	R15,JSHUT	:STORE NODES OR ZERO IF LINK SHUT
	LM	R0,DIRSAV	:RESTORE REGISTERS
	JR	LINK		:RETURN TO CALLER

:ROUTINE TO UNSHUT LINK IF WE SHUT IT

REUSHT	L	R15,JSHUT	:LOAD NODES ON LINK
	JER	LINK		:WE DIDN'T SHUT THEM SO RETURN

	ST	LINK,DIRSAV+(LINK^2) :SAVE LINK REG IN SAVE AREA
	LIS	R0,0		:REQUEST UNSHUT
	STH	R0,TMPA		:NO DIAGNOSTICS PLEASE
	JAL	LINK,TSHUT,,	:PERFORM TSHUT ROUTINE
	LM	R0,DIRSAV	:RESTORE REGISTERS 
	JR	LINK		:RETURN TO CALLER





	SUBTTL	LGCGEN - MAPPING SUBROUTINES
:  UTILITY ROUTINES TO MAP & UMAP NODE #'S

MAP	LR	R13,R15		:MAP NODE # IN R15, RETURN TWICE MAPPED IN R13
	NMAP(R13)

MAP2	AR	R13,R13		:DOUBLE MAPPED NODE #
	JR	LINK		:RETURN



:  UNMAP IS NOT CONVERSE OF MAP!

UNMAP	LR	R15,R13		:MAPPED NODE # IN R13, RETURN IN R15
	IF	1-NOTI
	IF	1-FULLTI	:SIMPLIFY IF FULL T-I RANGE
	CLHI	R15,MXBASE	:IS NODE A BASE
	JLER	LINK		:YES - RETURN

	CLHI	R15,MXREM-BRGAP :IS IT A REMOTE
	JLEFS	UNMAP1		:YES

	AHI	R15,RIIGAP

UNMAP1	AHI	R15,BRGAP
	EI
	EI
	JR	LINK		:RETURN



	SUBTTL	LGCGEN - ACCOUNTING ROUTINES


:*******************************************************:
:							:
:   SUBROUTINE TO GENERATE INITIAL ACCOUNTING INFO	:
:							:
:*******************************************************:
:GETS NEW SEQUENCE #, SENDS DATA TO T-I NODES, AND	:
:CREATES PREAMBLE.					:
:							:
:EXPECTS DEST NODE IN H1, DEST BUFFER # IN H7, DEST	:
:HOST# IN CHOST.   ALL REGISTERS CREAMED.		:
:*******************************************************:

ACTCR	LR	C6,LINK		:SAVE LINK
	L	C5,STIME,,	:CHECK IF TIME DEFINED
	JNFS	ACTCR0		:DEFINED

	LCS	C5,1		:SHOW TIME UNDEFINED
	JFS	ACTC0A

ACTCR0	A	C5,SLOWC,,	:ADD TIME FROM NODE IN SECONDS
	A	C5,TIME		:TIME IN SECONDS SINCE START OF 1974

ACTC0A	JAL	LINK,GETSEQ	:PLACE INVOICE # IN R15 & ACTSQN
	LHL	R13,H1		:DEST NODE #
	EXHR	R14,R15		:SET UP R14 FOR CAPPEND OF SESSION #
	IF	1-NOTI
	CLHI	R13,T2BN	:IS IT T-II NODE
	JGEFS	ACTC0B		:YES - DON'T SEND INVOICE # NOW

	:SEND SESSION # TO T-I DESTINATION
	OHI	R13,7000	:TYP 7
	LCS	T2,2
	NH	T2,H7		:DEST BUF # (EVEN)
	SLLS	T2,7		:POSITION PORT #
	OR	R14,T2		:MERGE PORT #, SUPERN & SESSION #
	JAL	LINK,CAPPEND
	L	R15,ACTSQN	:RESTORE INVOICE #


ACTC0B	LHL	R13,LOGID	:CHECK ORIGIN FOR SOURCE ACCOUNTING
	CLHI	R13,MXBASE	:IS THIS A CIRCUIT FROM A BASE
	JG	ACTC0C		:NO

	TBT	R13,SRCACT,,	:IS SOURCE ACCOUNTING REQUESTED
	JEFS	ACTC0C		:NO

	:SOURCE ACCOUNTING REQUESTED (ISIS ONLY)
	:SEND SESSION # TO SOURCE NODE
	OHI	R13,7000	:SEND TYP 7 TO SOURCE
	LCS	T2,2
	NH	T2,LOGID+2	:ORIG BUF # (EVEN)
	SLLS	T2,7		:POSITION PORT # FOR TYP 7 MSG
	NHI	R14,0FF		:CLEAR DEST PORT #
	OR	R14,T2		:MERGE IN ORG PORT #
	JAL	LINK,CAPPEND	:SEND MSG
	L	R15,ACTSQN	:RESTORE INVOICE #
	EI

	:ADD TYPE 1 RECOD TO ACCOUNTING FILE -
	:IRC CODE & SESSION #

ACTC0C	OI	R15,1^1C	 :SESSION #, SUPERN, TYP 1
	LHL	T1,UIRC		:# OF IRC USED IN CIRCUIT IF ANY
	NHI	T1,0F		:!!ONLY 4 BITS VALID (MAY WANT DIAGNOSTIC IF INVALID UIRC!!)
	EXBR	T1,T1
	EXHR	T1,T1		:POSITION FOR TYPE 1 MESSAGE
	OR	R15,T1		:PLACE IN MSG
	JAL	LINK,ACOUNT	:ADD TO ACCOUNTING FILE

	:GENERATE TYPE 2 ACCOUNTING ENTRY (LOGIN PREAMBLE-
	:  ORIGINATING NODE, TERMINAL TYPE, ORIGINATION PORT #)
	JAL	LINK,LFLGRD	:GET LLFLAG
	LR	C1,R14
	NI	C1,@SPEEDM	:ISOLATE SPEED INDICATOR
	SLLS	C1,SPEEDP-6	:POSITION FOR TYP 5  FOR ACCOUNTING
	O	C1,UUN		:MERGE WITH UUN
	ST	C1,UUN		:SAVE FOR LATER
	CHVR	C2,R15		:ISOLATE PTR TO END OF USER NAME FOR LATER
	NI	R14,@TIDM	:ISOLATE TID
	SRLS	R14,TIDP-8	:POSITION TID
	LHL	R15,LOGID+2	:SOURCE BUF #
	SRLS	R15,1		:SOURCE PORT #
	LBR	R15,R15		:!!DROP HIGH ORDER PORT BITS
	OR	R15,R14
	LHL	R14,LOGID	:SOURCE NODE #
	OHI	R14,2000	:TYP 2
	EXHR	R14,R14
	OR	R15,R14
	JAL	LINK,ACOUNT	:ADD TO ACCOUNTING BUFFER

	:GENERATE TYPE 3 ACCOUNTING ENTRY (TARGET PORT & HOST)
	:NOTE - THIS IS A CHANGE IN FORMAT...OLD CODE HAD
	:A BUG IF HOST NUMBER GREATER THAN 12 BITS.  NEW CODE
	:PUTS THE HIGH ORDER HOST BITS IN BITS 16-24.  THIS IS
	:BACKWARDS COMPATIBLE IN NETWORKS WITH HOST NUMBERS OF
	:12 BITS OR LESS.
	LHL	C1,CHOST	:DEST HOST #
	LHI	R15,0FFF	:12 BIT MASK
	NR	R15,C1		:GET LOW 12 BITS OF HOST NUMBER
	XR	C1,R15		:DITTO FOR HIGH 4 BITS
	OHI	R15,3000	:INCLUDE TYPE 3 WITH 12 BITS OF HOST
	EXHR	R15,R15		:POSITION TYPE AND HOST BITS
	SRLS	C1,4		:POSITION HIGH HOST BITS
	OR	R15,C1		:MERGE HIGH HOST BITS
	LHL	C1,H7		:DESTINATION BUFFER #
	SRLS	C1,1		:CONVERT TO PORT # (1 BYTE EXCEPT FOR DLL)
	STBR	C1,R15		:PUT DESTINATION PORT IN RECORD
	JAL	LINK,ACOUNT	:ADD TO ACCOUNTING BUFFER

	:RETRIEVE USERNAME FROM LOGIN LIST AND
	:GENERATE TYPE 4 ACCOUNTING ENTRY (USER NAME)
	LIS	K2,0		:INDEX UNAME
	LI	C4,80808080	:MARK PARITY
	SHI	C2,UNSS		:# CHARACTERS IN USER NAME
	JE	ACTCR5		:!!NONE - MUST BE SPECIAL

ACTCR1	LR	C3,C2		:REMEMBER CHAR. COUNT
	LIS	C1,LLUNAM	:B'LET # STARTING USER NAME

ACTCR2	LR	R13,C1		:B'LET TO READ
	JAL	LINK,LREAD	:GET SOME CHARACTERS
	OR	R14,C4		:SET MARK PARITY
	OR	R15,C4		:DITTO
	STM	R14,UNAME,K2	:SAVE CHARACTERS
	AIS	C1,1		:NEXT B'LET
	AIS	K2,8		:INCREMENT INDEX
	SIS	C3,8		:DECREMENT COUNT
	JGBS	ACTCR2		:MORE, CONTINUE

	LIS	C1,0		:ZERO FILL & INDEX UNAME
	AR	K2,C3		:START HERE
	STB	C1,UNAME,K2	:FILL 1
	STB	C1,UNAME+1,K2	:FILL 2

	:COPY OF UNAME DONE -
	:NOW WRITE ACCOUNTING DATA
	LI	C3,00FFFFFF	:MASK
	LI	C4,40000000	:TYPE 4 ACCOUNTING RECORD

ACTCR3	L	R15,UNAME,C1	:GET SOME CHARACTERS
	SRLS	R15,8		:RIGHT JUSTIFY 3 BYTES
	OR	R15,C4		:INCLUDE TYPE
	JAL	LINK,ACOUNT	:ADD TO ACCOUNTING FILE
	SIS	C2,3		:DECREMENT # CHARACTERS BY 3
	JLEFS	ACTCR5		:DONE

	L	R15,UNAME+2,C1	:GET SOME CHARACTERS
	NR	R15,C3		:DELETE FIRST CHARACTER
	OR	R15,C4		:ACCOUNTING TYPE
	JAL	LINK,ACOUNT	:ADD TO ACCOUNTING FILE
	AIS	C1,6		:INCREMENT UNAME INDEX
	SIS	C2,3		:DECREMENT # CHARACTERS LEFT
	JG	ACTCR3		:CONTINUE IF MORE


	:PUT UUN IN ACCOUNTING

ACTCR5	L	R15,UUN		:GET UNIVERSAL USER #
	OI	R15,50000000	:TYP 5
	JAL	LINK,ACOUNT	:ADD TO ACCOUNTING BUFFER

	:ADD TYPE 4, SUBTYPE 1 (DESTINATION NODE) AND
	:TYPE 4 SUBTYPE 2 (ORIGINATION HOST)- IF ONE
	LHL	R15,H1		:DESTINATION NODE
	OI	R15,41000000	:SUBTYPE ONE, TYPE 4
	JAL	LINK,ACOUNT
	LIS	R13,LLCIR	:GET ORIGINATION HOST IF ONE
	JAL	LINK,LREAD
	CHVR	R15,R14		:ISOLATE SAME
	JER	C6		:NO HOST KNOWN

	OI	R15,42000000	:TYPE 4, SUBTYPE 2
	JAL	LINK,ACOUNT	:ADD TO ACCOUNTIN FILE
	JR	C6		:RETURN


:*******************************************************:
:							:
:	SUBROUTINE TO GET NEXT ACCOUNTING SEQUENC #	:
:							:
:*******************************************************:
:INCR INVOICE # AND PLACE IN R15 & ACTSQN.		:
:*******************************************************:

GETSEQ	L	R15,ACTSEQ	:ACCOUNTING SEQUENCE #
	AIS	R15,1
	NI	R15,0FFFFF
	ST	R15,ACTSEQ
	OI	R15,SUPERN^14	:WITH SUP # THIS IS INVOICE #
	ST	R15,ACTSQN	:SAVE FOR USE BY NEEDLE BUILDER
	JR	LINK


:*******************************************************:
:							:
:	TIME HAS GONE BACKWARDS - MARK CHECK POINT	:
:		USES T1 - C5 CONTAINS NEW TIME		:
:*******************************************************:

	IF	MSC

CHKOUT	ST	C5,CHKTI2	:UPDATE CHECK POINT BLOCK
	L	T1,ACTSEQ	:GET CURRENT SEQUENCE #
	ST	T1,CHKSE2	:UPDATE CHECK POINT BLOCK
	L	T1,ACTDSK+SHRPOS :GET CURRENT SECTOR ADDRESS
	ST	T1,CHKNEW	:UPDATE CHECK POINT BLOCK

:*******************************************************:
:	FALL INTO WRITE ROUTINE				:
:*******************************************************:

CHKWRT	LHI	T1,ACTLU	:GET LOCAL UNIT FOR ACCOUNTING
	TBT	T1,DSKBIT,,	:TEST FOR GOOD FILE
	JER	LINK		:IF ACCOUNTING MOT GOOD, BYPASS CHECK POINT

	LIS	T1,1		:PREPARE FOR WRITE OPERATION
	STB	T1,CHKDSK+SHRRS	:WITH SLEEP
	SVC	SHARE,CHKDSK	:WRITE CHECK POINT BLOCK
	LB	T1,CHKDSK+SHRRS	:GET COMPLETION STATUS
	JER	LINK		:RETURN IF SUCCESSFUL

	IF	DEFLG
	DECHK(CHKDSK)
	EI
	JR	LINK		:RETURN TO CALLER

:*******************************************************:
:SUBROUTINE TO WRITE ACCOUNTING BUFFER TO OFFSET <T2>	:
:*******************************************************:

	:ACCOUNTING UTILITY ROUTINE TO WRITE ACCOUNTING BUFFER
	:TO DISK AT LOCATION SPECIFIED BY <T2>, AND TO CHECK FOR ERRORS
	:!!!K1 IS LINK REGISTER
ACTWRT	ST	T2,ACTDSK+SHRPOS :DISK ADDRESS TO WRITE
	SVC	SHARE,ACTDSK	:WRITE BUFFER TO DISK
	LB	T1,ACTDSK+SHRRS	:LOAD STATUS BYTE
	JE	ACT999		:DISK WRITE OK - RETURN TO CALLER

	DECHK(ACTDSK)		:COMMON ERROR ROUTINE
	IF	ERRTIM
	TIMERR(T1)
	ELSE

	:!!PROBE INTERFACE - CHANGE WHEN PROBE CHANGES

	SLLS	T1,8		:CONVERT BYTE TO HALF WORD
	STH	T1,ERRERR,,	:REPORT DISK TROUBLE
	LR	T1,T2		:T2 MAY NOT BE CHANGED
	SRLS	T1,2		:DIVIDE BY FOUR
	AHI	T1,ACTLU^0D	:ADD START - OLD FORMAT
	STH	T1,ERRERR+2,,	:SAVE DISK ADDRESS

	:END OF PROBE CHANGES

	EI

ACT999	LIS	T1,1
	STB	T1,ACTDSK	:STORE REQUEST BYTE
	JR	K1		:RETURN TO CALLER

	EI

:*******************************************************:
:							:
:	ADD A WORD (R15) TO ACCOUNTING BUFFER		:
:		 AND WRITE BUFFER IF FUL		:
:							:
:*******************************************************:
:C5 CONTAINS CURRENT TIME IN SECONDS SINCE 1974.	:
:*******************************************************:

ACOUNT	LHL	K1,ACTNXT	:PTR TO NEXT ENTRY IN BUFFER
	THI	K1,1F		:IS THE MIDDLE OF AN EIGHT WORD BLOCK
	JN	ACOUN1		:YES

	CLHI	C5,-1		:IS TIME UNDEFINED
	JE	ACOUN		:YES

	L	T2,OTIME	:GET LAST TIME ENTERED
	CLR	C5,T2		:COMPARE CURRENT TIME TO LAST TIME ENTERED
	JGEFS	ACOUN0		:CURRENT TIME IS NEWER

	SR	T2,C5		:GET BACKWARDS SECONDS
	CLHI	T2,$A600	:10 MINUTES OR MORE?
	IF	MSC
	JLFS	ACOUN5		:NO - USE LAST TIME

	LR	K2,LINK		:SAVE LINK
	JAL	LINK,CHKOUT	:UPDATE TIME REVERSE AND WRITE CHECK POINT
	LR	LINK,K2		:RESTORE LINK
	JFS	ACOUN0		:USE NEW TIME

ACOUN5	AR	C5,T2		:USE LAST TIME ENTERED
	ELSE
	JGEFS	ACOUN0		:YES, ACCEPT IT

	AR	C5,T2		:USE LAST TIME ENTERED
	EI

ACOUN0	ST	C5,OTIME	:UPDATE LAST TIME USED

ACOUN	ST	C5,ACTBUF,K1	:STORE TIME IN FIRST WORD OF BLOCK
	IF	MSC
	ST	C5,CHKTIM	:UPDATE TIME IN CHECK POINT BLOCK
	EI
	AIS	K1,4		:PT TO NEXT WORD IN BUFFER
	J	ACOUN4

ACOUN1	LR	T2,C5		:COPY TIME IN SECONDS
	LR	K2,K1		:COPY BUF PTR
	NHI	K2,@1F		:BACK UP TO START OF BLOCK
	S	T2,ACTBUF,K2	:CHECK ELPSED TIME SINCE START OF BLOCK
	CLHI	T2,$A30		:IS IT MORE THAN 30 SECONDS
	JLE	ACOUN4		:NO

	LIS	K2,0		:PAD OUT CURRENT BLOCK WITH NULLS

ACOUN2	ST	K2,ACTBUF,K1
	AIS	K1,4
	THI	K1,1F		:ARE WE AT START OF NEXT BLOCK
	JNBS	ACOUN2		:NO

	NHI	K1,ACTLEN-1	:!!CHECK FOR FULL BUFFER
	JNFS	ACOUN3		:NOT FULL

	STH	K1,ACTNOD	:CLEAR LAST ACOUNT NODE
	LR	K2,LINK		:SAVE LINK
	JAL	LINK,ACNTDW	:WRITE BUFFER
	LR	LINK,K2		:RESTORE LINK

ACOUN3	ST	C5,ACTBUF,K1	:STORE TIME IN TO START OF NEXT BLOCK
	AIS	K1,4		:PT TO NEXT WORD OF BLOCK

ACOUN4	ST	R15,ACTBUF,K1	:STORE NEXT ENTRY IN BLOCK
	IF	MSC
	L	T1,ACTSEQ	:GET CURRENT SEQUENCE #
	ST	T1,CHKSEQ	:UPDATE SEQUENCE IN CHECK POINT BLOCK
	EI
	AIS	K1,4		:INCR BUF PTR
	NHI	K1,ACTLEN-1	:!!!CHECK FOR FULL BUFFER
	STH	K1,ACTNXT
	JNR	LINK		:BUF NOT FULL - RETURN

	STH	K1,ACTNOD	:CLEAR LAST ACOUNT NODE


	IF	ACCTNG
	:UTILITY/SUBROUTINE TO WRITE ACCOUNTING TO DISK
	:AND TO CHECK FOR LOW DISK SPACE.  ENTERED BY
	:DROPTHRU OR CALL.

	IF	MSC

ACNTDW	LHI	T1,ACTLU	:LOCAL UNIT FOR ACCOUNTING
	TBT	T1,DSKBIT,,	:IS LOCAL UNIT GOOD?
	JNFS	ACNT1		:YES - CONTINUE

	LIS	T1,1		:ADD ONE
	AHM	T1,ACLOST,,	:TO LOST ACCOUNTING BUFFERS
	JR	LINK		:NO, DONT WRITE

ACNT1	L	T2,ACTDSK+SHRPOS :DISK ADDRESS TO WRITE
	JAL	K1,ACTWRT	:COMMON WRITE ROUTINE

ACOUN6	LIS	K1,0		:RESTOR K1 TO ZERO
	ST	T2,CHKLST	:UPDATE LAST WRITE IN CHECK POINT BLOCK
	AIS	T2,ACTSEC	:NEXT DISK ADDRESS
	CLI	T2,ACTEND	:CHECK FOR WRAP AROUND
	JLFS	ACOUN7		:JUMP ON NO WRAP

	LIS	T2,ACTSTA	:FIRST ADDRESS

ACOUN7	ST	T2,ACTDSK+SHRPOS :STORE ADDRESS IN PARM BLOCK

	:TELL SLAVES CURRENT NEXT ACCOUNTING BLOCK
	:FORMAT IS 55000000+SECTOR OFFSET, THE 55 FOR VALIDITY FLAG
	XI	T2,55000000	:INCLUDE VALIDITY FLAG
	ST	T2,ACCDSK,,	:TELL SLAVES FILE POSITION

	:EVERY 10X WRITES CHECK WHERE SLAVE IS IN ORDER
	:TO WARN OF LOW REMAINING ACCOUNTING DISK SPACE
	:LAST BLOCK OF ENTIRE FILE IS A CHECKPOINT BLOCK.
	:!!!ASSUMES SIZE OF A BLOCK A POWER OF 2!!!
	THI	T2,0F*ACTSEC	:CHECK SPACE LEFT EVERY 10 TIMES
	JNR	LINK		:JUMP IF NOT 10TH

	LI	T1,ACTLU^10	:SET UP PARM BLOCK TO READ
	ST	T1,ACTSAV	:LAST DISK ADDR SHIPPED BY ACT SLAVE
	LHI	T1,ACTLEN	:LOAD NUMBER OF BYTES TO READ
	ST	T1,ACTSAV+SHRCNT :SAVE IN PARM BLOCK
	LI	T2,ACTEND	:GET DISK ADDR OF LAST BLOCK
	ST	T2,ACTSAV+SHRPOS :SAVE IN PARM BLOCK
	LA	T1,ACTBUF	:LOAD ADDRESS OF BUFFER
	ST	T1,ACTSAV+SHRVMA :SAVE IN PARM BLOCK
	SVC	SHARE,ACTSAV	:REQUEST READ W/SLEEP
	LB	T1,ACTSAV+SHRRS	:LOAD STATUS BYTE
	JE	ACOUN8		:JUMP IF SUCCESSFUL

	DECHK(ACTSAV)		:COMMON ERROR ROUTINE
	IF	ERRTIM
	TIMERR(T1)
	ELSE
	:*
	:PROBE INTERFACE - CHANGE WHEN PROBE CHANGES

	SLLS	T1,8		:CONVERT BYTE TO HALF WORD
	STH	T1,ERRERR,,	:SAVE ERROR RETURNED
	SRLS	T2,2		:DIVIDE BY FOUR
	AHI	T2,ACTLU^0D		:ADD START - OLD FORMAT
	STH	T2,ERRERR+2,,	:SAVE BLOCK ADDRESS

	:END OF CHANGES

	EI
	J	CHKWRT		:WRITE CHECK POINT - RETURN ON LINK


	ELSE

ACNTDW	LHI	T1,ACTLU	:LOCAL UNIT FOR ACCOUNTING
	TBT	T1,DSKBIT,,	:IS LOCAL UNIT GOOD?
	JER	LINK		:NO, DONT WRITE

	SVC	DSKSVC,ACTDSK	:WRITE BUFFER TO DISK
	LHL	T2,ACTDSK+6	:DISK ADDR JUST WRITTEN
	LH	T1,ACTDSK	:DISK ACCESS STATUS
	JE	ACOUN6		:DISK WRITE OK

	DECHK(ACTDSK,DEBLK)	:COMMON ERROR ROUTINE
	IF	ERRTIM
	TIMERR(T1)
	ELSE
	STH	T1,ERRERR,,	:REPORT DISK TROUBLE
	STH	T2,ERRERR+2,,
	EI

ACOUN6	LIS	T1,1
	STH	T1,ACTDSK	:SET UP FOR NEXT DISK WRITE
	AIS	T2,ACTSEC/4	:INCR TO NEXT DISK ADDR
	CLI	T2,(ACTLU^0D)+(ACTEND/4) :CHECK FOR WRAP AROUND
	JLFS	ACOUN7		:JUMP ON NO WRAP

	LHI	T2,(ACTLU^0D)+(ACTSTA/4) :FIRST ADDR OF ACCOUNTING FILE

ACOUN7	STH	T2,ACTDSK+6	:SAVE DISK ADDR IN PARAM BLOCK


	:SAVE POSITION POINTER FOR SLAVES
	XI	T2,2000+(55000000/4) :DROP LU AND ADD SHIFTED FLAG BYTE
	SLLS	T2,2		:CONVERT TO SECTORS & POSITION FLAG
	ST	T2,ACCDSK,,	:TELL SLAVES ABOUT FILE POSITION


	:SEE IF SHOULD CHECK REMAINING ACCOUNTING FILE SPACE
	:!!!CHECK ASSUMES BLOCK SIZE IS A POWER OF 2 SECTORS!!!
	THI	T2,0F*ACTSEC	:PERIODICALLY CHECK SPACE LEFT IN ACCOUNT FILE
	JNR	LINK

	LIS	T1,1		:SET UP DISK PARAM BLOCK TO READ LAST DISK
	ST	T1,ACTSAV	:  ADDR SHIPPED BY ACCOUNTING SLAVE
	LHI	T2,(ACTLU^0D)+(ACTEND/4) :DISK ADDR SAVED ON BLOCK PAST END OF FILE
	ST	T2,ACTSAV+4
	LA	T1,ACTBUF
	ST	T1,ACTSAV+8
	SVC	DSKSVC,ACTSAV	:READ DISK
	LHL	T1,ACTSAV	:WAS DISK READ OK
	JE	ACOUN8		:YES

	DECHK(ACTSAV,DEBLK)	:COMMON ERROR ROUTINE
	IF	ERRTIM
	TIMERR(T1)
	ELSE
	STH	T1,ERRERR,,	:REPORT DISK READ FAILURE
	STH	T2,ERRERR+2,,
	EI
	JR	LINK

	EI

	:CHECK # BLOCKS LEFT, TO SEE IF SHOULD REPORT TO LOG.
	:THIS TEST OCCURS WHENEVER THE NEXT BLOCK NUMBER IS
	:DIVISABLE BY 10.  SIMILARLY, THE ACCOUNT SLAVE UPDATES
	:THE LAST BLOCK READ EVERY 10 BLOCKS (ALL NUMBERS HEX!).
	:THE SHIFT COUNT IS INITIALIZED TO 1 AT WAKEUP TIME,
	:AND WHENEVER THE SUPERVISOR DETECTS COLLECTION HAS OCCURED
	:(EG. [OLDACT].NE.LAST DISK BLOCK READ BY SLAVE).
	:LET 'T' BE THE TOTAL # OF BLOCKS IN THE ACCOUNTING AREA.
	:THRESHOLDS FOR REPORTING LOW ACCOUNTING BLOCKS
	:ARE CALCULATED AS T^-[SHIFT] + T/10.  WHENEVER THE REMAINING
	:BLOCKS DECREASES BELOW THIS THRESHOLD, A REPORT IS MADE
	:TO THE ERROR LOG.  THEN THE SHIFT COUNT
	:IS INCREMENTED BY 1 (UP TO A MAX OF 5).  THE THRESHOLD
	:IS DESIGNED TO PRODUCE INCREASINGLY RAPID LOG REPORTS.
	:THE LIMIT SET ON 'SHIFT' AND THE LOWER BOUND T/10 IMPLIES
	:A LOWER LIMIT, T/20 + T/10, BELOW WHICH A LOG MESSAGE
	:WILL BE GENERATED EVERY 10 BLOCKS WRITTEN.

	:LAST COLLLECTED BLOCK SAVED IN FIRST WORD OF
	:LAST ACCOUNTING BLOCK BY SLAVE, WITH FORMAT OF
	:53000000+SECTOR OFFSET TO LAST COLLECTED BLOCK

ACOUN8	L	T1,ACTBUF	:GET 53000000 XOR OFFSET
	JLEFS	ACOUNC		:DATA NOT VALID
	XI	T1,53000000	:DROP CHECK BYTE
	CLI	T1,ACTEND	:INSURE IN RANGE
	JLFS	ACOUNG		:IN RANGE, CHECK AVAILABLE SPACE

		:SLAVE DATA NOT VALID.
		:!!CONSIDER SOME ACTION

ACOUNC	HS	0

	IF	MSC
	J	CHKWRT		:WRITE CHECK POINT - RETURN ON LINK

	ELSE
	JR	LINK		:!!!NOTHING TO GO ON TO REPORT LOW

	EI

		:CHECK IF REMAINING SPACE IS LOW
ACOUNG	CL	T1,OLDACT	:IS THIS THE SAME ADDR AS LAST TIME
	JEFS	ACOUN9		:YES

	ST	T1,OLDACT	:REMEMBER NEW VALUE
	LIS	T2,1		:START SIZE TESTING AT HALF!
	STH	T2,SHIFT

	IF	MSC

ACOUN9	S	T1,ACTDSK+SHRPOS :SECTORS LEFT

	ELSE

ACOUN9	SRLS	T1,2		:CONVERT TO BLOCK NUMBER
	SH	T1,ACTDSK+6	:COMPUTE # OF BLOCKS LEFT IN FILE
	SLLS	T1,2		:CONVERT TO SECTORS
	EI
	JGEFS	ACOUNA

	AI	T1,ACTEND	:USING MODULO ARITHMETIC

ACOUNA	LHL	T2,SHIFT	:GET SHIFT COUNT
	STM	LINK,ACTSAV	:SAVE REGS
	LI	R12,ACTSIZ	:# OF SECTORS IN ACCOUNTING FILE
	SRL	R12,,T2		:GET SHIFTED SECTOR COUNT
	AHI	R12,ACTSIZ/10	:ADD IN FLOOR
	CLR	T1,R12		:ARE THERE ENOUGH BLOCKS LEFT
	JG	ACOUNB		:YES

	LR	R15,T2		:SAVE SHIFT COUNT FOR ERROR LOG
	SIS	T2,5		:HAS SHIFT COUNT HIT MAX?
	JGEFS	ACOUNH		:YES

	AIS	T2,6		:SET NEW SHIFT COUNT FOR NEXT TIME
	STH	T2,SHIFT

ACOUNH	LHI	R13,EM0028	:ERROR  #
	LR	R14,T1		:# OF BLOCKS LEFT
	:!!!TEMP - FOR PROBE???
	SRLS	R14,2		:CONVERT SECTORS TO BLOCKS
	ST	K2,ACTSAV+14	:SAVE LINK IF FROM ACOUN2
	JAL	LINK,ERRFIL,,	:SEND MSG TO ERROR LOG
	L	K2,ACTSAV+14	:RESTORE LINK

ACOUNB	LM	LINK,ACTSAV	:RESTORE REGS
	IF	MSC
	J	CHKWRT		:WRITE CHECK POINT - RETURN ON LINK

	ELSE
	JR	LINK		:RETURN

	EI
	ELSE

ACNTDW	JR	LINK		:RETURN AS NO DISK ACCOUNTING

	EI




	IF	1-NOTI
:*******************************************************:
:						T-I 7	:
:							:
:	PROCESS T-I SUPPLEMENTARY ACCOUNTING RECORD	:
:							:
:*******************************************************:
ACTINF	LHL	R13,SR1		:GET NODE #
	L	R14,SR2		:DATA
	JFS	ACTSR		:PROCESSES SUPPLEMENTARY DATA
	EI

:*******************************************************:
:					T-II 14/09	:
:							:
:	PROCESS T-II SUPPLEMENTARY ACCOUNTING RECORD	:
:							:
:*******************************************************:

ACTNF2	LHL	R13,CBUF	:GET NODE #
	L	R14,CBUF+4	:GET WORD OF DATA




:*******************************************************:
:							:
:	INSERT SUPPLEMENTARY ACCOUNTING IN FILE		:
:							:
:*******************************************************:
:R13 - UNMAPPED NODE #					:
:R14 - WORD OF DATA					:
:MEMORY IS MAINTAINED FOR LAST REPORTING NODE AND THE	:
:LAST INVOICE # USED BY A NODE.  IF THE DISK IF NOT	:
:AVAILABLE, EACH SUPPLEMENTARY MESSAGE IS PREFACED BY	:
:THE APPROPRIATE NODE AND INVOICE NUMBER.  THIS HELPS	:
:HANDLE THE CASE WHERE THE DISK WENT OFF LINE THEN CAME	:
:BACK - ONE NEEDS TO KNOW EXACTLY WHAT THE BUFFERED	:
:DATA IS FOR.						:
:*******************************************************:

ACTSR	L	C5,STIME,,	:CHECK IF TIME DEFINED
	JNFS	ACTI0		:YES

	LCS	C5,1		:SHOW TIME UNDEFINED
	JFS	ACTI1

ACTI0	A	C5,SLOWC,,	:ADD TIME FROM NODE IN SECONDS
	A	C5,TIME		:TIME IN SECONDS SINCE START OF 1974

ACTI1	LHI	T1,ACTLU
	TBT	T1,DSKBIT,,	:IS DISK FILE AVAILABLE?
	JE	ACTI6		:NO - DIFFERENT PROCEDURE


	:DISK ACCOUNTING FILE OK
	CLH	R13,ACTNOD	:IS THIS SAME NODE AS LAST?
	JEFS	ACTI2		:SAME - JUST ADD THIS MESSAGE

	STH	R13,ACTNOD	:SHOW THIS NODE LAST REPORTING
	LI	R15,60000000,R13 :TYP 6
	JAL	LINK,ACOUNT	:PLACE IN ACCOUNTING BUFFER

ACTI2	NMAP(R13)
	AR	R13,R13		:2X MAPPED NODE #
	EXHR	T1,R14		:ISOLATE MESSAGE TYPE
	EXBR	T1,T1
	LBR	T1,T1
	SRLS	T1,4		:RIGHT JUSTIFY ACCOUNTING MSG TYPE
	SIS	T1,7		:TYPE < 7?
	JGFS	ACTI3		:IF GREATER TEST FOR < 0E

	JLFS	ACTIVR		:REJECT IF LESS

	:MSG IS FOR AN INVOICE #, REMEMBER IT
	LR	R15,R14		:COPY DATA (INVOICE #)
	ST	R15,NVOICE,R13,R13 :SAVE INVOICE IN NVOICE BY MAPPED NODE #
	JFS	ACTI5		:CONTINUE

ACTI3	SIS	T1,0E-7		:CHECK TYPE TO 0E (ONLY 0E-7 REMAINS)
	JGFS	ACTIVR		:IF GREATER REJECT THIS MESSAGE

ACTI4	LR	R15,R14		:GET DATA

ACTI5	JAL	LINK,ACOUNT	:PLACE R15 IN ACCOUNTING BUFFER
	J	IND,,		:RETURN TO INPUT DISPATCHER


	:INVALID ACCOUNTING SUPPLEMENTARY RECORD
	:REJECT IT
	IF	1-NOTI
ACTIVR	CLHI	R13,2*(T2BN-BRGAP-RIIGAP) :IS THIS A T-II NODE?
	JGE	ILLRC2,,
	J	ILLREC,,
	ELSE
ACTIVR	J	ILLRC2,,
	EI



	:ACCOUNTING DISK FILE NOT AVAILABLE - SUPPLEMENT
	:BUFFER DATA TO INSURE IDENTIFIABILITY OF MESSAGES

ACTI6	STH	R13,ACTNOD	:LATEST DATA FROM THIS NODE
	LI	R15,60000000,R13 :NODE #
	JAL	LINK,ACOUNT	:PUT IN BUFFER
	NMAP(R13)
	AR	R13,R13		:2X MAPPED NODE #
	EXHR	T1,R14		:ISOLATE ACCOUNTING MSG TYPE
	EXBR	T1,T1
	LBR	T1,T1
	SRLS	T1,4		:RIGHT JUSTIFY TYPE
	SIS	T1,7		:TYPE < 7?
	JGFS	ACTI7		:NO

	JL	ACTIVR		:INVALID ACCOUNTING TYPE

	:WAS AN INVOICE #
	LR	R15,R14		:GET INVOICE #
	ST	R15,NVOICE,R13,R13 :REMEMBER LAST INVOICE FOR THIS NODE
	JFS	ACTI9		:AND PUT IN BUFFER

ACTI7	SIS	T1,0E-7		:INSURE IN RANGE
	JG	ACTIVR		:INVALID

	L	R15,NVOICE,R13,R13 :GET LAST REPORTED INVOICE THIS NODE
	JEFS	ACTI8		:NOT KNOWN

	JAL	LINK,ACOUNT	:SUPPLEMENT MSG BY INVOICE #

ACTI8	LR	R15,R14		:ACCOUNTING DATA

ACTI9	JAL	LINK,ACOUNT	:PUT IN REPORT
	J	IND,,		:RETURN TO INPUT DISPATCHER







	SUBTTL	LGCGEN - AUX CIRCUIT CODE

:*******************************************************:
:							:
:		BUILD AN AUXILIARY CIRCUIT		:
:							:
:*******************************************************:


:AUX CIRCUITS ARE SIMILAR TO TERMINAL INITIATED CIRCUITS (SEE BILCIR)
:EXCEPT THAT FOR T-I SOURCES, THERE IS NO FINAL PERM CHANGE TO THE
:"REMOTE", SINCE THE TYPE 5, SUB 5 FUNCTIONS IN A SIMILAR MANNER - BUT IT
:IS NOT ACKNOWLEDGED.  HENCE STAGE 2 OF CIRCUIT BUILDING IS ELIMINATED.
:FURTHERMORE, IF THE SOURCE IS T-II, THE NEEDLE TO THE ORIGIN IS SENT
:AT THE SAME TIME AS THE FINAL DATA TO THE DESTINATION (AGAIN, NO
:SOURCE ACK IS USED - ALTHOUGH IT IS AVAILABLE FOR T-II SOURCES)
:	IF THE CIRCUIT IS INTERNAL, IT IS CONSTRUCTED AT ONCE,
:AND ANY TYPE 5'S ARE SENT IMMEDIATELY: NO PERM ACKS ARE EMPLOYED.
:THE INTERNAL CIRCUIT BUILDING CODE IS ALSO EMPLOYED BY BILCIR AT ENTRY POINT
:AUXC0L.  IF AN AUX CIRCUIT IS DLL OR DIALOUT, THE CIRCUIT IS
:CONSTRUCTED BY THE DLL CODE.
:THE TYPE 5'S ARE AS FOLLOWS:
:	SUBTYPE 11	TO DESTINATION BASE TO START EXTERNAL LOGIN
:	SUBTYPE 12	TO SOURCE BASE TO START INTERNAL LOGIN (TELLS WHICH 
:			PORT WAS ASSIGNED FOR THE AUXCILIARY CIRCUIT)
:	SUBTYPE  5	TO SOURCE BASE TO INICATE CIRCUIT COMPLETE

:
:  BUILD AUX CIRCUIT

AUXC	JAL	LINK,LFLGRD	:GET LLFLAG
	LIS	T1,0		:ASSUME LOW SPEED CIRCUIT
	LR	T2,R14
	NHI	T2,@IRCM	:ISOLATE IRC RESTRICTION
	SRLS	T2,IRCP		:RIGHT JUSTIFY SAME
	STH	T2,UIRCRF	:SAVE FOR INSPECTION BY DIRECT
	EXBR	T2,T2		:POSITION IRC RESTRICTION
	SLLS	T2,2		:DITTO
	IF	UFAST
	THI	R14,@PCIRM	:PRIORITY CIRCUIT?
	JEFS	AUXC0G		:NO

	OHI	T2,NFPRIC	:INCLUDE PRIORITY CIRCUIT FLAG
	EI

AUXC0G	THI	R14,@COSTTM	:WHICH COST TABLE? (DEFAULT SCOST)
	JEFS	AUXC0H		:GCOST!

	OHI	T2,NFCSTT	:INCLUDE SCOST FLAG

AUXC0H	NI	R14,@SPEEDM	:ISOLATE SPEED INDICATOR
	IF	1-TIGOUG
	JEFS	AUXC01		:LOW SPEED CIRCUIT

	LHI	T1,8000		:HIGH SPEED BIT

AUXC01	STH	T1,H5		:STORE HIGH SPEED BIT SETTING
	ELSE
	STH	R14,H5		:STORE HIGH SPEED BIT SETTING
	EI
	SRLS	R14,SPEEDP-4	:POSITION SPEED BITS FOR NEEDLE FLAGS
	OR	R14,T2		:CONSTRUCT NEEDLE FLAGS
	STH	R14,NFLAGS	:SAVE FOR NEEDLE BUILDING
	LH	T1,ST03CT	:GET # T-I NODES IN TAKEOVER
	JGEFS	AUXC0F		:NON NEGATIVE

	STM	R0,NEGS03,,
	JAL	LINK,S03ERR,,
	LM	R0,S03ERR,,

AUXC0F	CLHI	T1,NOLOGIN	:CHECK THRESHOLD TO PERMIT LOGINS
	JLFS	AUXC02		:BUILD CIRCUIT

	LIS	C1,4		:INDICATE SYSTEM UNAVAILABLE
	JAL	LINK,AUXEM	:SEND ERROR # & TERMINATE LOGIN
	J	MUDRET		:RETURN TO DISK QUEUE HANDLER

	:OK TO BUILD AUX CIRCUIT

AUXC02	LHL	R15,LOGID	:SOURCE NODE #
	JAL	LINK,NODGET	:PUT PTR TO NODE DESC IN R14
	J	AUXC6		:NOT FOUND

	IF	SNETS
	SRLS	R13,1		:MAPPED NODE #
	LB	C1,SNETNT,R13,	:GET SUBNET NUMBER OF ORIGINATION
	SLLS	R13,1		:RESTORE 2*MAPPED NODE #
	ELSE
	LIS	C1,0		:DEFAULT TO SUBNET 0
	EI
	STH	C1,REQSNT	:REMEMBER REQUESTING SUBNET

	LR	C1,R14		:SAVE PTR TO NODE DESC
	LB	T1,NODTYPE,C1	:NODE TYPE
	CLHI	T1,9		:IS NODE TYPE VALID
	JG	KRASA2		:NO - CRASH

	SLLS	T1,2		:INDEX WORD TABLE
	LIS	R14,0		:INITIAL VALUE FOR SOURCE PORT ARRAY #
	J	AUXC04,T1	:BRANCH BY NODE TYPE


	:DISPATCHER JUMP TABLE

AUXC04	HC	0,0		:TYPE 0 REMOTE

	J	AUXC08		:TYPE 1 OLD BASE

	J	AUXC06		:TYPE 2 DUAL BASE

	HC	0,0		:TYPE 3 SUPER REMOTE

	J	AUXC08		:TYPE 4 SUPER BASE 1 HOST

	J	AUXC05		:TYPE 5 SUPER BASE 2 HOSTS

	J	AUXC06		:TYPE 6 SUPER BASE 3 OR 4 HOSTS

	HC	0,0		:TYPE 7 INTERDATA REMOTE

	HC	0,0		:TYPE 8 ENGINE REMOTE

	J	AUXC08		:TYPE 9 TYMNET II NODE (THIS IS A NO-OP)

AUXC05	LHL	R14,LOGID+2	:BUF # OF REQUEST
	SRLS	R14,8
	JFS	AUXC07

AUXC06	LHL	R14,LOGID+2	:BUF # OF REQUEST
	SRLS	R14,7

AUXC07	NHI	R14,3		:HOST PORT ARRAY # ONLY 2 BITS

AUXC08	EXBR	T1,R14
	STH	T1,H6		:POSITION FOR TYPE 5
	:ASSIGN SOURCE BASE PORT #
	IF	NOTI
	LIS	R15,0		:FAKE T-II PORT ASSIGNMENT
	ELSE
	LHL	R15,LOGID	:NODE # OF SOURCE
	JAL	LINK,BPA	:ASSIGN PORT IN SOURCE BASE
	J	AUXC6		:NO PORTS LEFT

	EI
	STH	R15,SRCBUF	:SAVE BUF #
	STH	R15,H2
	LM	R8,ZERO,,	:CLEAR C4-R15
	:CLEAR TARGET HOST & TARGET NODE LISTS

TEQ	EQ	MAXDST-8	:# HOSTS BEYOND 8 VALID
	IF	1-TEQ		:8 OR LESS
	STM	10-MAXDST,DIRHST :CLEAR WHAT'S NEEDED
	ELSE
	RE
	STM	R8,DIRHST+4*TEQ :CLEAR AN END SEGMENT

TEQ	EQ	TEQ-8		:8 FEWER TO CLEAR
	ER	TEQ+1
	IF	TEQ+8		:MORE AT BEGINNING?
	STM	8-TEQ,DIRHST	:COMPLETE THE JOB
	EI
	EI

	:SETUP REQUESTING HOST #
	LIS	R13,LLCIR
	JAL	LINK,LREAD
	STH	R14,REQHST	:REMEMBER REQUESTING HOST

	:GET HOSTS FROM LOGIN LIST
	LIS	R13,LLUUN	:READ LLUUN
	JAL	LINK,LREAD
	ST	R15,DIRHST	:SAVE FIRST 2 HOST #'S
	NHI	R15,7FFF	:THIS IS NON-ZERO IF MULTI TARGET HOST
	JE	AUXC0A		:IT IS SINGLE HOST

	:MULTI-TARGET, GET REMAINING TARGETS

TEQ	EQ	0		:INCREMENTAL B'LET INDEX
	RE
	LIS	R13,LLHOST+TEQ	:GET 4 HOSTS
	JAL	LINK,LREAD
	STM	R14,DIRHST+4+4*TEQ :SAVE NEXT 4 HOSTS

TEQ	EQ	TEQ+1
	ER	LLEXHB+1-TEQ

	:SELECT CURRENTLY AVAILABLE TARGET NODES
	:& SETUP FOR CALL TO DIRECT
	:C4 IS INDEX TO DIRHST LIST (POTENTIAL TARGET HOSTS)
	:C5 IS INDEX TO AVAILABLE TARGET NODE LIST (DIRNOD)

AUXC0A	LHL	R15,DIRHST,C4	:NEXT HOST #
	STH	R15,CHOST	:SAVE CURRENT HOST #
	JNFS	AUXC0B

	LR	C4,C4		:HOST LIST EXHAUSTED - WERE ANY FOUND
	JN	AUXC0E		:YES

	J	AUXC3		:NO - TELL USER 'SYSTEM UNAVAILABLE'

AUXC0B	HS	0
	IF	1-NOTI
	CLHI	R15,$A199	:IS DOWN LINE LOADING REQUESTED
	JE	AUXC0I		:YES - GO TO DOWN LINE LOADING CODE

	CLHI	R15,$A197	:IS DIAL OUT REQUESTED
	JE	AUXC0I		:YES - GO TO DIAL OUT CODE

	EI
	JAL	LINK,HGET	:CHECK HOST CONDITION

AXC0B0	J	AUXC0D		:HOST UNKNOWN

	J	AUXC0D		:HOST NOT IN SUBNET

	J	AUXC0D		:HOST DOWN

	J	AXC0B1		:ANSWERED ON THIS BASE

	LR	R12,R12		:SHUT, SEE IF MORE BASES ON HOST
	JE	AUXC0D		:NO

	J	HGETNX		:YES - TRY NEXT ONE

AXC0B1	LR	R0,R14		:GET STATUS BYTE
	NHI	R0,HFPM^-8	:HOST REPORTING OUT OF PORTS?
	JN	AXC0C1		:YES - CK FOR ADD'L BASES ON HOST

	NHI	R14,HPAM^-8	:EXTRACT HPA
	LR	R0,R14		:SAVE HOST PORT ARRAY # (FOR INTERNAL CIRCUIT)
	LR	C6,R15		:SAVE BASE #
	LR	K2,R13		:SAVE HOST.BASE COST
	IF	1-NOTI
	JAL	LINK,TBPA	:TEST IF BASE PORT AVAILABLE
	J	AXC0C1		:NOT AVAILABLE, CK FOR ADD'L BASES

	EI
	CLH	C6,LOGID	:IS THIS AN INTERNAL CIRCUIT
	JE	AUXC0K		:YES - CHOOSE THIS HOST

	:NOT AN INTERNAL CIRCUIT
	IF	1-FULLTI
	CLHI	C6,T2BN		:IS BASE T-II NODE
	JLFS	AUXC0C		:NO

	SHI	C6,BRGAP+RIIGAP :MAP NODE #
	EI

AUXC0C	STH	C6,DIRLIST,C5	:SAVE MAPPED NODE # AS DESTINATION FOR DIRECT
	STH	C6,DIRNOD,C5	:SAVE A COPY FOR CHECKING END OF CIRCUIT
	STH	K2,DIRCST,C5	:PLACE HOST COST FOR DIRECT
	LHL	K2,CHOST	:RECOVER CURRENT HOST #
	OI	K2,8000		:FLAG THIS AS DESTINATION HOST
	STH	K2,DIRBYT-2,C6,C6 :SAVE FOR DIRECT
	AIS	C5,2		:INCR INDEX INTO DIRLIST
	CLHI	C5,2*MAXDST	:END OF LIST?
	JGEFS	AUXC0E		:YES

AXC0C1	LR	R12,R12		:ADDITIONAL BASES?
	JEFS	AUXC0D		:NO

	LA	LINK,AXC0B0	:RESTORE RETURN ADDRESS
	J	HGETNX		:CHECK NEXT ENTRY FOR HOST

AUXC0D	AIS	C4,2		:INCR INDEX INTO HOST LIST
	CLHI	C4,2*MAXDST	:IS LIST EXHAUSTED
	JL	AUXC0A		:NO

	: FIND A PATH

AUXC0E	LR	C5,C5		:WERE ANY DESTINATIONS AVAILABLE
	JE	AUXC3		:NO - TELL USER 'SYSTEM UNAVAILABLE'

	LIS	R0,0		:FLAG TO DIRECT TO USE ALL NODES
	IF	1-NOTI
	ST	R0,PBAPP	:INDICATE NEW LPERM THREAD
	EI
	STH	R0,DIRLIST,C5	:MARKER FOR END OF DESTINATION LIST
	LHL	R13,NFLAGS	:GET SPEED & BATCH/INTERACTIVE BITS
				:!!!FIELD DEPENDENT CODE
	NHI	R13,NFCSTT!NFSPDB :EXTRACT CIRCUIT TYPE BITS
	SRLS	R13,2		:MAKE INTO 1 WORD INDEX
	L	R13,COSTTA,R13,	:GET ADDRESS OF RESPECTIVE COST TABLE

AUXC0Q	JAL	LINK,DIRECT	:FIND A PATH TO THE NEAREST DESTINATION
	J	AUXC3		:NO PATH - INFORM USER

	LHL	K1,H1		:UNMAPPED DESTINATION BASE
	LHL	R15,BILHST	:HOST # OF DESTINATION
	STH	R15,CHOST	:SAVE FOR NEEDLE BUILDER
	JAL	LINK,HBSGET	:GET HOST STATUS ON THIS BASE
	HC	0,0		:NOT IN NET -- FATAL ERROR

	HC	0,0		:HOST SHUT OR DOWN - FATAL ERROR

	LR	K2,R14		:COPY STATUS BITS
	NHI	K2,HIQM^-8	:EXTRACT HIQ BIT FOR LATER
	NHI	R14,HPAM^-8	:EXTRACT PORT ARRAY #
	EXBR	T1,R14		:POSITION HOST ARRAY # FOR TYP 2 MSG
	STH	T1,HSTPA2	:SAVE HOST PORT ARRAY #
	IF	NOTI
	LIS	R15,0		:FAKE PORT ASSIGNMENT
	ELSE
	JAL	LINK,BPA	:ASSIGN A PORT IN THE BASE
	HC	0,0		:NO PORT AVAILABLE - FATAL ERROR

	EI
	STH	R15,H7		:DEST BUF #
	LR	R14,K2		:HIQ DESTINATION?
	JEFS	AUXC0P		:NO

	JAL	LINK,LFLGRD	:GET LOGIN FLAGS
	NHI	R14,@IIXM	:EXTRACT IIX REQUEST FLAG
	JEFS	AUXC0P		:NO REQUEST

	LHI	R14,NFIIXF	:FLAG FOR IIX CIRCUIT IN NFLAGS
	AHM	R14,NFLAGS	:SET BIT IN FLAGS

AUXC0P	STH	R14,IIXFLG	:SET IIX CIRCUIT FLAG
	J	AUXC7		:PROCESS INTERBASE CIRCUIT


	:INTERNAL AUX CIRCUIT

AUXC0K	STH	C6,H1		:SAVE BASE #
	LR	R14,R0		:HOST PORT ARRAY #
	EXBR	R0,R0		:POSITION FOR TYP 2 MSG
	STH	R0,HSTPA2
	IF	NOTI
	LIS	R15,0		:FAKE PORT ASSIGNMENT FOR TII
	ELSE
	LR	R15,C6
	JAL	LINK,BPA	:ASSIGN A PORT IN THE BASE
	HC	0,0		:NOT AVAILABLE - FATAL ERROR

	EI
	STH	R15,H7		:DEST BUF #
	TS	H4		:SET FLAG TO SHOW AUX CIRCUIT
		:
		:ENTRY POINT FOR TERMINAL INITIATED INTERNAL CIRCUIT)
		:SETUP IIX FLAG

AUXC0L	LHL	K1,UIRCRF	:GET USER IRC
	STH	K1,UIRC		:SETUP FOR ACCOUNTING
	LR	K1,C6		:NODE #
	LHL	R15,CHOST	:HOST #
	JAL	LINK,HBSGET	:GET STATUS
	HC	0,0		:NOT ON BASE - FATAL

	NOP			:MUST BE TERMINAL SHUT OVERRIDE
	NHI	R14,HIQM^-8	:EXTRACT HIQ BIT FROM STATUS BYTE
	JEFS	AUXC0M		:NOT HIQ TARGET, NON-IIX CIRCUIT

	JAL	LINK,LFLGRD	:SEE IF IIX REQUESTED
	NHI	R14,@IIXM	:IIX REQUESTED?
	JEFS	AUXC0M		:NO

	LHI	R14,NFIIXF	:NEEDLE FLAG FOR IIX CIRCUIT
	AHM	R14,NFLAGS	:ADD TO NEEDLE FLAGS
	LHI	R14,8000	:T-I SOURCE IIX FLAG FOR SR2 OF T2 OR T5/10

AUXC0M	STH	R14,IIXFLG	:REMEMBER FLAG

	:PROCESS ACCORDING TO T-I/T-II
	LR	R15,C6		:REQUESTING NODE #
	CLHI	R15,T2BN	:IS THIS A TYMNET II NODE
	JGE	AUXIN		:YES - GO BUILD A NEEDLE

	IF	NOTI
	HC	0,0		:FATAL ERROR

	ELSE
		:
		:INTERNAL CIRCUIT IN T-I NODE
		:ASSIGN A PAIR OF INTERNAL PERM TABLE ENTRIES
		:(1ST FOUR ENTRIES RESERVED, AND ARE AVOIDED)
	JAL	LINK,FIPT	:MAKE R15 PT TO INTERNAL PERM TABLE, R14 LINE #
	STH	R14,H5		:LINE # POSITIONED FOR TYPE 2 MSG
	LCS	T2,1		:-1 IS EMPTY PERM TABLE ENTRY
	LIS	C2,0C		:SEARCH LAST TWELVE ENTRIES
		:SEARCH FOR PAIR

AUXC1	CL	T2,8,R15	:CHECK PAIR
	JEFS	AUXC2		:PAIR IS FREE

AUXC1A	AIS	R15,4		:PT TO NEXT PAIR
	SIS	C2,2		:HAVE WE LOOKED AT ALL ENTRIES
	JNBS	AUXC1		:NO - LOOP

		:CIRCUITS BUSY
	J	AUXC1B		:NO AVAILABLE ENTRIES

		:FOUND AN AVAILABLE PERM ENTRY

AUXC2	LHL	T1,SRCBUF	:SOURCE BUF #
	STH	T1,8,R15	:MAKE PERM TABLE ENTRY
	LHL	T1,H7		:DEST BUF #
	STH	T1,0A,R15	:MAKE PERM TABLE ENTRY
	LHL	R15,STOUT	:TIMEOUT ITEM # FOR LOGIN
	JAL	LINK,TREMOVE	:REMOVE TIMEOUT
	LHI	C3,10
	SR	C3,C2		:THIS IS CHANNEL #
	STH	C3,H3	
	JAL	LINK,ACTCR	:SEND SESSION # TO BASE & ACCOUNTING FILE
	JAL	LINK,CIRCC	:SEND LOGIN INFO TO DEST HOST
		:SEND TYPE 2'S FOR INTERNAL CIRCUIT
	LHL	R13,H1		:DEST BASE #
	OHI	R13,2000	:TYPE 2 MSG
	LHL	R14,H3		:CHANNEL #
	OH	R14,H5		:LINE # OF INTERNAL PERM TABLE
	LHL	R15,H7		:DEST BUF #
	JAL	LINK,CAPPEND	:ADD TO COMMAND LIST
	AIS	R14,1		:NEXT CHANNEL #
	OH	R14,IIXFLG	:OR IN IIX FLAG (0|8000)
	LHL	R15,SRCBUF	:SOURCE BUF #
	JAL	LINK,CAPPEND	:ADD TO COMMAND LIST
		:SEND TYPE 5 SUB 11 TO DESTINATION
	LHL	R13,H1		:DEST BASE #
	OHI	R13,5000	:TYPE 5 MSG
	LHL	R14,H7		:DEST BUF #
	SRLS	R14,1		:DEST PORT #
	OH	R14,HSTPA2	:HOST # IN BASE
	LHI	R15,900		:EXTERNAL LOGIN (SUBTYPE 11)
	LHL	T1,IIXFLG	:IIX CIRCUIT?
	JEFS	AUXC2A		:NO

	AIS	R15,1		:FLAG IIX CIRCUIT

AUXC2A	JAL	LINK,CAPPEND	:ADD TO COMMAND LIST
	JAL	LINK,LDELETE	:REMOVE LOGIN LIST ENTRY
	LIS	T1,1
	AM	T1,INTCNT	:INCREMENT COUNT OF INTERNAL CIRCUITS
	LHL	T2,LOGID	:GET NODE #
	NMAP(T2)
	AHM	T1,TLGSCL,T2,T2	:COUNT NUMBER OF LOGINS CLOSED
	LH	T1,H4		:IS THIS AUX CIRCUIT
	JE	BILRET		:NO - ALL DONE

		:AUX CIRCUIT
		:SEND TYPE 5 SUB 12 & SUB 5 TO SOURCE BASE
	LHL	R13,LOGID	:SOURCE BASE #
	OHI	R13,5000	:TYPE 5 MSG
	LHL	R14,SRCBUF	:SOURCE BUF #
	SRLS	R14,1		:SOURCE PORT #
	OH	R14,H6		:PREPOSITIONED PORT ARRAY # OF HOST IN BASE
	OH	R14,IIXFLG	:OR IN IIXFLAG (0|8000)
	LHL	R15,LOGID+2	:ORIGINATING BUF #
	SRLS	R15,1		:ORIGINATING PORT #
	LR	C4,R15
	OHI	R15,0A00	:INTERNAL LOGIN (SUBTYPE 12)
	JAL	LINK,CAPPEND	:ADD TO COMMAND LIST
	LHL	R13,LOGID	:SOURCE BASE #
	OHI	R13,5000	:TYPE 5 MSG
	LR	R14,C4		:ORIGINATING PORT #
	OH	R14,H6		:HOST # IN BASE
	OI	R14,8000	:SET SIGN BIT (NO CHARS TO SUP)
	LHI	R15,500		:SUBTYPE 5 (ACK AUX CIRCUIT)
	JAL	LINK,CAPPEND	:ADD TO COMMAND LIST
	L	C2,LOGID
	JAL	LINK,LCHSUB	:STOP MONITORING THIS LOGID IF MONITORING IT
	JAL	LINK,AUXDON	:AUX CIRCUIT DONE
	J	MUDRET		:RETURN TO DISK HANDLER

	EI
		:
		:  INTERNAL CIRCUIT IN TYMNET II NODE

AUXIN	JAL	LINK,ACTCR	:GENERATE ACCOUNTING INFO
	LHL	R15,LOGID	:RESTORE NODE #
	LIS	R12,0		:SHOW START OF CIRCUIT
	JAL	LINK,NEEDLE	:BUILD A NEEDLE
	J	AUXIN1		:CIRCUIT COMPLETE

	HC	0,0		:CIRCUIT INCOMPLETE - FATAL ERROR

AUXIN1	JAL	LINK,CIREND	:SEND NEEDLE & CLEAN UP LOGIN
	LIS	T1,1
	AM	T1,INTCNT	:INCREMENT COUNT OF INTERNAL CIRCUITS BUILT
	LH	T1,H4		:WAS THIS AN AUX CIRCUIT
	JL	MUDRET		:YES - RETURN TO DISK QUEUE HANDLER

	J	BILRET		:RETURN TO CALLER OF BILCIR


	IF	NOTI

AUXC3	HS	0
	ELSE
		:NO AVAILABLE INTERNAL CIRCUITS IN T-I NODE

AUXC1B	LH	T1,H4		:IS THIS AUX CIRCUIT
	JE	CIRC8		:NO - SEND CIRCUITS BUSY TO TERMINAL

	LHL	R15,H1		:DEST NODE #
	JAL	LINK,NODGET	:MAKE SURE NODE DESC IS THERE
	HC	0,0		:NOT THERE - FATAL ERROR

	LHL	R13,H7		:DEST BUF #
	SRLS	R13,1		:PORT #
	JAL	LINK,ZAPR	:RELEASE PORT
	HC	0,0		:CRASH - ASSIGNED INVALID T-I PORT!

	:CLEAR PORT ASSIGNMENTS IN BOTH BASES & SEND ERROR MSG

AUXC3	LHL	R15,LOGID	:SOURCE BASE #
	JAL	LINK,NODGET	:GET PTR TO NODE DESC
	HC	0,0		:CRASH - IT WAS THERE BEFORE!!

	LHL	R13,H2		:SOURCE BUF #
	SRLS	R13,1		:SOURCE PORT #
	JAL	LINK,ZAPR	:DEASSIGN PORT
	HC	0,0		:CRASH - ASSIGNED INVALID T-I PORT!

	EI
	:SEND ERROR MSG - SYSTEM UNAVAILABLE

AUXC6	LIS	C1,4		:ERROR # FOR AUX CIRCUIT
	JAL	LINK,AUXEM	:SEND MSG
	J	MUDRET		:RETURN TO DISK HANDLER


	:INTERBASE CIRCUIT

AUXC7	JAL	LINK,ACTCR	:REGISTER ACCOUNTING INFO
	IF	NOTI
	LHL	R15,LOGID	:REQUESTING NODE
	LIS	R12,0		:INDICATE START OF CIRCUIT
	JAL	LINK,NEEDLE	:BUILD A CIRCUIT
	J	AUXCC		:CIRCUIT COMPLETE

	HC	0,0		:INCONSISTENT

	ELSE
		:SETUP WHERE TO ADD COMMANDS TO LOGIN LIST ACCORDING
		:TO WHETHER DESTINATION IS T-I OR T-II
	LHL	R15,H1		:DEST BASE #
	CLHI	R15,T2BN	:IS IT T-II
	JGEFS	AUXC7A		:YES

		:DEST BASE IS T-I, STUFF DESTINATION BUFFER WITH LOGIN INFO
		:AND SAVE 5 SUB 11 ON LOGIN LIST
	JAL	LINK,CIRCC	:SEND USER NAME TO T-I BASE
	LIS	R14,LLPSWD	:SETUP TO ADD TO LOGIN LIST HERE
	STH	R14,TEMP
	LIS	R13,LLUUN	:DELETE THESE B'LETS
	LIS	R15,0
	JAL	LINK,LSUBDEL	:DELETE SUBLIST
	J	AUXC7B


	:DEST BASE IS T-II, SETUP TO ADD NEEDLE TO LOGIN LIST

AUXC7A	JAL	LINK,LFLGRD	:READ LLFLAG
	EXHR	T1,R15		:RIGHT JUSTIFY END OF PSWD PTR
	AIS	R15,7		:CALCULATE FIRST B'LET AFTER USER NAME
	SRLS	R15,3		:RIGHT JUSTIFY SAME
	NHI	R15,0FFF	:ISOALTE SAME
	STH	R15,TEMP	:START SAVING NEEDLES IN THIS B'LET
	SRLS	T1,3		:RIGHT JUSTIFY LAST B'LET IN PSWD
	NHI	T1,0FFF		:ISOLATE SAME
	CLR	T1,R15		:CHECK IF DELETION IS NECESSARY
	JLEFS	AUXC7B		:NO

	LR	R14,R15		:DELETE B'LETS HOLDING PSWD
	LIS	R15,0
	JAL	LINK,LSUBDEL
	NOP
		:
		:SETUP COMMANDS TO REQUESTING NODE

AUXC7B	LHL	R15,LOGID	:REQUESTING NODE #
	CLHI	R15,T2BN	:IS IT T-II NODE
	JL	AUXC7C		:NO

		:REQUESTING NODE IS T-II,
		:PUT NEEDLE ON LOGIN LIST
	LIS	R12,0		:INDICATE START OF CIRCUIT
	JAL	LINK,NEEDLE	:BUILD A NEEDLE
	J	AUXCC		:CIRCUIT COMPLETE

	LIS	R12,0		:SETUP FOR CALL TO ASBUFF
	LIS	R13,0
	LHL	T1,CBUF-2	:LENGTH OF NEEDLE
	LHL	R14,CBUF-4,T1	:T-I NODE NEXT IN CIRCUIT
	NHI	R14,7FFF	:CLEAR SIGN BIT
	LHL	R15,W4		:LAST T-II NODE # IN NEEDLE
	STM	R12,ASTEMP	:SAVE FOR CALL TO ASBUFF
	JAL	LINK,ANEDL	:ADD NEEDLE TO LOGIN LIST
	LHL	R13,TEMP	:CURRENT LOGIN-LIST B'LET
	LIS	T1,1
	AHM	T1,TEMP		:INCREMENT TO NEXT
	LHL	R14,W4		:LAST T-II NODE OF NEEDLE
	EXHR	R14,R14		:POSITION FOR LOGIN LIST LPERM ENTRY
	LHL	R15,ACTSQN+2	:LOW ORDER 16 BITS OF ACTSQN SHOULD BE UNIQUE
	OI	R15,1^1F	:SIGN BIT INDICATES LPERM ENTRY
	JAL	LINK,LWRITE	:ADD LPERM ENTRY FOR NEEDLE TO LOGIN LIST
	J	AUXC7D

		:REQUESTING NODE IS T-I,
		:PUT TYPE 5 SUB 12 & TYPE 5 SUB 5 ON LOGIN LIST

AUXC7C	LHL	C3,TEMP		:START ADDING TO LOGIN LIST AT THIS B'LET
	AIS	C3,2		:INCR VALUE FOR LATER USE
	STH	C3,TEMP
	SIS	C3,2		:SET UP FOR CALL TO AUXC10
	JAL	LINK,AUXC10	:PLACE TYP 5 SUB 12 AND SUB 5 ON LOGIN LIST
	LHL	R15,LOGID	:REQUESTING NODE #
	JAL	LINK,ASCHAN	:ASSIGN A CHANNEL TO NEXT NODE
	NHI	C2,0FFFE	:FORCE PERM COMMAND TO USE EVEN BUFFER #
				:THIS IS KLUDGE NOT TO CONFUSE BASE
	JAL	LINK,PLACE	:ADD TO LCOM & LPERM LISTS


	:IF DESTINATION IS T-I, ADD TYP 5 SUB 11 TO LOGIN LIST

AUXC7D	LHL	R13,H1		:DEST BASE #
	CLHI	R13,T2BN	:IS DESTINATION T-II?
	JGE	AUXC7E		:NO

	OHI	R13,5000	:TYP 5 MSG
	LHL	R14,H7		:DEST BUF #
	SRLS	R14,1		:DEST PORT #
	OH	R14,HSTPA2	:MERGE PORT ARRAY #
	EXHR	R13,R13		:POSITION FOR STORAGE IN B'LET
	OR	R14,R13
	LHI	R15,900		:SUBTYPE 11 (EXTERNAL LOGIN)
	LHL	T1,IIXFLG	:IIX CIRCUIT?
	JEFS	AUXC79		:NO

	AIS	R15,1		:INCLUDE IIX CIRCUIT FLAG

AUXC79	LHL	R13,TEMP	:SAVE HERE ON LOGIN LIST
	AIS	R13,1		:NEXT POSITION
	STH	R13,TEMP	:REMEMBER
	SIS	R13,1		:RESTORE
	JAL	LINK,LWRITE
		:
		:CIRCUIT BUILDING LOOP

AUXC7E	LM	R12,ASTEMP	:RESTORE ARGS FOR CALL TO ASBUFF
	CLHI	R14,T2BN	:IS NEXT NODE T-II
	JGEFS	AUXC8A		:YES - START NEEDLE BUILDING

AUXC8	JAL	LINK,ASBUFF	:ASSIGN BUFFER IN NEXT NODE IN CIRCUIT
	J	AUXC9		:NEXT NODE IS DESTINATION NODE

	JAL	LINK,PLACE	:ADD TO LCOM & LPERM LISTS
	JAL	LINK,ASCHAN	:ASSIGN CHANNEL IN NEW NODE
	JAL	LINK,PLACE	:ADD TO LCOM & LPERM LISTS
	CLHI	R14,T2BN	:IS NEW NODE T-II
	JLBS	AUXC8		:NO - LOOP

	:NEXT NODE IS T-II

AUXC8A	JAL	LINK,CIR1T2	:START BUILDING NEEDLE FROM HERE
	J	AUXC9A		:CIRCUIT COMPLETE - RETURN TO DISK HANDLER

	J	AUXC8		:KEEP BUILDING CIRCUIT IN T-I

AUXC9	JAL	LINK,PLACE	:ADD LAST CHANGE TO LCOM & LPERM LISTS

	:CIRCUIT BUILDING COMPLETE AND LOGIN NOW IN STATE 5.
	:UPDATE TIMEOUT, STATE, AND INCLUDE THREAD HEAD & TIME IN LLFLAG

AUXC9A	LHI	R15,20		:UPDATE TIME OUT TO 32 SECONDS
	JAL	LINK,LOG5UP	:UPDATE LOGIN LIST ENTRY
	J	MUDRET		:RETURN TO DISK HANDLER




:*******************************************************:
:							:
:	SUBROUTINE TO GENERATE T-I TYPE 5 MESSAGES	:
:							:
:*******************************************************:
:CLEAR SOURCE EVEN BUFFER AND PUT TYPE 5 SUB 12 AND	:
:SUB 5 FOR SOURCE BASE ON LOGIN LIST. 5 SUB 12 GOES TO	:
:SUBLIST B'LET (C3), 5 SUB 5 TO (C3)+1.			:
:*******************************************************:

AUXC10	ST	LINK,ALINK	:SAVE LINK
	LHL	R13,LOGID	:SOURCE BASE #
	OHI	R13,3000	:TYPE 3
	LHI	R14,8004	:SUBTYPE 4 - CLEAR BUFFER
	LHL	R15,SRCBUF	:EVEN BUFFER # TO CLEAR
	JAL	LINK,CAPPEND	:APPEND TO COMMAND LIST
	LHL	R13,LOGID	:SOURCE BASE #
	OHI	R13,5000	:TYPE 5 MSG
	LHL	R14,SRCBUF	:SOURCE BUF #
	SRLS	R14,1		:SOURCE PORT #
	OH	R14,H6		:HOST # IN BASE
	EXHR	R13,R13
	LR	C2,R13
	OR	R14,R13		:PACK SR1 & SR2 IN ONE WORD
	LHL	R15,IIXFLG	:IIX CIRCUIT?
	JEFS	AUXC11		:NO

	OI	R14,8000	:INCLUDE IIX FLAG IN SR2

AUXC11	LHL	R15,LOGID+2	:BUF # OF REQUEST
	SRLS	R15,1		:PORT # OF REQUEST
	LR	C1,R15
	OHI	R15,0A00	:SUBTYPE 12
	LR	R13,C3		:ADD TO LOGIN LIST AT (C3)
	JAL	LINK,LWRITE
	LR	R14,C1		:PORT # OF REQUEST (TYPE 5 MSG)
	OH	R14,H6		:HOST # IN BASE
	OI	R14,8000	:SET SIGN BIT (INHIBIT CHAR FLOW)
	OR	R14,C2		:PACK SR1 & SR2 IN ONE WORD
	LHI	R15,500		:SUBTYPE 5  ALL OK
	LHI	R13,1,C3	:ADD TO LOGIN LIST AT (C3)+1
	JAL	LINK,LWRITE
	L	LINK,ALINK	:RESTORE LINK
	JR	LINK		:RETURN


:  AUX CIRCUIT ENTIRELY IN TYMNET II
	EI

AUXCC	JAL	LINK,CIREND	:SEND NEEDLE & CLEAN UP LOGIN
	LIS	T1,1
	AM	T1,AT2CIR	:COUNT ALL T-II CIRCUITS
	J	MUDRET		:RETURN TO DISK HANDLER



	IF	1-NOTI
	SUBTTL	LGCGEN - DLL & DIALOUT CODE (T-I ONLY)


:*******************************************************:
:							:
:	GENERATE DLL OR DIALOUT CIRCUITS		:
:							:
:*******************************************************:
:THESE REQUESTS ARE ASSOCIATED WITH T-I NODES AS	:
:TARGETS.						:
:*******************************************************:


:THIS ROUTINE IS ENTERED FROM AUXILIARY CIRCUIT CODE ONLY AT AUXC0I
:AND FROM BILCIR ONLY AT DLLOD0.
:	DOWN-LINE LOAD & DIAL-OUT CIRCUITS ARE BUILT SIMILAR TO TERMINAL
:TERMINAL OR AUXILIARY CIRCUITS, EXCEPT THAT THE CIRCUIT ENDS
:WITH A PASS-THROUGH BUFFER ON THE T-I NODE DESIGNATED BY THE LOGIN
:USERNAME (DOWN LINE LOADS THROUGH T-II NODES EMPLOY STANDARD
:CIRCUITS WHICH LOGIN TO THE NODE'S KERNEL WITH A SPECIAL
:USER NAME TO REQUEST THE DOWN-LINE LOAD).  FURTHERMORE, DURING THE
:CIRCUIT COMPLETION STAGE, A DLL OR DIALOUT COMMAND IS SENT TO THE
:DESTINATION T-I NODE.  IF THE CIRCUIT IS AN AUX CIRCUIT, OR IS T-II,
:THIS COMMAND GOES OUT AT THE SAME TIME AS THE  TYPE 5'S.

	:AUX CIRCUIT REQUEST FOR DLL OR DIALOUT

AUXC0I	LIS	R13,0
	STH	R13,H8		:SHOW THIS IS AUX CIRCUIT
	J	DLLOAD		:PROCESS DOWN LINE LOAD OR DIAL OUT CIRCUIT

	:TERMINAL REQUEST FOR DLL OR DIALOUT
	:COULD BE REQUEST THRU GATEWAY (TID 16)

DLLOD0	LCS	C1,1		:SET FLAG TO SHOW TERMINAL CIRCUIT
	STH	C1,H8		:SAVE ENTRY FLAG
	STH	C2,H3		:REMEMBER HOST # (FLAG FOR LOAD OR DIAL OUT)
	LHL	T1,LOGID+2	:REQUESTING BUF #
	STH	T1,SRCBUF
	:NODE # IS THE USER NAME - ASSEMBLE IT

DLLOAD	STH	R15,H3		:SAVE HOST # (197 OR 199)
	LIS	R13,LLTOP
	JAL	LINK,LREAD	:GET LLTOP
	STH	R14,STOUT	:SAVE TIME-OUT ITEM # IN CASE INTERNAL

	:ASSEMBLE NODE # FROM USERNAME
	JAL	LINK,LFLGRD	:GET LLFLAG
	CHVR	C2,R15		:PTR TO END OF USER NAME STRING
	SHI	C2,UNSS		:# CHARACTERS IN USER NAME STRING
				:NOTE - SHOULD BE 4 OR LESS!
	LIS	C4,7		:MASK FOR OCTAL DIGITS
	LIS	C3,0		:ZERO ACCUMULATOR
	LIS	R13,LLUNAM	:GET USER NAME
	JAL	LINK,LREAD
	STM	R14,UNAME	:SAVE CHARACTERS
	LIS	C1,0		:INDEX UNAME

DLL1	LB	R15,UNAME,C1	:GET A BYTE
	NR	R15,C4		:MASK DOWN TO OCTAL DIGIT
	SLLS	C3,3
	OR	C3,R15		:ADD TO ASSEMBLED #
	AIS	C1,1		:BUMP UNAME INDEX
	SIS	C2,1		:DECREMENT # LEFT
	JGBS	DLL1		:MORE, CONTINUE


	:NODE # ASSEMBLED

DLL2	CLHI	C3,MXREM	:IS DESTINATION T-I NODE
	JG	DLLERR		:NO - RETURN ERROR TO HOST

	LR	R15,C3		:DEST NODE #
	JAL	LINK,NODGET	:GET NODE DESC
	J	DLL10		:NO DESC - RELEASE PORT, RETURN ERROR TO HOST

	LH	T1,,R14		:CHECK OUT OF PASSTHROUGHS FLAG
	JL	DLL10		:OUT OF PASSTHROUGHS -RETURN ERROR TO HOST

	SRLS	R13,1		:MAPPED TARGET NODE #

	IF	SNETS
	:INSURE TARGET NODE IN SAME NET AS ORIGINATION NODE
	LB	T1,SNETNT,R13,	:TARGET SUBNET
	CLH	T1,REQSNT	:SAME?
	JN	DLL10		:NO, RETURN ERROR

	EI

	LHL	T1,H3		:HOST #
	STH	T1,CHOST	:SAVE IN CASE OF NEEDLE ERROR
	CLHI	T1,$A197	:IS IT DIALOUT
	JNFS	DLL3		:NO - ALL NODES ARE VALID

	LB	T1,NODTYP,R14
	SIS	T1,7		:IS IT NODE TYPE 7
	JN	DLL10		:NO - ERROR

DLL3	CLH	C3,LOGID	:IS IT INTERNAL CIRCUIT
	JE	DLLINT		:YES - GO BUILD INTERNAL CIRCUIT

DLL3A	LIS	R0,0		:FLAG FOR DIRECT ROUTINE - NOT A REBUILD
	STH	R0,DIRBYT-2,R13,R13 :MARK END OF CIRCUIT FOR DIRECT
	EXHR	R13,R13		:MAPPED NODE # LEFT , ZERO RIGHT
	ST	R13,DIRLIST	:TELL DIRECT ROUTINE ONLY ONE DESTINATION
	STH	C3,ASTEMP+0A	:SET UP TO USE ASBSUB TO ASSIGN PASSTHRU
	LR	C3,R14		:PTR TO NODE DESC
	LA	R13,SCOST,,	:USE BATCH COST TABLE
	JAL	LINK,DIRECT	:FIND A PATH
	J	DLL10		:NO PATH

	LH	T1,H8		:CHECK ENTRY POINT
	JEFS	DLL3B		:AUX CIRCUIT

	JAL	LINK,ACTCR	:DO ACCOUNTING FOR TERMINAL CIRCUIT
	LM	R0,DIRSAV	:RETORE REGS
	JFS	DLL3C		:CONTINUE

	IF	1-PUB

DLL3B	JAL	LINK,ACTCC,,	:TELL ACCOUNTING ABOUT SKIPPED INVOICE #
	ELSE

DLL3B	HS	0		:NOP
	EI
	:ASSIGN PASSTHROUGH BUFFER FOR DEST NODE

DLL3C	JAL	LINK,ASBSUB	:ASSIGN PASSTHRU BUF (STORE IN H2)
	LHL	T1,H2
	STH	T1,H7		:SAVE DEST BUF # IN H7
	LHL	R15,LOGID	:SOURCE NODE #
	LCS	T1,2
	NH	T1,SRCBUF	:EVEN SOURCE BUF #
	STH	T1,H2		:STORE FOR ASCHAN

	:SAVE COMMANDS TO ORIGINATING NODE ACCORDING TO
	:WHETHER IT IS T-II, T-I AUX, OR T-I TERMINAL.
	:FIRST DELETE UNECESSARY LOGIN B'LETS.
	LIS	R14,LLHOST+1	:SETUP TO DELETE LOGIN SUBLIST
	LIS	R15,0		:DELETE LOGIN SUBLIST FROM HERE
	ST	R15,PBAPP	:ALSO INDICATE BEGINNING OF LPERM THREAD
	JAL	LINK,LSUBDEL
	LHL	R15,LOGID	:REQUESTING NODE #
	CLHI	R15,T2BN	:IS IT T-II NODE
	JL	DLL7		:NO

		:T-II NODE REQUESTED DLL,
		:GENERATE & SAVE NEEDLE TO SOURCE NODE ON LOGIN LIST
	LIS	T1,LLPSWD	:START SAVING NEEDLE AT THIS B'LET
	STH	T1,TEMP
	LIS	R12,0		:INDICATE START OF CIRCUIT
	JAL	LINK,NEEDLE	:BUILD A NEEDLE AS FAR AS IT WILL GO
	HC	0,0		:CIRCUIT COMPLETE - FATAL ERROR

	LIS	R12,0		:SETUP TO CALL ASBUFF
	LIS	R13,0
	LHL	T1,CBUF-2	:LENGTH OF NEEDLE
	LHL	R14,CBUF-4,T1	:T-I NODE #
	NHI	R14,7FFF	:REMOVE SIGN BIT
	LHL	R15,W4		:LAST T-II NODE IN NEEDLE
	STM	R12,ASTEMP	:SAVE ARGS FOR CALL TO ASBUFF
	JAL	LINK,ANEDL	:ADD NEEDLE TO LOGIN LIST
	LHL	R13,TEMP	:CURRENT LOGIN-LIST B'LET
	LIS	T1,1
	AHM	T1,TEMP		:INCREMENT TO NEXT
	LHL	R14,W4		:LAST T-II NODE OF NEEDLE
	EXHR	R14,R14		:POSITION FOR LOGIN LIST LPERM ENTRY
	LHL	R15,ACTSQN+2	:LOW ORDER 16 BITS OF ACTSQN SHOULD BE UNIQUE
	OI	R15,1^1F	:SIGN BIT INDICATES LPERM ENTRY
	JAL	LINK,LWRITE	:ADD LPERM ENTRY FOR NEEDLE TO LOGIN LIST
	LM	R12,ASTEMP	:RESTORE ARGS TO ASBUFF
	J	DLL8A		:ENTER T1 CIRCUIT BUILDING LOOP

		:T-I NODE REQUESTED DLL

DLL7	LH	C1,H8		:CHECK ENTRY POINT
	JE	DLL7A		:AUX CIRCUIT

		:TERMINAL CIRCUIT - ASSIGN CHANNEL IN REMOTE,
		:CREATE TYPE 2'S & SAVE TYPE 2'S ON LOGIN LIST
	JAL	LINK,ASCHAN	:ASSIGN CHANNEL IN REMOTE
	STM	R12,ASTEMP	:SAVE FOR ASBUFF LATER
	LHL	R14,LOGID	:NODE # OF REMOTE
	OHI	R14,2000	:TYP 2 - PERM CHANGE
	EXHR	R14,R14
	OR	R14,C1		:PACK SR1 & SR2 IN 1 WORD
	LR	R15,C2		:SR3
	NI	R15,0FFFF	:INSURE POSITIVE
	LIS	R13,LLPSWD	:ADD TO SUBLIST
	JAL	LINK,LWRITE
	L	R14,LOGID	:SETUP LPERM ENTRY
	LR	R15,C2		:SR3
	OI	R15,1^1F	:FLAG AS LPERM ENTRY
	LIS	R13,LLUUN	:ADD TO SUBLIST
	JAL	LINK,LWRITE
	LIS	R13,LLHOST	:START ADDING ADD'L INFO TO LIST HERE
	STH	R13,TEMP
	LM	R12,ASTEMP	:RESTORE PARAMS FOR ASBUFF
	CLHI	R14,T2BN	:IS NEXT NODE T2
	JL	DLL8A		:NO - ENTER T1 CIRCUIT BUILDING LOOP

	J	DLL8C		:BUILD A NEEDLE

		:AUX CIRCUIT - ADD TYPE 5'S TO SOURCE NODE TO LOGIN LIST

DLL7A	LIS	C3,0
	STH	C3,IIXFLG	:INSURE IIXFLG SHOWS NOT IIX CIRCUIT
	LIS	C3,LLPSWD	:HAVE AUXC10 ADD TYPE FIVES STARTING AT LLPSWD
	JAL	LINK,AUXC10	:PLACE TYP5 SUB'S 12 & 5 ON LOGIN LIST
	LIS	R15,LLHOST	:ADD ADDITIONAL INFO HERE
	STH	R15,TEMP
	LHL	R15,LOGID	:SOURCE NODE #
	JAL	LINK,ASCHAN	:ASSIGN A CHANNEL
	NHI	C2,0FFFE	:EVEN BUF # (KLUDGE TO NOT CONFUSE BASE)
	CLHI	R14,T2BN	:IS NEW NODE T2
	JGEFS	DLL8B		:YES - START BUILDING NEEDLE

DLL8	:CIRCUIT BUILDING LOOP
	JAL	LINK,PLACE	:ADD TO LCOM & LPERM LISTS

DLL8A	JAL	LINK,ASBUFF	:ASSIGN PASSTHRU BUFFER IN NEXT NODE
	J	DLL9		:AT END OF CIRCUIT

	JAL	LINK,PLACE	:ADD TO LCOM & LPERM LISTS
	JAL	LINK,ASCHAN	:ASSIGN CHANNEL OUT OF THIS NODE
	CLHI	R14,T2BN	:IS NEXT NODE T-II
	JLBS	DLL8		:NO - LOOP

DLL8B	JAL	LINK,PLACE	:ADD TO LCOM & LPERM LISTS

DLL8C	JAL	LINK,CIR1T2	:START BUILDING NEEDLE
	HC	0,0		:CIRCUIT COMPLETE - FATAL ERROR

	J	DLL8A		:CONTINUE BUILDING IN T-I

	:END OF CIRCUIT BUILDING LOOP
	:PUT TYPE 3 SUB F TO DESTINATION NODE ON LOGIN LIST

DLL9	LHI	R13,3000,R15	:SEND TYP 3 TO DEST NODE
	LI	R14,800F	:SUBTYP 0F (DOWN LINE LOAD)
	LHL	T1,H3		:CHECK IF THIS IS DIAL OUT
	SHI	T1,$A199
	JEFS	DLL9A

	LI	R14,800D	:SUBTYPE 0D (DIAL OUT)

DLL9A	LR	R15,C1		:LINE # & PERM TABLE POSITION
	EXHR	R13,R13
	OR	R14,R13		:PACK SUP COMMAND TO SAVE IN LCOM
	LHL	R13,TEMP	:POSITION TO ADD INFO
	JAL	LINK,LWRITE
	LHL	R15,H1		:DEST NODE #
	JAL	LINK,PLACE	:SEND PERM TABLE CHANGE TO DEST NODE

	:CIRCUIT BUILDING COMPLETE & LOGIN NOW IN STATE 5
	:UPDATE LOGIN LIST STATE, TIMEOUT & SAVE THREAD HEAD & TIME IN LLFLAG
	LHI	R15,40		:SET 64 SECOND NEW TIMEOUT
	JAL	LINK,LOG5UP	:UPDATE LOGIN ENTRY
	LH	T1,H8		:CHECK ENTRY POINT
	JE	MUDRET		:RETURN TO DISK HANDLER

	J	IND,,		:RETURN TO INPUT DISPATCHER

:  CAN'T BUILD CIRCUIT

DLL10	LH	T1,H8		:CHECK ENTRY POINT
	JN	DLL11		:SEND MSG TO TERMINAL

	:AUX CIRCUIT
	LHL	R15,LOGID	:SOURCE NODE
	JAL	LINK,NODGET	:GET PTR TO NODE DESC
	HC	0,0		:IT WAS THERE A MOMENT AGO

	LHL	R13,SRCBUF	:SOURCE BUFFER
	SRLS	R13,1		:SOURCE PORT
	JAL	LINK,ZAPR	:RELEASE PORT
	HC	0,0		:CRASH - ASSIGNED INVALID T-I PORT!

DLLERR	LH	T1,H8		:CHECK ENTRY POINT
	JNFS	DLL11		:SEND MSG TO TERMINAL

	LIS	C1,5		:RETURN ERROR # 5
	JAL	LINK,AUXEM	:SEND TYP 5 TO BASE
	J	MUDRET		:RETURN TO DISK QUEUE HANDLER

	:TERMINAL CIRCUIT

DLL11	LA	R15,DIALFAIL,,	:SEND FAILURE MSG
	JAL	LINK,TLKLOG
	J	CIRC9		:REINITIALIZE LOGIN

:  BUILD INTERNAL CIRCUIT

DLLINT	 STH C3,ASTEMP+0A	:SAVE NODE # FOR ASBSUB (J DLL10 TO DISABLE)
	STH	C3,H1		:SAVE NODE #
	LR	C3,R14		:POINTER TO NODE DESCRIPTOR FOR ASBSUB
	JAL	LINK,ASBSUB	:ASSIGN PASSTHROUGH BUFFER #
	LHL	T1,H2		:DEST BUFFER #
	STH	T1,H7		:SAVE FOR ACTCR
	LHL	R15,H1		:RECOVER NODE #
	JAL	LINK,FIPT	:MAKE R15 ADDRESS INTERNAL PERM TABLE,
	STH	R14,H5		:LINE # POSITIONED FOR TYPE 2
	:SEARCH FOR AVAILABLE INTERNAL PERM ENTRY
	LCS	T2,1		:-1 IS AVAILABLE ENTRY
	LHI	C2,0C		:USE LAST 6 PERM ENTRY PAIRS

DLLI01	CL	T2,8,R15	:CHECK PAIR
	JEFS	DLLI03		:PAIR AVAILABLE

DLLI02	AIS	R15,4		:INCREMENT TO NEXT ENTRY
	SIS	C2,2		:DECREMENT COUNT
	JNBS	DLLI01		:CONTINUE SEARCH IF MORE

	J	DLL10		:NO AVAILABLE ENTRIES

	:FOUND A PAIR

DLLI03	LHL	T1,SRCBUF	:SOURCE BUFFER #
	STH	T1,8,R15	:MAKE PERM TABLE ENTRY
	LHL	T1,H7		:DESTINATION BUFFER
	STH	T1,0A,R15	:MAKE PERM TABLE ENTRY
	LHI	C3,10
	SR	C3,C2		:THIS IS CHANNEL #
	STH	C3,H2		:CHANNEL # FOR INTERNAL PERM
	LHL	R15,STOUT	:TIMEOUT ITEM #
	JAL	LINK,TREMOVE	:REMOVE IT
	LH	T1,H8		:WAS THIS AUX CIRCUIT?
	JEFS	DLLI04		:YES

	JAL	LINK,ACTCR	:SEND SESSION # TO BASE & ACCOUNTING FILE
	:SEND TYPE 2'S

DLLI04	LHL	R13,H1		:DEST BASE
	OHI	R13,2000	:TYPE 2 MESSAGE
	LHL	R14,H2		:CHANNEL #
	OH	R14,H5		:LINE # OF INTERNAL PERM TABLE
	LHL	R15,H7		:DEST BUFFER #
	JAL	LINK,CAPPEND	:ADD TO COMMAND LIST
	AIS	R14,1		:CHANNEL # FOR 2ND INTERNAL PERM CHANGE
	LHL	R15,SRCBUF	:SOURCE BUFFER #
	LH	T1,H8		:IS THIS A GATEWAY/TERMINAL CIRCUIT?
	JEFS	DLLI07		:NO

	OHI	R15,1		:MAKE SURE ODD BUFFER # FOR TERMINAL INTERNAL

DLLI07	JAL	LINK,CAPPEND	:ADD TO COMMAND LIST
	LH	T1,H8		:IS THIS AUX CIRCUIT?
	JN	DLLI05		:NO, SEND TYPE 3 ONLY

	:SEND 5 SUB 12 TO SOURCE BASE
	LHL	R13,LOGID	:SOURCE BASE #
	OHI	R13,5000	:TYPE 5 MESSAGE
	LHL	R14,SRCBUF	:SOURCE BUFFER #
	SRLS	R14,1		:SOURCE PORT #
	OH	R14,H6		:PREPOSITIONED PORT ARRAY # OF HOST IN BASE
	LHL	R15,LOGID+2	:BUF # OF REQUEST
	SRLS	R15,1		:PORT # OF REQUEST
	LR	C1,R15
	OHI	R15,0A00	:SUBTYPE 12
	JAL	LINK,CAPPEND	:SEND IT
	:SEND 5 SUB 5 TO SOURCE BASE
	LR	R14,C1		:PORT # OF REQUEST
	OH	R14,H6		:PREPOSITIONED PORT ARRAY # OF HOST IN BASE
	OI	R14,8000	:SET SIGN BIT
	LHI	R15,0500	:SUBTYPE 5 ALL OK
	JAL	LINK,CAPPEND	:SEND IT
	:SEND TYPE 3 MESSAGE

DLLI05	LHL	R13,H1		:DESTINATION NODE #
	OHI	R13,3000	:TYPE 3 MESSAGE
	LHI	R14,800F	:SUBTYPE F (DLL)
	LHL	T1,H3
	SHI	T1,$A199	:WAS IT DLL?
	JEFS	DLLI06		:YES

	LHI	R14,800D	:SUBTYPE 0D (DIAL OUT)

DLLI06	LHL	R15,H2		:CHANNEL # FOR INTERNAL PERM DEST
	OH	R15,H5		:LINE # OF INTERNAL PERM TABLE
	JAL	LINK,CAPPEND	:SEND TYPE 3
	JAL	LINK,LDELETE	:DELETE LOGIN ENTRY
	L	C2,LOGID
	JAL	LINK,LCHSUB	:STOP MONITORING THIS LOGID IF MONITORING IT
	LIS	T1,1
	AM	T1,INTCNT	:INCREMENT INTERNAL CIRCUITS BUILT
	LHL	T2,LOGID	:RECOVER NODE #
	NMAP(T2)
	AHM	T1,TLGSCL,T2,T2 :COUNT LOGIN SESSIONS CLOSED
	LH	T1,H8		:WAS THIS AN AUX CIRCUIT
	JN	IND,,		:NO

	JAL	LINK,AUXDON	:AUX CIRCUIT DONE
	J	MUDRET		:RETURN TO DISK HANDLER

	EI



	SUBTTL	LGCGEN - AUX CIRCUIT PERIODIC AND ERROR LOGIC



:*******************************************************:
:							:
: SUBROUTINE TO SEE IF SHOULD START ANOTHER AUX CIRCUIT	:
:							:
:*******************************************************:
:    SEE COMMENT AT "HOSTOT".				:
:*******************************************************:

CKAUX	LHL	T1,SUPREC	:NUMBER OF AUX REQUESTS IN PROGRESS
	CLHI	T1,AUXMAX	:MAY ANY MORE REQUESTS BECOME ACTIVE
	JGER	LINK		:NO - RETURN

	LH	T1,ST03CT	:CHECK TAKEOVER ACTIVITY
	JGEFS	CKAUX3

	STM	R0,NEGS03,,
	JAL	LINK,S03ERR,,
	LM	R0,NEGS03,,

CKAUX3	CLHI	T1,NOLOGIN	:IS THERE TOO MUCH ACTIVITY
	JGR	LINK		:YES - DO NOT START AUX CIRCUIT

	LHL	T1,NFREE	:CHECK IF ENOUGH B'LETS TO PROCEED
	CLHI	T1,$A250
	JLR	LINK		:NOT ENOUGH

	LR	C2,LINK		:YES - SAVE LINK
	JAL	LINK,ANEXT	:GET NEXT REQUEST FOR AUX LOGIN
	J	,C2		:NO REQUESTS WAITING

	:REQUESTS WERE PENDING - ANEXT PROVIDES THE FOLLOWING
	: <R13> = NODE #, <R14> = PSEUDO PORT #, <C6> = REQUESTING HOST
	:C6 IS UTILIZED BY LAPPEND CALL FROM LOGNEW
	EXHR	T2,R13		:PUT NODE # IN LEFT HALF OF REG
	LR	T1,R14		:PORT #
	AR	T1,T1		:BUFF #
	OHI	T2,1,T1		:MAKE LOGID WITH ODD BUFF #
	ST	T2,LOGID
	LIS	T2,1
	AHM	T2,SUPREC	:SHOW ONE MORE AUX LOGIN IN PROGRESS
	LIS	T2,0
	STH	T2,SR3		:MAKE TERMINAL ID ZERO
	IF	1-NOTI
	CLHI	R13,T2BN	:IS THIS T-II NODE
	JGEFS	CKAUX2		:YES

	:T-I NODE, SEND TYPE 5 TO GET LOGIN STRING
	OHI	R13,5000	:MAKE TYP 5 MSG
	AR	T1,T1		:BUFF # *2
	NHI	T1,100		:HOST POSITION IN DUAL BASE
	OR	R14,T1		:HOST POSITION & PORT # (LET CHARS FLOW)
	LHI	R15,500		:SUBTYPE 5
	JAL	LINK,CAPPEND	:ADD TO COMMAND LIST
	JFS	CKAUX1

	EI

CKAUX2	LIS	T1,6
	STH	T1,CBUF-2	:SET SUP MSG LENGTH
	STH	R13,CBUF	:STORE NODE # IN SUP MSG
	LHI	T1,0E80		:MSG TYP AND FLAGS
	STH	T1,CBUF+2
	STH	R14,CBUF+4	:PORT #
	JAL	LINK,C2APPEND	:ADD TO LCOM

CKAUX1	LA	R14,TIMOT3	:TIME OUT ADDR FOR AUX LOGIN
	LHI	R15,10		:TIME
	JAL	LINK,TAPPEND	:ADD TO TIMEOUT LIST
	JAL	LINK,LOGNEW	:TIMOUT ITEM # IN R15 - START NEW LOGIN
	JR	C2		:RETURN




:*******************************************************:
:							:
:	SUBROUTINE TO TERMINATE N AUX CIRCUIT REQUEST	:
:		AND TO TRY TO START ANOTHER		:
:							:
:*******************************************************:

AUXDON	LR	C4,LINK		:SAVE LINK
	L	R15,LOGID
	SRHLS	R15,1		:SCAN FOR THIS NODE & PORT ON ACTIVE AUX LIST
	JAL	LINK,ADONE	:REMOVE THIS ENTRY FROM AUX LOGIN LIST
	JAL	LINK,CKAUX	:CHECK IF NEW AUX CIRCUIT CAN START NOW
	JR	C4		:RETURN



:*******************************************************:
:							:
:	ROUTINES TO HANDLE AUX ERRORS			:
:							:
:*******************************************************:

:  ERROR IN AUX CIRCUIT LOGIN - SEND ERROR MSG TO NODE,
:  TERMINATE CIRCUIT REQUEST AND RETURN TO INPUT DISPATCHER.

AUXERR	JAL	LINK,AUXEM	:SEND ERROR MSG FOR AUX CIRCUIT
	J	IND,,		:RETURN TO INPUT DISPATCHER


:  SEND AN ERROR MSG FOR AUX CIRCUIT LOGIN - ERROR # IN C1
:  ERRORS -
:	1  FORMAT ERROR
:	2  BAD USER NAME
:	3  BAD MUD
:	4  SYSTEM UNAVAILABLE
:	5  DOWN LINE LOAD OR DIAL OUT REQUEST FAILURE
:	6  TIMEOUT
:	7  ACCESS BARRED
:	8  RESERVED FOR INTERNAL ISIS USE
:	9  REQUEST REJECTED - QUEUE TOO LONG
:	A  INVALID REQUESTING HOST NUMBER
:	B  REQUESTING HOST NOT UP ON NODE

AUXEM	LR	C3,LINK		:SAVE LINK
	CLHI	C1,6		:IS THIS ERROR A TIMEOUT
	JEFS	AUXEM0		:YES - SKIP TIMEOUT REMOVAL

	LIS	R13,LLTOP	:READ TOP LEVEL LOGIN ENTRY
	JAL	LINK,LREAD
	LR	R15,R14		:TIMEOUT ITEM #
	JAL	LINK,TREMOVE

		:COUNT ERROR TYPES & RECORD LAST INSTANCE.
		:IF BAD USER NAME, RECORD DATA IN RING BUFFER &
		:TELL LOG.

AUXEM0	LIS	R13,LLCIR
	JAL	LINK,LREAD	:GET REQUESTING HOST IF ANY
	CHVR	R14,R14		:ISOLATE IT
	L	R15,LOGID	:GET LOGID
	LR	R11,C1		:ERROR #
	SLLS	R11,3		:INDEX HISTORY TABLE
	LIS	R13,1
	AHM	R13,AUXEMH-8,R11, :BUMP COUNT FOR THIS TYPE ERROR
	STH	R14,AUXEMH-8+2,R11, :REMEMBER REQUESTING HOST
	ST	R15,AUXEMH-8+4,R11, :AND LOGID
	CLHI	C1,2		:WAS THIS A BAD USER NAME?
	JN	AUXEM1		:NO, NO LOG REPORT

		:BAD USERNAME ON AUX CIRCUIT - REPORT TO LOG
	OI	R14,0B^18	:INCLUDE SUBTYPE - BAD USER NAME ON AUX CIRCUIT
	LHL	R13,BNPHIX,,	:HISTORY INDEX
	AIS	R13,8		:NEXT SLOT
	NHI	R13,BNPHSZ-8	:WRAP IF NECESSARY
	STH	R13,BNPHIX,,	:UPDATE INDEX
	STM	R14,BNPHST,R13,	:SAVE DATA IN HISTORY RING
	LHI	R13,EM0280	:ERRLOG ERROR # FOR LOGIN ERROR
	JAL	LINK,ERRFIL,,	:REPORT TO LOG

AUXEM1	LHL	R13,LOGID	:NODE #
	IF	1-NOTI
	CLHI	R13,T2BN	:IS IT T-II NODE
	JGE	AUXEM4		:YES

	OHI	R13,5000	:TYP 5 MSG
	LHL	R14,LOGID+2	:BUFF #
	LR	T1,R14
	SRLS	R14,1		:PORT #
	OHI	R14,8000	:SET SIGN BIT (INHIBIT CHAR FLOW)
	AR	T1,T1		:BUFF # * 2 (SET HOST # FOR DUAL BASE ONLY)
	NHI	T1,100		:HOST # (0, 1) POSITIONED FOR TYP 5 MSG
	OR	R14,T1		:PLACE IN MSG
	LR	R15,C1		:ERROR #
	OHI	R15,500		:SUBTYP 5
	JAL	LINK,CAPPEND	:ADD TO COMMAND LIST
	EI

AUXEM2	JAL	LINK,LFLGRD	:READ LLFLAG
	L	C2,LOGID	:GET FOR LATER
	NI	R14,@STATM	:ISOLATE STATE #
	CLI	R14,LSWACK^STATP :WAS IT IN A WAIT STATE?
	JL	AUXEM3		:NO

	JEFS	AUXEM5		:IT WAS IN STATE 5.

	IF	DSKMUD
	CLI	R14,LSWMUD^STATP :WAS IT WAITING FOR MUD READ?
	JNFS	AUXEM3		:NO

	LR	R15,C2		:LOGID
	JAL	LINK,DSREM	:REMOVE PENDING MUD READ
	EI
	JFS	AUXEM3

	IF	NOTI

AUXEM5	HC	0,0		:INCONSISTENT - NO STATE 5 FOR ALL TII

	ELSE

AUXEM5	EXHR	R15,R15		:POSITION PHEAD
	NI	R15,0FFFF	:EXTRACT
	JAL	LINK,PSUBDEL	:REMOVE PERM ACKS PENDING FOR THIS LOGID
	EI

AUXEM3	JAL	LINK,LDELETE	:REMOVE LOGIN LIST ENTRY
	JAL	LINK,LCHSUB	:STOP MONITORING THIS LOGID IF MONITORING IT
	LIS	T1,1
	LHL	T2,LOGID	:GET NODE #
	NMAP(T2)
	AHM	T1,TLGSCL,T2,T2 :COUNT TOTAL LOGIN SESSIONS TERMINATED
	AHM	T1,TALGSC,T2,T2 :COUNT ABNORMAL SESSION TERMINATIONS
	JAL	LINK,AUXDON	:REMOVE AUX REQUEST FROM LIST
	JR	C3		:RETURN

	:T-II NODE

AUXEM4	LI	R14,60000,R13	:MESSAGE SIZE, NODE #
	LHI	T1,0E80,C1	:MESSAGE TYPE & ERROR #
	EXHR	T1,T1		:POSTITION
	LHL	R15,LOGID+2	:BUFFER #
	SRLS	R15,1		:PORT #
	OR	R15,T1		:COMPOSE MSG
	STM	R14,CBUF-2	:PUT IN CBUF
	JAL	LINK,C2APPEND	:ADD TO LCOM
	J	AUXEM2



::
:
	SUBTTL CIRCUIT BUILDING ACKNOWLEDGEMENT & TIMEOUT PROCESSING

:THIS PROGRAM IS THE SOLE PROPERTY AND CONFIDENTIAL INFORMATION OF
:TYMSHARE INC., AND MAY NOT BE COPIED IN WHOLE OR IN PART OR
:DISCLOSED TO ANY THIRD PARTY WITHOUT THE PRIOR WRITTEN CONSENT OF
:TYMSHARE.


	:PROCESS LOGIN RELATED ACKNOWLEDGEMENTS
	:AND LOGIN TIMEOUT


	IF	1-NOTI

:  PROCESS PERMUTER TABLE CHANGE RESPONSE FROM T-I NODE (PRPERM),
:OR T-II NEEDLE OR CHANNEL RESERVE ACK FROM T-II (PRAKII).

PRAKII	LHL	R13,CBUF	:T-II NODE #
	LHL	R14,CBUF+6	:LOW ORDER 16 BITS OF INVOICE IS IDENTIFIER
	JFS	PRAK01		:PROCESS RESPONSE

PRPERM	LHL	R13,SR1		:NODE #
	LHL	R14,SR3		:PERMUTER TABLE VALUE

PRAK01	JAL	LINK,PREMOVE	:REMOVE THIS ENTRY ON LPERM LIST-
				:IF LAST ENTRY - SET R15=LOGID & SKIP RTN
	J	PPERMR		:NOT LAST ENTRY FOR THIS CIRCUIT -

				:OR NOT FOUND - RETURN TO INPUT DISPATCHER
	:!!!BUG - IF TARGET NODE FOR A NEEDLE IS NOT IN NET, CAN
	:GET A CRASH IN C2APPEND....FIND A FIX.
	:!!!CONSIDER B.S. REGARDING NEEDLE ACK FROM FINAL TARGET...
	:LAST LPERM ENTRY REMOVED, SEND OUT COMMANDS FOR
	:ENDS OF CIRCUIT AS DESIGNATED BY LOGIN LIST ENTRIES.
	:COMMANDS TERMINATED EITHER BY ENCOUNTERING AN
	:LPERM ENTRY (TO REMOTE), OR THE END OF THE LOGIN LIST.  IF
	:THE END OF THE LIST IS ENCOUNTERED, THEN ALL LPERM CHANGES HAVE
	:BEEN ACKNOWLEDGED (IN PARTICULAR, USUALLY THE LAST ONE TO THE
	:REMOTE) AND THE LOGIN IS COMPLETE.
	:COMMANDS ARE PACKED ON THE LOGIN LIST AN INTEGRAL
	:# B'LETS / COMMAND.  THE COMANDS START IN LLPSWD, AND ARE
	:OF 3 KINDS - T-II LEP MESSAGE, T-I LEP MESSAGE,
	:OR AN ENTRY FOR THE LPERM LIST.  T-II MESSAGES ARE
	:DISTINGUISHED BY THE PRESENCE OF THE SIGN BIT ON FIRST WORD OF LLPSWD.
	:T-I MESSAGES ARE PACKED SR1, SR2,0,SR3, AND HAVE NO SIGN
	:BITS ON FOR EITHER WORD.  THE LPERM ENTRY HAS THE SIGN BIT
	:SET ON SECOND WORD AND IS PACKED AS NODE #,0,FFFF,VALUE.
	JAL	LINK,LSCAN	:FIND LOGIN ENTRY
	J	KRASAY		:CRASH - LOGIN-LPERM CLEANUP FAILURE

	LR	C1,R12		:SAVE TIMEOUT ITEM #
	LR	C2,R13		:SAVE LOGID
	ST	R13,LOGID	:SAVE AGAIN FOR USE BY AUXDON
	LR	C3,R14		:SAVE TID


	  :LOOP TO REMOVE & SEND REMAINING LOGIN LIST COMMANDS

PPERM1	LIS	R13,LLPSWD	:READ LLPSWD
	JAL	LINK,LREAD
	LR	R15,R15		:IF NEGATIVE THIS IS AN LPERM ENTRY
	JL	PPERM3

	LR	R14,R14		:IS IT A NEEDLE
	JL	PPERM4		:YES

		:ENTRY IS A T-I SUP MESSAGE
	EXHR	R13,R14		:UNPACK SR1 & SR2
	JAL	LINK,CAPPEND	:ADD TO COMMAND LIST (SR3 WAS UNPACKED IN R15)
	LIS	R14,LLPSWD	:DELETE LLPSWD ONLY
	LIS	R15,LLPSWD
	JAL	LINK,LSUBDEL
	J	PPERM2		:LAST ENTRY OF SUBLIST WAS DELETED

	J	PPERM1		:CHECK NEXT ENTRY IN LOGIN SUBLIST

		:LAST LOGIN LIST COMMAND DELETED - LOGIN COMPLETE
		:RECORD TIME & CLEANUP

PPERM2	LR	R15,C1		:TIMEOUT ITEM #
	JAL	LINK,TREMOVE	:REMOVE TIMEOUT ENTRY
	JAL	LINK,LFLGRD	:READ LLFLAG
	L	T1,FASTC,,	:CURRENT FASTC TIME
	SRLS	T1,1		:EXTEND 1/2 WORD RANGE
	SR	T1,R15		:# OF FASTC TICKS/2 FOR THIS CIRCUIT BUILD
	NI	T1,0FFFF	:ONLY DOING 1/2 WORD COMPUTATION
	AM	T1,CIRTIM	:RUNNING TOTAL
	CLH	T1,MXCRTM	:IS IT NEW MAX
	JLEFS	PPERM0		:NO

	STH	T1,MXCRTM	:SAVE NEW MAX

PPERM0	JAL	LINK,LDELETE	:REMOVE LOGIN ENTRY
	LIS	T1,1
	AHM	T1,CIRCNT	:INCR COUNT OF CIRCUIT TIMES
	EXHR	T2,C2		:RIGHT JUSTIFY REQUESTING NODE # (LOGID IN C2)
	CHVR	T2,T2		:ISOLATE SAME
	NMAP(T2)
	AHM	T1,TLGSCL,T2,T2 :COUNT LOGIN SESSIONS TERMINATED
	JAL	LINK,LCHSUB	:STOP MONITORING THIS LOGID IF MONITORING IT
	NI	C3,@TIDM	:IS IT AN AUX CIRCUIT
	JN	IND,,		:NO - RETURN TO INPUT DISPATCHER

	JAL	LINK,AUXDON	:IT WAS AN AUX CIRCUIT - SHOW DONE
	J	IND,,		:RETURN TO INPUT DISPATCHER

		:LOGIN LIST ENTRY IS AN LPERM ENTRY
		:(FOR PREVIOUS LEP LPERM COMMAND)
		:APPEND TO PERMUTER RESPONSE LIST, CLEAN UP & RTN TO IND

PPERM3	LIS	T1,0
	ST	T1,PBAPP	:TELL PAPPEND START OF NEW THREAD
	NI	R15,7FFFFFFF	:CLEAR SIGN BIT
	EXHR	R13,R14		:RIGHT JUSTIFY NODE #
	JAL	LINK,PAPPEND	:ADD TO LPERM LIST
	LIS	R14,LLPSWD	:DELETE LLPSWD ONLY
	LIS	R15,LLPSWD
	JAL	LINK,LSUBDEL
	NOP
	JAL	LINK,LP5UP	:UPDATE LOGIN LIST FOR THIS LPERM ENTRY

PPERMR	J	IND,,		:RETURN TO INPUT DISPATCHER


		:REMOVE NEEDLE FROM LOGIN LIST & PLACE ON LCOM

PPERM4	EXHR	C4,R14		:RIGHT JUSTIFY NEEDLE LENGTH
	NHI	C4,7FFF		:ISOLATE SAME
	CLHI	C4,MXNEEDLE	:IS NEEDLE TOO BIG
	JLEFS	PPERM8

	J	K2RAAE		:YES - FATAL ERROR

PPERM8	AIS	C4,2		:THIS MANY BYTES INCLUDING COUNT
	LIS	C5,LLPSWD	:B'LET POSITION IN LOGIN SUBLIST
	NI	R14,7FFFFFFF	:CLEAR SIGN BIT
	LCS	C6,2		:INDEX INTO CBUF
	JFS	PPERM6

PPERM5	AIS	C5,1		:INCR B'LET POSITION IN LOGIN SUBLIST
	LR	R13,C5		:READ THIS B'LET
	JAL	LINK,LREAD

PPERM6	STM	R14,CBUF,C6	:STORE NEEDLE IN CBUF
	AIS	C6,8		:INCR INDEX INTO CBUF
	SIS	C4,8		:DECR COUNT OF BYTES TO BE COPIED
	JGBS	PPERM5		:MORE BYTES TO COPY

	JAL	LINK,C2APPEND	:ADD NEEDLE TO COMMAND LIST
	LIS	R14,LLPSWD	:DELETE ALL B'LETS USED FOR NEEDLE
	LR	R15,C5		:THIS IS LAST B'LET IN NEEDLE
	JAL	LINK,LSUBDEL
	J	PPERM2		:LAST ENTRY OF SUBLIST WAS DELETED

	J	PPERM1		:CHECK NEXT ENTRY ON LOGIN SUBLIST

	EI

:  LOGIN TIME OUT
:R13 CONTAINS B'LET FOR AX0, R15 THE TIMEOUT ITEM #

TIMOUT	LIS	T1,1		:INCR # OF TIMEOUTS
	AHM	T1,LTOUT,,
	LR	C2,R15		:SAVE TIMEOUT ITEM #
	LI	R14,TIMOT2-BSUP	:SET A TIMEOUT TO THIS RELATIVE ADDR
	EXHR	R15,R13		:THIS IS AX0 - FOR NEW TIMEOUT ENTRY
	OR	R14,R13		:INCLUDE WITH RELATIVE ADDRESS AS DATA
	LIS	R15,1		:VERY SHORT (JUST ESTABLISH ENTRY)
	JAL	LINK,TAPPEND
	LR	C1,R15		:SAVE NEW TIMEOUT ITEM #
	LR	R15,C2		:OLD TIMEOUT ITEM #
	JAL	LINK,LSCANI	:SCAN LOGIN LIST BY AX0 & ITEM # IN R15
	J	KRASAZ		:NOT FOUND

	ST	R13,LOGID	:THIS IS LOGID
	ST	R13,OLDLOG,,	:SAVE FOR DEBUGGING
	NI	R14,@STATM	:MASK OUT ALL BUT STATE BITS
	CLI	R14,LSWACK^STATP :CHECK IF WAITING FOR ACKS
	JNFS	TIMOTA

	ST	R13,OLDLOG+8,,	:REMEMBER LAST CIRCUIT TIMEOUT LOGID
	LIS	T1,1		:INC # TIMEOUTS STATE 5
	AHM	T1,LTOUT2,,	

TIMOTA	L	R15,LOGID	:CHANGE TOP LEVEL B'LET
	LR	R14,C1		:NEW TIMEOUT ITEM #
	LIS	R13,LLTOP	:INDICATE TOP LEVEL B'LET
	JAL	LINK,LWRITE
	LA	C3,LMES1,,	:"SEE YOUR REP..."
	JAL	LINK,ESCAP3	:SET STATE TO 6, SEND MSG & CLEAN UP LOGIN ENTRY
	J	PTL,,		:RETURN TO TIMEOUT PROCESSOR

:  SECOND TIMEOUT OF LOGIN
:  <R13> IS B'LET # OF AX0 AND <R15> IS TIMEOUT ITEM #

TIMOT2	JAL	LINK,LSCANI	:SCAN LOGIN LIST BY TIMEOUT ITEM # IN R15
	J	KRASA0		:NOT FOUND

	LR	C2,R13		:SAVE LOGID
	JAL	LINK,LDELETE	:REMOVE ENTRY FROM LOGIN LIST
	LIS	T1,1
	EXHR	T2,C2		:POSITION NODE #
	CHVR	T2,T2		:ISOLATE SAME
	NMAP(T2)
	AHM	T1,TLGSCL,T2,T2 :COUNT LOGIN SESSIONS TERMINATED
	AHM	T1,TALGSC,T2,T2 :COUNT SESSIONS ABNORMALLY TERMINATED
	JAL	LINK,LCHSUB	:STOP MONITORING THIS LOGID IF MONITORING IT
	IF	DSKMUD
	LR	R15,C2		:LOGID
	JAL	LINK,DSREM	:REMOVE ANY PENDING MUD READ FOR THIS LOGIN
	EI
	J	PTL,,		:RETURN TO TIMEOUT PROCESSOR

:  AUX CIRCUIT TIMEOUT
:<R13> IS AX0 AND <R15> IS ITEM #

TIMOT3	LIS	T1,1		:INCR # OF AUX CIRCUIT TIMEOUTS
	AHM	T1,LTOUT+2,,
	JAL	LINK,LSCANI	:SCAN LOGIN LIST BY TIMEOUT ITEM # IN R15
	J	KRASA1		:NOT FOUND

	ST	R13,LOGID	:SET UP LOGID FOR AUXEM
	ST	R13,OLDLOG+4,,	:SAVE FOR DEBUGGING
	NI	R14,@STATM	:MASK OUT ALL BUT STATE BITS
	CLI	R14,LSWACK^STATP :CHECK IF WAITING FOR ACKNOWLEDGEMENTS
	JNFS	TIMO3A

	ST	R13,OLDLOG+0C,,	:REMEMBER LAST CIRCUIT TIMEOUT LOGID
	LIS	T1,1
	AHM	T1,LTOUT2+2,,	:INCEMENT # TIMEOUTS STATE 5

TIMO3A	LIS	C1,6		:GIVE ERROR RETURN 6 FOR TIMEOUT
	JAL	LINK,AUXEM	:SEND ERROR RETURN TO BASE
	J	PTL,,		:RETURN TO TIMEOUT PROCESSOR


:

::
:
	SUBTTL LOGIN SUBROUTINES RELATED TO RESOURCE ALLOCATION

:THIS PROGRAM IS THE SOLE PROPERTY AND CONFIDENTIAL INFORMATION OF
:TYMSHARE INC., AND MAY NOT BE COPIED IN WHOLE OR IN PART OR
:DISCLOSED TO ANY THIRD PARTY WITHOUT THE PRIOR WRITTEN CONSENT OF
:TYMSHARE.


:		LOGIN RELATED SUBROUTINES

	IF	1-NOTI
:  SUBROUTINE TO SEND LOGIN INFO TO T-I DEST BASE
:	H2	SOURCE BUF #
:	H1	DEST BASE #
:	H7	DEST BUF #
:	LOGID, LAST REFERENCED ENTRY ON LOGIN LIST
:   USES C1, C2, C3, C4, C5, C6

CIRCC	ST	LINK,CILINK
	LHL	R13,H1		:DEST BASE #
	OHI	R13,3000	:SEND TYP 3 SUB 4 TO CLEAR BUFFER
	LHI	R14,8004	:SET SUBTYPE 4
	LHL	R15,H7		:DEST BUFF #
	JAL	LINK,CAPPEND	:ADD TO COMMAND LIST
	LHL	R14,H1		:DEST BASE #
	JAL	LINK,TLKSET	:SET UP FOR TYPE 1 MSGS TO BASE
	JAL	LINK,LFLGRD	:GET LLFLAG
	LR	C3,R14
	LR	C2,R15		:PTR'S TO END OF USER NAME & PSWD
	EXHR	R15,R14		:RIGHT JUSTIFY TID & HALF DUPLEX BIT
	NHI	R15,@(TIDM&DUPLXM)^-TIDP :ISOLATE SAME
	LR	T1,R15
	NHI	T1,@TIDM^-TIDP	:ISOLATE ONLY TID
	SIS	T1,$816		:IF OCTAL 16 THIS IS LIKE AN AUX CIRCUIT
	JNFS	CIRCC0

	NHI	R15,@DUPLXM^-TIDP :CLEAR TID - MAKE LIKE AUX CIRCUIT

CIRCC0	OHI	R15,0C0		:MARK CHAR
	JAL	LINK,TLK1CH	:SEND THIS CHAR
	LHL	R15,LOGID	:NODE # OF SOURCE
	SRLS	R15,6		:SEND 1/2 NODE #
	OHI	R15,0C0		:MARK CHAR
	JAL	LINK,TLK1CH	:SEND THIS CHAR
	LHL	R15,LOGID	:NODE # OF SOURCE
	NHI	R15,3F		:SECOND HALF OF NODE #
	OHI	R15,0C0		:MARK CHAR
	JAL	LINK,TLK1CH	:SEND THIS CHAR
	LB	R15,H2+1	:LOW BYTE OF SOURCE BUF #
	SRLS	R15,1		:SOURCE PORT #
	OHI	R15,80		:MARK CHAR
	JAL	LINK,TLK1CH	:SEND CHAR
	LR	T1,C3		:WORD 1 OF LLFLAG
	TI	T1,@TGM		:IS THIS A TRANSPARENT GATEWAY LOGIN?
	JEFS	CIRCCS		:NO

	LHI	R15,80!3F	:QUESTION MARK, MARK PARITY
	JAL	LINK,TLK1CH	:SEND IT TO INDICATE TRANSPARENT LOGIN
	JFS	CIRCC1		:NO SHUT OVERRIDE TRANSPARENCY

CIRCCS	NI	T1,@SHUTM	:IS SHUT BIT ON
	JEFS	CIRCC1		:NO

	LHI	R15,80!21	:MARK THE CHAR '!'
	JAL	LINK,TLK1CH	:SEND THIS CHAR

	:SEND USERNAME.  NOTE - PRIOR CALL TO ACTCR IN ALL
	:INSTANCES SETS UP USERNAME IN UNAME ARRAY WITH
	:MARK PARITY.

CIRCC1	CHVR	C2,C2		:END USER NAME STRING PTR
	SHI	C2,UNSS		:GET # OF CHARACTERS

CIRCC2	LIS	C1,0		:INDEX UNAME

CIRCC3	LB	R15,UNAME,C1	:GET A CHARACTER
	NHI	R15,7F		:STRIP PARITY
	JAL	LINK,TLK1CH	:SEND THIS CHARACTER
	AIS	C1,1		:BUMP UNAME INDEX
	SIS	C2,1		:DECEMENT COUNT
	JGBS	CIRCC3		:MORE, CONTINUE

CIRCC4	LHI	R15,80!3B	:MARK CHAR SEMICOLON
	NI	C3,@CRFLGM	:WAS CRFLG ON
	JEFS	CIRCC5		:NO

	LHI	R15,80!0D	:MARK CR

CIRCC5	JAL	LINK,TLK1CH	:SEND THIS CHAR
	LHI	R15,80		:SEND MARKED NULL IN CASE ODD NUMBER OF CHARS
	JAL	LINK,TLK1CH	:SEND THIS CHAR
	L	LINK,CILINK
	JR	LINK


:  FOR T-I REMOTE -
:  ACCUMULATE CHARS TO SEND AS TYPE 1 MSGS - USES C4, C5, C6
	:INITIALIZATION  - R14 HAS NODE #, R15 BUF #

TLKSET	OHI	R14,1000	:SET TYPE 1 MSG
	LR	C4,R14		:SAVE FOR TLK1CH
	LR	C5,R15		:BUF # - SAVE FOR TLK1CH
	LIS	C6,0		:CHAR COUNT - MUST SEND IN PAIRS
	JR	LINK

	:ACCUMULATE TWO CHARS TO SEND IN TYPE 1 MSG

TLK1CH	LR	C6,C6		:HAVE WE GOT A CHAR ALREADY
	JNFS	TLK1C1		:YES

	EXBR	C6,R15		:THIS IS FIRST CHAR - SAVE IT
	JR	LINK

TLK1C1	OR	R15,C6		:PUT TWO CHARS TOGETHER
	LR	R13,C4		:SR1 OF TYPE 1
	LR	R14,C5		:SR2 OF TYPE 1
	LR	C6,LINK		:SAVE LINK
	JAL	LINK,CAPPEND	:SEND TYPE 1 MSG
	LR	LINK,C6
	LIS	C6,0		:SHOW NO CHARS
	JR	LINK

	EI

:  SEND A MESSAGE TO USER IN LOGIN MODE, WHERE MESSAGE TYPE
:  IS NOT OLD STANDARD MESSAGE (TYPES 1-6, WHICH ARE SENT VIA
:  REMSG).  FIRST CHECK IF A NEW CANNED MESSAGE CAN BE SENT.
:  IF NOT, STUFF THE MESSAGE.
:  USES C1, C4.

TLKLOG	ST	LINK,YLINK
	LR	C1,R15		:STRING PTR
	LB	C4,,C1		:LENGTH OF STRING
	LR	C4,C4		:CHECK NULL CASE
	JER	LINK

	LHL	R13,LOGID	:NODE #
	IF	1-NOTI
	CLHI	R13,T2BN	:IS IT T-II NODE
	JGE	TLKLA		:YES

	:MESSAGE TO T-I USER IN LOGIN MODE
	TBT	R13,EXTYM1	:IS NODE EXTENDED TYMNET I
	JE	TLKL0		:NO

	CLI	C1,MSGSTR	:CHECK IF THIS MSG IS IN EXTENDED NUMBERING
	JLFS	TLKL0		:NO - SEND STRING

	CLI	C1,MSGEND	:IS MSG IN RANGE
	JGEFS	TLKL0		:NO - SEND STRING

		:SEND CANNED MSG TO T-I NODE
	SIS	C1,1		:ADDR OF MSG NUMBER
	LB	R14,,C1		:MSG NUMBER
	SLLS	R14,6		:POSITION FOR SR2
	OHI	R14,8000	:MAKE MSG SUBTYP 0
	LHI	R15,8007	:CLEAR IN BUF AND FLAG EXTENDED NUMBERING
	J	REMSG		:SEND MSG & RETURN

		:STUFF THE MESSAGE VIA TYPE 1S INTO T-I NODE'S BUFFER

TLKL0	OHI	R13,1000	:TYPE 1 MSG
	LHL	R14,LOGID+2	:EVEN BUF #
	OHI	R14,1		:MAKE ODD - CHARS TO TERMINAL!!

TLKL1	LB	R12,1,C1	:GET A CHAR
	EXBR	R12,R12		:POSITION AS FIRST CHAR OF PAIR
	SIS	C4,1		:IS THIS LAST CHAR
	JEFS	TLKL4		:YES

	LB	R15,2,C1	:GET NEXT CHAR

TLKL2	OR	R15,R12		:FORM CHAR PAIR
	OHI	R15,8080	:SET MARK PARITY ON CHARS.
	JAL	LINK,CAPPEND	:ADD TO COMMAND LIST
	AIS	C1,2		:UPDATE CHAR PTR
	SIS	C4,1		:WAS THIS LAST CHAR
	JGBS	TLKL1		:NO

TLKL3	L	LINK,YLINK
	JR	LINK

TLKL4	LIS	R15,0		:PAD WITH NULL
	JBS	TLKL2

	EI

	:SEND MSG TO T-II NODE
		:CHECK FOR CANNED T-II MESSAGE

TLKLA	CLI	C1,MSGSTR	:IS MESSAGE CANNED?
	JL	TLKLA1		:NO

	CLI	C1,MSGEND	:CHECK UPPER BOUND
	JGE	TLKLA1		:NOT CANNED

		:USE CANNED T-II EXTENDED MESSAGE
	LI	R14,60000,R13	:MESSAGE LENGTH, NODE #
	SIS	C1,1		:ADDRESS OF MESSAGE #
	LB	T1,,C1		:MESSAGE #
	AHI	T1,0D8B		:CLEAR INPUT BUFFER, SEND MESSAGE
	EXHR	T1,T1		:POSITION T-II TYPE & SUBTYPE
	LHL	R15,LOGID+2	:BUFFER #
	SRLS	R15,1		:PORT #
	OR	R15,T1		:COMPOSE 1 WORD OF LEP MSG
	STM	R14,CBUF-2	:PUT MESSAGE IN CBUF
	JAL	LINK,C2APPEND	:SEND MESSAGE
	L	LINK,YLINK	:RECOVER LINK
	JR	LINK

		:STUFF T-II MESSAGE
		:CALCULATED MSG SIZE IS 7+CHARACTERS IN MESSAGE,
		:BUT ROUND UP TO EVEN # OF BYTES,
		:ADDING A NULL IF NECESSARY

TLKLA1	LHI	R14,8,C4	:1+# OF BYTES IN SUP MSG
	NHI	R14,0FFFE	:MAKE SURE IT IS EVEN
	CLHI	R14,CBUFSZ	:MAKE SURE SUP MSG NOT TOO LONG
	JGE	TLKLD		:TOO LONG - DON'T SEND, ISSUE ERROR MSG

	STH	R14,CBUF-2	:STORE SUP MSG LENGTH
	STH	R13,CBUF	:STORE NODE # IN SUP MSG
	LHL	R14,LOGID+2	:BUF #
	SRLS	R14,1		:PORT #
	STH	R14,CBUF+4
	LHI	R14,0D10	:MSG TYP & INDICATE MESG STRING INCLUDED
	STH	R14,CBUF+2
	LHI	R13,80		:MARK PARITY TO AVOID ESCAPING
	LIS	R15,0		:INDEX THRU MSG STRING
	LIS	R14,1		:MAKE # MESSAGE CHARACTERS ODD
	OR	R14,C4
	STB	R14,CBUF+6,R15	:STORE ADJUSTED MSG LENGTH
		:COPY MESSAGE BYTES TO CBUF

TLKLB	AIS	R15,1
	LB	R14,,C1,R15	:GET NEXT CHAR IN STRING
	OR	R14,R13		:INSURE NO ESCAPING NECESSARY
	STB	R14,CBUF+6,R15	:STORE IN SUP MSG
	CLR	C4,R15		:CHECK IF ALL CHARS COPIED
	JGBS	TLKLB		:NO - LOOP

	THI	R15,1		:IS LAST HALF WORD OF SUP MSG FULL
	JNFS	TLKLC		:YES

	STB	R13,CBUF+7,R15	:INSERT NULL

TLKLC	JAL	LINK,C2APPEND	:ADD TO LCOM

TLKLC1	L 	LINK,YLINK
	JR	LINK

TLKLD	LHI	R13,EM0070	:ERROR # - MSG TOO LONG FOR SUP MSG
	LR	R14,C1		:ADDRESS OF MESSAGE
	LA	R15,.		:WHERE MSG WAS ISSUED
	JAL	LINK,ERRFIL,,
	JBS	TLKLC1


	IF	1-NOTI
:  ASSIGN CHANNEL FROM CURRENT NODE TO NEXT NODE.
:  PLACE APPROPRIATE BUFFER # IN PERM TABLE ENTRY CORRESPONDING TO CHANNEL.
:	R15 - CURRENT NODE #
:	H1  - DEST BASE #
:	H2  - EVEN BUF #
:	H5 - HIGH SPEED BIT SETTING
:  VALUES RETURNED ARE
:	R12 - ZERO IF OUT OF CHANNELS AFTER ASSIGNMENT
:	R13 - CHANNEL # ASSIGNED
:	R14 - NEXT NODE IN CIRCUIT
:	R15 - PRESENT NODE #
:	C1,C2 - SR2 & SR3 FOR TYPE 2 MSG (CHANGE PERM TABLE)
:	PERMUTER TABLE ENTRY MADE IN NODE DESCRIPTOR
:NOTE - CHANNELS 0 & 1 ARE CONTROL CHANNELS AND DO NOT
:SHOW UP IN THE PERM TABLE.

ASCHAN	ST	LINK,ASLINK

ASCH1	JAL	LINK,NODGET	:MAKE R14 PT TO NODE DESC
	J	KRASAP		:FATAL ERROR

	LR	C3,R14		:PT TO NODE DESC
	LHL	C2,H2
	AIS	C2,1		:MAKE BUF # ODD (SECOND HALF OF BUFFER PAIR)
	STH	C2,H2
	OH	C2,H5		:ADD HIGH SPEED BIT - THIS IS NEW PERM VALUE
	LHL	R12,DIRBYT-2,R13, :NEXT NODE # IN CIRCUIT (MAPPED NODE #)
	UMAP(R12)
:	ENTRY POINTS FROM ASBUFF (VIA ASBA3)
	:SEARCH FOR LINK TO NEIGHBOR <R12> WITHIN NODE DESCRIPTOR <R14>

ASCH1C	LHI	T1,LINPTR+LNKNOD,R14 :ADDRESS OF FIRST NEIGHBOR NODE
	SHT(T1,LNKPSZ,R12,C5)
	J	KRASHW		:NEIGHBOR <R12> NOT FOUND - FATAL

	:NEIGHBOR FOUND - SEARCH FOR AVAILABLE CHANNEL #, AS INDICATED
	:  BY A BUFFER # OF -1.
	:SEARCH FOR CHANNEL BACKWARDS FROM MAX CHANNEL #.
	LR	C5,R12		:INSURE NEXT NODE # IN C5 FOR LATER
	LHL	C4,LNKDSP,T1	:DISPLACEMENT TO LINK DESCRIPTOR TO <C5>
	AR	C4,R14		:LINK DESC ADDR, NEXT 1/2 WORD = 1ST PERM ENTRY
	LHL	R13,LNKDSP+LNKPSZ,T1 :DISPL TO NEXT LINK DESCRIPTOR
	AR	R13,R14		:ADDRESS OF NEXT LINK DESCRIPTOR
	SIS	R13,2		:LAST ENTRY OF LINK DESCRIPTOR TABLE
	LCS	C1,1		:COMPARISON VALUE FOR AVAILABLE CHANNEL
	SHTS(R13,C4,-2,,C1,T2)
	J	ASCH8		:OUT OF CHANNELS

		:FOUND 1 FREE ENTRY, SEE IF ANOTHER EXISTS TO
		:CHECK IF WENT OUT OF CHANNELS.
	CLHI	R13,2,C4	:AT BEGINNING OF TABLE?
	JGFS	ASCH3		:NOT AT BEGINNING, MUST SEARCH MORE

	:NOW OUT OF CHANNELS

ASCH2	LIS	R12,0		:FLAG OUT OF CHANNELS
	LIS	C1,NOCHAN	:OUT OF CHANNELS BIT FLAG
	SBT	C1,,C4		:FLAG OUT OF CHANNELS THIS LINK
	JFS	ASCH4		:CONTINUE

	:SEARCH TO SEE IF WENT OUT OF CHANNELS

ASCH3	LR	R12,R13		:ADDRESS OF PERM ENTRY FOR CHANNEL
	SIS	R12,2		:NEXT PERM ENTRY
	SHTS(R12,C4,-2,,C1,T2)
	J	ASCH2		:SET OUT OF CHANNELS BIT - NO MORE AVAILABLE

ASCH4	STH	C2,,R13		:STORE NEW VALUE IN PERM TABLE
	LR	C1,T1		:ADDR OF LINK DESCR PTR
	SHI	C1,LINPTR,R14	:!!LINE # * 4
	SLLS	C1,8		:POSITION FOR TYPE 2 SR2
	SR	R13,C4		:2*(CHANN # - 1)
	SRLS	R13,1		:CHANNEL # -1
	AIS	R13,1		:CHANNEL #
	OR	C1,R13		:SR2 FOR TYPE 2
	LR	R14,C5		:NEXT NODE #
	LR	R12,R12		:IF ZERO OUT OF CHANNELS
	JEFS	ASCH6		:NOW OUT OF CHANNELS, REPORT

	L	LINK,ASLINK
	JR	LINK		:RETURN

	:THIS CHANNEL ASSIGNMENT USED LAST CHANNEL,
	:REPORT TO LOG

ASCH6	STM	R12,ASTEMP	:SAVE ARGS
	LHI	R13,EM00E0	:OUT OF CHANNELS MSG FOR ERROR LOG $8340
	LR	R14,C1		:SR2 OF TYPE 2 (LINE #^0A ! CHANN #)
	NHI	R14,-400	:EXTRACT LINE #
	SLLS	R14,6		:POSITION FOR LOG REPORT
	OR	R14,R15		:LINE # & NODE #
	LIS	R15,0
	JAL	LINK,ERRFIL,,	:WRITE MSG TO DISK
	LIS	R12,1
	AM	R12,TOPNCH	:COUNT # TIMES A LINK RAN OUT OF CHANNELS
	LM	R12,ASTEMP	:RESTORE RESULTS
	L	LINK,ASLINK
	JR	LINK



	:LINK WAS OUT OF CHANNELS - FATAL ERROR UNLESS
	:T-I TO T-I LINK, WHERE NEXT NODE DOESN'T SHOW OUT OF
	:CHANNELS (EG. DEAD END CONDITION).  IN THIS CASE,
	:USE NEXT NODE'S PERM TABLE TO CLEAN UP CURRENT NODE
	:PERM TABLE!
	:NOTE - C4 PTS TO LINE DESC IN OLD NODE DESC, C5 IS NEW NODE #

ASCH8	LR	C1,R15		:SAVE CURRENT NODE #
	LR	R15,C5		:NEW NODE #
	CLHI	R15,T2BN	:IS THIS A T-II NODE
	JLFS	ASCH8A		:NO

	J	K2RAS9		:YES - FATAL ERROR

ASCH8A	JAL	LINK,NODGET	:R14 PTS TO NODE DESC OF NEW NODE
	J	KRASAL		:NO NODE DESC - FATAL ERROR

	LCS	T1,1
	AHM	T1,H2		:RESTORE BUFFER # TO ORIGINAL VALUE
	:SEARCH NEXT NODE FOR LINK TO CURRENT NODE
	LHI	T1,LINPTR+LNKNOD,R14 :ADDRESS OF FIRST NEIGHBOR IN DESCR.
	SHT(T1,LNKPSZ,C1,C3)
	J	KRASHD		:NEIGHBOR MISMATCH - FATAL

	:FOUND LINK TO NEIGHBOR
	LHL	C2,LNKDSP,T1	:DISPL TO LINK DESC
	LHL	T2,LNKDSP+LNKPSZ,T1 :DISPL TO NEXT LINK DESCRIPTOR
	AR	R14,C2		:PTR TO LINK DESCRIPTOR
	SR	T2,C2		:# OF BYTES IN LINK DESCRIPTOR
	SIS	T2,2		:# OF BYTES IN PERM TABLE
	LCS	C3,1		:-1 IS EMPTY ENTRY
	LIS	T1,0		:FLAG FOR DIFFERENCES
	:SEARCH NEIGHBOR NODE FOR AVAILABLE CHANNELS, IF FOUND
	:COPY TO CURRENT NODE & SET FLAG ALL OK.

ASCH10	CLH	C3,,R14,T2	:IS ENTRY EMPTY
	JNFS	ASCH11		:NO - LOOK AT NEXT ENTRY

	LIS	T1,1		:INDICATE PERM TABLE DIFFERENCE
	STH	C3,,C4,T2	:CHANGE PERM ENTRY IN OLD NODE

ASCH11	SIS	T2,2		:NEXT ENTRY
	JNBS	ASCH10

	LR	R15,C1		:OLD NODE #
	LR	T1,T1		:WAS THERE A PERM TABLE DIFFERENCE
	JN	ASCH1		:YES - AGAIN FIND FIRST AVAILABLE CHANNEL

	J	KRASAD

:  ASSIGN BUFFER IN NEW NODE - PASSTHRU UNLESS AT DESTINATION
:SKIP RETURN IF PASSTHRU, NON SKIP RETURN IF AT DESTINATION
:  ARGS	R12 - ZERO IS OUT OF CHANNELS FLAG
:	R13 - CHANNEL #
:	R14 - NEW NODE #
:	R15 - OLD NODE #
:	H7 - DEST BUF #
:	H1  - DEST BASE #
:	H5 - HIGH SPEED BIT SETTING
:  RESULTS
:	H2  - EVEN BUF # FOR PASSTHRU OR VALUE OF H7 IF AT DESTINATION
:	R15 - NEW NODE #
:	C1,C2 - SR2 & SR3 FOR TYPE 2 (CHANGE PERM TABLE ENTRY)
:	PERMUTER TABLE CHANGE MADE IN NODE DESCRIPTOR
:NOTE - ASBUFF CHECKS IF PRIOR NODE WAS T-II, AND IF IT WAS IT
:CALLS ASCHAN TO GET A CHANNEL # AND FIXES NEEDLE (ON LOGIN LIST IF
:T-II SOURCED THE CIRCUIT, IN CBUF OTHERWISE).  IF THE NEEDLE WAS 
:NOT THE ORIGINATING NEEDLE, IT IS ADDED TO THE COMMAND LIST.

ASBUFF	ST	LINK,ASLINK
	STM	R12,ASTEMP	:SAVE ARGS
	LR	R15,R14		:NEW NODE #
	JAL	LINK,NODGET	:R14 GETS PTR TO NODE DESC
	J	KRASA4		:NODE DESC NOT COMPLETE

	LR	C3,R14		:PTR TO NODE DESC
	LM	R12,ASTEMP	:RESTORE ARGS
	CLHI	R15,T2BN	:IS OLD NODE T-II
	JGE	ASBA1		:YES - ASSIGN A PASSTHRU & CALL ASCHAN

	CLHI	R14,T2BN	:IS NEW NODE T-II
	JLFS	ASB0		:NO

	J	K2RASA		:YES - FATAL ERROR

	:FIND LINE TO OLD NODE

ASB0	LHI	C4,LINPTR+LNKNOD,C3 :ADDRESS OF FIRST NEIGHBOR IN DESCRIPTOR
	SHT(C4,LNKPSZ,R15,T2)
	J	KRASH4		:FATAL NEIGHBOR MISMATCH

	:FOUND LINK TO OLD NODE
	LHL	C5,LNKDSP,C4	:DISPL TO LINE DESC FOR OLD NODE#
	LR	R12,R12		:ARE WE NOW OUT OF CHANNELS
	JNFS	ASB3		:NO

	LIS	T1,NOCHAN	:OUT OF CHANNELS BIT # IN LINE STATUS BYTE
	SBT	T1,LNKST,C3,C5	:SET BIT IN LINE STATUS BYTE

ASB3	CLH	R14,H1		:ARE WE AT DESTINATION
	JNFS	ASB4		:NO

	LHL	T1,H7		:YES - DEST BUF #
	STH	T1,H2		:BUF ASSIGNMENT
	JFS	ASB8		:SET UP FOR RETURN

ASB4	JAL	LINK,ASBSUB	:ASSIGN A PASSTHRU BUFFER PAIR
	LM	R13,ASTEMP+4	:RESTORE ARGS

ASB8	LHL	C2,H5		:HIGH SPEED BIT SETTING
	OH	C2,H2		:BUF # (SR3 OF TYPE 2) NEW VALUE FOR PERM
	LR	T1,R13		:CHANNEL #
	SIS	T1,1		:CHANNEL 0,1 NOT STORED (PLUS 2 BYTES IN DESC)
	SLLS	T1,1		:INDEX HALF WORDS
	AR	T1,C3		:ADD IN PTR TO NODE DESC
	STH	C2,,C5,T1	:NEW PERM TABLE ENTRY
	SHI	C4,LINPTR,C3	:!!LINE # * 4
	SLLS	C4,8		:LINE # POSITIONED FOR SR2 TYPE 2
	LR	C1,R13		:CHANNEL #
	OR	C1,C4		:SR2 FOR TYPE 2
	L	LINK,ASLINK
	LR	R15,R14		:MAKE NEW NODE OLD NODE
	CLH	R15,H1		:ARE WE AT DEST
	JER	LINK		:YES -RETURN

	J	4,LINK		:NO -SKIP RETURN


	:ASSIGN PASSTHRU BUFFER PAIR
	:C3 IS PTR TO NODE DESCRIPTOR, STORE EVEN BUFF # IN H2
	:USES T1,C1,C2,R12,R13,R14,R15

ASBSUB	ST	LINK,LLINK	:SAVE LINK
	LHL	C1,BITMAP,C3	:DISPL TO BIT MAPS
	LB	R12,NODTYP,C3	:NODE TYPE OF NEW NODE
	LHL	C2,PASSTHRU,R12,R12 :# OF BYTES IN PASSTHRU MAP
	AR	C1,C3		:ADDR OF PASSTHRU BIT MAP
	LR	T1,C1		:DITTO

ASB5	L	R14,,T1		:WORD OF BIT MAP
	JFFO	R14,ASB5A	:FIND FIRST SET BIT -TO R15
	AIS	T1,4		:NO BITS - GO TO NEXT WORD
	SIS	C2,4		:DECREMENT BYTES REMAINING
	JGBS	ASB5		:MORE

	J	KRASH5		:OUT OF PASSTHRU'S

	:FOUND AN AVAILABLE PASSTHROUGH BUFFER FROM BIT ARRAY

ASB5A	RBT	R15,,T1		:RESET BIT IN PASSTHRU MAP
	:COMPUTE BIT POSITION IN MAP
	LR	R14,T1		:ADDRESS OF WORD CONTAINING BIT
	SR	R14,C1		:LESS START OF BITMAP
	SLLS	R14,3		:#OF BYTES DISPLACEMENT TIMES 8
	AR	R15,R14		:BIT POSITION IN MAP
	AR	R15,R15		:TIMES TWO FOR PAIR
	AH	R15,MNPASS,R12,R12 :ADD BASE BUF # OF PASSTHRU'S
	STH	R15,H2		:EVEN BUF #
	:CHECK IF NOW OUT OF PASSTHRU'S
	L	LINK,LLINK	:RESTORE LINK

ASB6	L	R15,,T1		:WORD OF BIT MAP
	JNR	LINK		:SOME PASSTHRU'S LEFT

	AIS	T1,4
	SIS	C2,4		:PREVIOUS WORD
	JGBS	ASB6		:CHECK PREVIOUS WORD

	LHI	R13,EM00E8	:OUT OF PASSTHRU'S INDICATOR TO ERROR LOG
	LHL	R14,ASTEMP+0A	:NEW NODE #
	LIS	R15,0
	JAL	LINK,ERRFIL,,	:SEND MSG TO DISK
	L	LINK,LLINK	:RESTORE LINK
	LIS	T1,0
	SBT	T1,,C3		:SET SIGN BIT OF NODE # IN DESC (OUT OF PASSTHRU'S)
	LIS	T1,NOPASS	:SET THIS BIT IN ALL LINE STATUS BYTES
	LHI	R13,LINPTR,C3	:ADDR OF LINE DESC PTRS
	LHL	R14,LNKNOD,R13	:NEIGHBOR NUMBER
	JER	LINK		:DONE

ASB6A	LHL	R14,LNKDSP,R13	:DISPL TO LINE DESC
	SBT	T1,LNKST,R14,C3	:SET BIT IN LINE STATUS BYTE
	AIS	R13,LNKPSZ	:PT TO NEXT LINE DESC PTR
	LHL	R14,LNKNOD,R13	:NEIGHBOR NUMBER
	JNBS	ASB6A

	JR	LINK		:DONE


:  PREVIOUS NODE IN CIRCUIT WAS TYMNET II.
:  ASSIGN A PASSTHRU BUFFER (OR PORT
:  BUFFER IF END OF CIRCUIT) AND FAKE CALL TO ASCHAN TO ASSIGN A CHANNEL
:  TOWARD T-II NODE.  THEN FIX UP NEEDLE WITH ASSIGNED CHANNEL NUMBER.

ASBA1	CLH	R14,H1		:ARE WE AT DESTINATION
	JNFS	ASBA2		:NO

	LHL	C2,H7		:DEST BUF # - SET UP FOR CALL TO ASCHAN
	STH	C2,H2
	JFS	ASBA3

ASBA2	JAL	LINK,ASBSUB	:ASSIGN A PASSTHRU BUFFER PAIR
	LHL	C2,H2		:EVEN BUF # ASSIGNED

ASBA3	OH	C2,H5		:MERGE IN HIGH SPEED BITS
	L	R12,ASTEMP+0C	:T-II NODE # (SET UP FOR ASCHAN CALL)
	L	T1,ASLINK
	ST	T1,DIRSAV	:SAVE LINK FOR ASBUFF
	LA	T1,ASBA4
	ST	T1,ASLINK	:FAKE LINK FOR ASCHAN
	L	R15,ASTEMP+8	:T-I NODE #
	LR	R14,C3		:NODE DESC FOR T-I NODE
	J	ASCH1C		:BRANCH INTO ASCHAN

	:RETURN HERE FROM ASCHAN

ASBA4	STM	R12,ASTEMP	:SAVE RESULTS FROM ASCHAN
	L	C4,DIRSAV	:RESTORE ASBUFF'S LINK
	LR	C5,R13		:CHANNEL # ASSIGNED BY ASCHAN
	LHL	R13,W1		:B'LET # TO FIX NEEDLE ON LOGIN LIST
	JNFS	ASBA5		:NEEDLE ON LOGIN LIST

	:INTERIOR NEEDLE ON CBUF - ADD ADD CHANNEL # AND SEND IT
	LHL	T1,CBUF-2	:SIZE OF NEEDLE
	STH	C5,CBUF-2,T1	:CHANNEL NUMBER IN PLACE
	JAL	LINK,C2APPEND	:SEND THE NEEDLE
	JFS	ASBA6		:CONTINUE

	:NEEDLE IS ORIGINATION NEEDLE, COMPLETE WITH CHANNEL #

ASBA5	JAL	LINK,LREAD
	LHL	T1,W1+2		:POSITION IN B'LET
	STM	R14,DIRSAV	:STORE B'LET
	STH	C5,DIRSAV,T1	:PUT CHANNEL # IN B'LET
	LM	R14,DIRSAV	:LOAD FIXED B'LET
	LHL	R13,W1		:B'LET #
	JAL	LINK,LWRITE	:UPDATE LOGIN LIST


ASBA6	LM	R12,ASTEMP
	LR	R12,R12		:IS LINK OUT OF CHANNELS
	JEFS	ASBA8		:YES

ASBA7	CLH	R15,H1		:ARE WE AT DESTINATION
	JER	C4		:YES - NON SKIP RETURN

	J	4,C4		:NO - SKIP RETURN

	:NOW OUT OF CHANNELS

ASBA8	LR	R15,R14		:PLACE T-II NODE # IN R15
	JAL	LINK,NODGET	:GET NODE DESC OF T-II NODE
	J	K2RAAH		:NOT FOUND - FATAL ERROR

	LHI	T1,LINPTR-4,R14	:SET UP TO SEARCH FOR LINK TO T-I NODE

ASBA9	AIS	T1,4		:INCR PTR
	LHL	T2,,T1		:NEXT NEIGHBOR #
	JNFS	ASBAA		:THERE IS ONE

	J	K2RAS8		:NEIGHBOR MISMATCH - FATAL ERROR

ASBAA	CLH	T2,ASTEMP+0E	:IS THIS LINK TO T-I NODE
	JNBS	ASBA9		:NO - LOOP

	LHL	T2,2,T1		:DISPL TO LINK DESC
	LIS	T1,NOCHAN	:BIT POSITION OF NO CHANNELS IN LINK STATUS
	SBT	T1,,T2,R14	:SET FO CHANNELS FLAG
	LM	R12,ASTEMP	:RESTORE ARGUMENTS
	J	ASBA7

:  BASE PORT ASSIGNMENT
:	R14 - PORT ARRAY #
:	R15 - NODE #
:    RETURN BUF # IN R15
:  SKIP RETURN IF PORT ASSIGNED, NON SKIP RETURN IF OUT OF PORTS

:  ENTRY AT TBPA TO CHECK FOR AVAILABLE PORT WITHOUT ASSIGNING ONE
:    USES T1,T2,C1,C2,K1,R13,R14,R15

TBPA	LIS	T1,1		:FLAG TO NOT ASSIGN PORT
	JFS	BPA0

BPA	LIS	T1,0		:FLAG TO ASSIGN PORT

BPA0	CLHI	R15,MXBASE+1	:IS THIS LEGAL BASE #
	JGE	BPA2		:COULD BE T-II NODE

	LR	C1,R14		:SAVE PORT ARRAY #
	LR	C2,LINK		:SAVE LINK
	JAL	LINK,NODFND	:PUT PTR TO NODE DESC IN R14
	J	,C2		:NODE UNKNOWN, NON-SKIP RTN (4 BYTE INSTR)

	JLR	C2		:DESCRIPTOR INCOMPLETE

	LHL	R13,BITMAP,R14	:DISPL TO BIT MAP
	AR	R13,R14		:ADDR OF BIT MAP
	LB	R14,NODTYP,R14
	AH	R13,PASSTHRU,R14,R14 :ADDR OF PORT BIT MAP
	LHL	K1,PAINCR,R14,R14 :# OF PORTS PER ARRAY IF MULTI HOST BASE
	LR	T2,K1
	SRLS	T2,3		:# OF BYTES PER PORT ARRAY
	MHR	T2,C1		:# OF BYTES TO START OF THIS PORT ARRAY
	AR	R13,T2		:ADDR OF THIS PORT ARRAY
	LHL	T2,HSTPTS,R14,R14	:# OF PORTS PER ARRAY
	SRLS	T2,3		:# OF BYTES PER ARRAY
	AR	R13,T2		:ADDR OF END OF PORT ARRAY

BPA1	SIS	T2,4		:LOOP ONCE FOR EACH WORD
	JLR	C2		:HOST OUT OF PORTS - NON SKIP RETURN

	SIS	R13,4		:PREVIOUS WORD OF PORT ARRAY
	L	R15,,R13	:WORD OF BIT MAP
	JEBS	BPA1		:NO FREE PORTS IN THIS WORD

	LR	T1,T1		:ARE WE TO ASSIGN A PORT?
	JN	4,C2		:NO - SKIP RETURN SHOWING PORT AVAILABLE

	LHI	R14,-1,R15	:SET UP TO FIND RIGHT MOST BIT IN WORD
	XR	R14,R15		:LEFTMOST BIT NOW IS RIGHTMOST OF ORIGINAL
	JFFO	R14,BPA4	:FIND LEFT-MOST BIT
	HC	0,0		:NO BITS AVAILABLE - FATAL INCONSISTENCY

BPA4	RBT	R15,,R13	:SHOW THIS PORT NOW BUSY
	MHR	K1,C1		:FIRST PORT # IN THIS ARRAY
	SLLS	T2,3		:# OF PORTS TO START OF WORD
	AR	K1,T2		:FIRST PORT # IN THIS WORD
	AR	R15,K1		:# OF PORT ASSIGNED
	AR	R15,R15		:CONVERT PORT # TO BUFFER #
	J	4,C2		:SKIP RETURN

BPA2	CLHI	R15,T2BN	:IS IT A T-II NODE
	JGEFS	BPA3		:YES

	J	KRASH8		:NO - ILLEGAL BASE #

BPA3	LIS	R15,0		:FAKE AN ASSIGNMENT
	J	4,LINK		:SKIP RETURN TO SHOW ASSIGNMENT


:  ADD TO COMMAND & LPERM LISTS  - C1, C2 HAVE SR2, SR3 OF TYPE 2 MSG
:   R15 HAS NODE #

PLACE	STM	R12,ASTEMP	:SAVE ARGS FOR ASCHAN & ASBUFF
	LR	R14,C1		:SR2 OF TYPE 2
	LR	R13,R15		:MAKE SR1 OF TYPE 2
	OHI	R13,2000	:SET TYPE 2
	LR	R15,C2		:SR3 OF TYPE 2
	LR	C2,LINK		:SAVE LINK
	JAL	LINK,CAPPEND	:ADD TO COMMAND LIST
	NHI	R13,0FFF	:NODE #
	JAL	LINK,PAPPEND	:ADD TO LPERM LIST (R15 HAS PERM TABLE VALUE)
	LM	R12,ASTEMP	:RESTORE ARGS FOR ASCHAN & ASBUFF
	JR	C2		:RETURN


:  FIND LINE NUMBER OF INTERNAL PERMUTER TABLE  R15 HAS BASE #
:    RETURN LINE # POSITIONED FOR TYPE 2 MSG IN R14, PTR TO LINE DESC IN R15
:    USES C1, K1 & R13 (LATTER 2 ALTERED BY NODGET ALSO)

FIPT	LR	C1,LINK		:SAVE LINK
	JAL	LINK,NODGET	:MAKE R14 PT TO NODE DESC
	J	KRASA7		:NODE UNKNOWN

	LR	R13,R14
	LHL	K1,LINPTR,R13	:NODE # IN LINE PTR
	JEFS	FIPT2		:FOUND INTERNAL PERM PTR

FIPT1	AIS	R13,4
	LHL	K1,LINPTR,R13	:NODE # IN LINE PTR
	JNBS	FIPT1		:CYCLE IF NOT FOUND

FIPT2	LHL	K1,LINPTR+4,R13	:THIS SHOULD BE ZERO
	JN	KRASH7

	LHL	R15,LINPTR+2,R13 :DISPL TO LINE DESC
	AR	R15,R14		:ADDR OF LINE DESC
	LB	K1,NODTYPE,R14
	LHL	R14,INLINE,K1,K1 :LINE # OF INTERNAL PERM POSITIONED FOR TYPE 2
	JR	C1		:RETURN

	EI



:  FIND PTR TO NODE DESC  -  R15 HAS NODE #

:    RETURN IF NODE # ILLEGAL OR NODTBP CONTENTS ZERO (NODE UNKNOWN)
:	   R13 & R14 MAY BE MODIFIED IN THIS CASE
:    OTHERWISE SKIP RETURN WITH CONTENTS OF NODTBP
:       R13 GETS 2*MAPPED NODE #
:	R14 GETS POINTER TO NODE DESCRIPTOR (NEGATIVE IF BEING BUILT)


NODFND	LR	R13,R15		:IS IT ZERO OR LESS
	JLER	LINK		:YES - ILLEGAL NODE #

	IF	1-NOTI
	IF	1-FULLTI	:SIMPLIFY IF FULL T-I NODE RANGE
	CLHI	R15,MXBASE	:IS IT A BASE
	JLE	NDFND1		:LEGAL NODE #

	CLHI	R15,RMBN	:IS IT BETWEEN BASE & REMOTE
	JLR	LINK		:YES - ILLEGAL NODE #

	CLHI	R15,T2BN	:IS IT T-II NODE
	JLFS	NDFND0		:NO - POTENTIAL REMOTE

	:T-II NODE #
	CLHI	R15,T2BN+MXT2ND	:IS T-II # IN RANGE
	JGER	LINK		:NO - ILLEGAL NODE #

	SHI	R13,BRGAP+RIIGAP :MAP - SUBTRACT GAPS
	JFS	NDFND1		:CONTINUE

	:REMOTE NODE #

NDFND0	CLHI	R15,MXREM	:IS REMOTE # IN RANGE?
	JGER	LINK		:NO - RETURN

	SHI	R13,BRGAP	:MAP - SUBTRACT BASE-REMOTE GAP
	ELSE
	CLHI	R15,T2BN+MXT2ND	:LEGAL NODE #?
	JGER	LINK		:NO

	EI
	ELSE
	CLHI	R15,T2BN	:ABOVE LOWER RANGE?
	JLR	LINK		:INVALID

	CLHI	R15,T2BN+MXT2ND	:ABOVE RANGE?
	JGER	LINK		:INVALID

	EI
	:NODE # LEGAL, MAP IT & GET DESCRIPTOR PTR

NDFND1	AR	R13,R13		:INDEX NODTBP
	L	R14,NODTBP,R13,R13 :PTR TO NODE DESC
	JN	4,LINK		:SKIP RETURN IF THERE IS AN NODE DESC

	JR	LINK		:NODE UNKNOWN



:  FIND PTR TO NODE DESC  -  R15 HAS NODE #
:	SIMILAR TO NODFND EXCEPT ONLY SKIP RETURNS IF DESCRIPTOR
:	COMPLETELY BUILT.

NODGET	LR	R13,R15		:IS IT ZERO OR LESS
	JLER	LINK		:YES - ILLEGAL NODE #

	IF	1-NOTI
	IF	1-FULLTI	:SIMPLIFY IF FULL T-I NODE RANGE
	CLHI	R15,MXBASE	:IS IT A BASE
	JLE	NDGET1		:LEGAL NODE #

	CLHI	R15,RMBN	:IS IT BETWEEN BASE & REMOTE
	JLR	LINK		:YES - ILLEGAL NODE #

	CLHI	R15,T2BN		:IS IT T-II NODE
	JLFS	NDGET0		:NO - POTENTIAL REMOTE

	:T-II NODE #
	CLHI	R15,T2BN+MXT2ND	:IS T-II # IN RANGE
	JGER	LINK		:NO - ILLEGAL NODE #

	SHI	R13,BRGAP+RIIGAP :MAP - SUBTRACT GAPS PRIOR TO TII
	JFS	NDGET1		:CONTINUE

	:REMOTE NODE #

NDGET0	CLHI	R15,MXREM	:IS REMOTE # IN RANGE?
	JGER	LINK		:NO - RETURN

	SHI	R13,BRGAP	:MAP - SUBTRACT BASE-REMOTE GAP
	ELSE
	CLHI	R15,T2BN+MXT2ND	:LEGAL NODE #?
	JGER	LINK		:NO

	EI
	ELSE
	CLHI	R15,T2BN	:CHECK LOWER THRESHOLD
	JLR	LINK		:ILLEGAL

	CLHI	R15,T2BN+MXT2ND	:LEGAL NODE #?
	JGER	LINK		:NO

	EI
	:NODE # LEGAL, MAP IT & GET DESCRIPTOR PTR

NDGET1	AR	R13,R13		:INDEX NODTBP
	L	R14,NODTBP,R13,R13 :PTR TO NODE DESC
	JG	4,LINK		:SKIP RETURN IF NODE DESCRIPTOR BUILT

	JR	LINK		:NODE UNKNOWN


:  NODE # IN R15 - SKIP RETURN IF LEGAL NODE # ELSE NON SKIP RETURN

NODLEG	LR	R15,R15		:IS IT ZERO
	JLER	LINK		:YES - ILLEGAL NODE #

	IF	1-NOTI
	IF	1-FULLTI	:SIMPLIFY IF FULL T-I NODE RANGE
	CLHI	R15,MXBASE	:IS IT A BASE
	JLE	4,LINK		:YES - LEGAL NODE #

	CLHI	R15,RMBN	:IS IT BETWEEN BASE & REMOTE
	JLR	LINK		:YES - ILLEGAL NODE #

	CLHI	R15,T2BN	:IS IT T-II NODE
	JLFS	NODLG1		:NO

	CLHI	R15,T2BN+MXT2ND	:IS IT IN RANGE
	JL	4,LINK		:YES - LEGAL NODE #

	JR	LINK		:NO - ILLEGAL NODE #

NODLG1	CLHI	R15,MXREM	:IS IT A REMOTE
	JLE	4,LINK		:YES - LEGAL NODE #

	JR	LINK		:ILLEGAL NODE #

	ELSE
	CLHI	R15,T2BN+MXT2ND	:LEGAL NODE #?
	JL	4,LINK		:YES

	JR	LINK

	EI
	ELSE
	CLHI	R15,T2BN	:LEGAL NODE - LOWER BOUND?
	JLR	LINK		:NO

	CLHI	R15,T2BN+MXT2ND	:LEGAL NODE #
	JLE	4,LINK		:YES

	JR	LINK		:NO

	EI


:HGET - LOGIN ORIENTED UTILITY TO GET A NODE FOR HOST # IN R15.
:  EXPECTS CURRENT SUBNET NUMBER TO BE IN REQSNT IF SNETS OPTION ON.

:  RETURNS FIRST NODE FOR HOST UP  OR SHUT. THAT IS IN SAME SUBNET
:  AS REQUESTING NODE.

:  IF ALL ENTRIES DOWN, RETURNS LAST ENTRY FOR HOST.
:  NODE # RETURNED IN R15, STATUS (HPA IN LOWER 2 BITS) IN R14, COST IN R13.
:  R12 = ENDHST EXTENSION PTR (=0 IF NO MORE);

: RE-ENTER AT HGETNX WITH R12 INTACT TO CONTINUE SEARCH
:  IN EXTENSION TABLE USING R12 AS PTR.  R12 MUST BE NON-ZERO.

:RETURNS ARE AS FOLLOWS:
:  RETURN IF HOST UNKNOWN
:  1*SKIP RETURN IF NO BASE FOUND WITHIN REQUESTING SUBNET (REQSNT)
:  2*SKIP RETURN IF HOST DOWN (IN REQSNT)
:  3*SKIP RETURN IF ANSWERED (IN REQSNT)
:  4*SKIP RETURN IF SHUT (IN REQSNT)
:  

HGET	LR	R15,R15		:CHECK FOR VALID HOST #
	JLER	LINK		:NOT VALID HOST - UNKNOWN

	CLHI	R15,MXHOST	:IS HOST # TOO LARGE
	JGER	LINK		:YES

	LR	R12,R15		:R12 TEMP INDEX INTO HOST TABLE
	SLLS	R12,3		:ADJ FOR 8 BYTE  ENTRY
	LA	R12,HOST,R12,	:HOST INDEX-->ADDRESS
	LHL	R15,HBASE,R12	:GET NODE NUMBER
	JER	LINK		:HOST NOT FOUND - NON SKIP RETURN

	IF	SNETS
	LIS	R14,0		:SETUP FOR NO STATUS

HGET0	HS	0
	IF	FULLTI
	LB	R13,SNETNT,R15,	:GET SUBNET NUMBER OF BASE
	ELSE
	LR	R13,R15
	NMAP(R13)
	LB	R13,SNETNT,R13,	:SUBNET OF BASE NODE
	EI
	CLH	R13,REQSNT	:SAME AS REQUESTING NODE?
	JEFS	HGET1		:YES, CONTINUE

	LHL	R12,HEXTP,R12	:GET NEXT BASE
	JN	HGET3		:MORE, CONTINUE

	THI	R14,40		:DID WE FIND A PREVIOUS DOWN IN THIS SNET?
	JN	8,LINK		:YES, SHOW DOWN

	J	4,LINK		:SHOW HOST NOT IN ORG SUBNET

	ELSE

HGET0	HS	0
	EI

HGET1	LHL	R13,HSTAT,R12	:GET STATUS & COST
	EXBR	R14,R13		:POSITION STAT & HPA
	THI	R14,40		:IS IT DOWN?
	JNFS	HGET2		:YES TRY IF NEXT

:  HERE IF NOT DOWN
	LBR	R13,R13		:EXTRACT COST
	LHL	R12,HEXTP,R12	:ENDHST PTR
	LBR	R14,R14		:EXTRACT STATUS & HPA
	THI	R14,80		:TEST SHUT BIT
	JE	0C,LINK		:ANSWERED

	J	10,LINK		:SHUT

:  HERE IF DOWN

HGET2	LHL	R12,HEXTP,R12	:GET ENDHST PTR
	JNFS	HGET3		:MORE

	: HERE IF NO MORE
	LBR	R13,R13		:EXTRACT COST
	LBR	R14,R14		:EXTRACT STATUS & HPA
	J	8,LINK		:2*SKIP RETURN - DOWN

HGETNX	LIS	R14,0		:SHOW NO PRIOR DOWN STATUS

HGET3	LA	R12,ENDHST,R12,	:ENDHST PTR-->ADDRESS
	LHL	R15,HBASE,R12	:GET NODE #
	J	HGET0		:CONTINUE




:  GET HOST STATUS FOR BASE # IN K1 AND HOST # IN R15
:  (NECESSARY DUE TO MULTI-BASE HOSTS).  
:  NON-SKIP RTN IF BASE NOT ON HOST, SKIP IF HOST DOWN OR SHUT ON BASE,
:  DOUBLE SKIP IF ANSWERED.

:  NOTE - ASSUMES HOST NUMBER IS IN RANGE

:  HOST STATUS RETURNED IN R14, BASE IN R15. R13 RETURNS
:  ADDRESS OF ENTRY IF FOUND, OTHERWISE LAST ENTRY FOR HOST.


HBSGET	LR	R13,R15		:R13 ADDRESSING REGISTER
	SLLS	R13,3		:8 BYTES/ENTRY
	LA	R13,HOST,R13,	:ADDRESS ENTRY
	LHL	R15,2,R13	:BASE #
	JER	LINK		:NO ENTRY, RTN

	CLR	R15,K1		:THIS IT?
	JEFS	HBSGT2		:YES

HBSGT1	LHL	R13,4,R13	:GET EXTENSION PTR
	JER	LINK		:HOST NOT ON BASE

	LA	R13,ENDHST,R13,
	LHL	R15,2,R13	:BASE #
	CLR	R15,K1		:IS THIS IT?
	JNBS	HBSGT1		:NO

HBSGT2	LB	R14,,R13	:GET HPA & STATUS
	THI	R14,0C0		:SHUT OR DOWN?
	JE	8,LINK		:ANSWERED

	J	4,LINK		:DOWN OR SHUT



:   :
:
	SUBTTL CIRCUIT ZAPPER PROCESSING

:THIS PROGRAM IS THE SOLE PROPERTY AND CONFIDENTIAL INFORMATION OF
:TYMSHARE INC., AND MAY NOT BE COPIED IN WHOLE OR IN PART OR
:DISCLOSED TO ANY THIRD PARTY WITHOUT THE PRIOR WRITTEN CONSENT OF
:TYMSHARE.


:CIRCUIT ZAP PROCESSING

	IF	1-NOTI


:*******************************************************:
:						T-II 08	:
:							:
:		PROCESS T-II ZAP REPORT TO T-I		:
:							:
:*******************************************************:

:  A ZAPPER HAS PASSED BETWEEN TYMNET II AND TYMNET I

CIRZP2	LHL	R15,CBUF+4	:TYMNET I NODE # RECEIVING ZAPPER
	NHI	R15,7FFF	:CLEAR SIGN BIT
	JAL	LINK,NODGET	:DO I KNOW ABOUT THIS NODE
	J	CIRZPB		:NO - IGNORE MSG

	LR	R13,R15		:NODE #
	LB	R15,CBUF+3	:CHANNEL #
	LHI	K1,-1,R15	:CHANNEL 0 & 1 NOT PERMITTED
	JGFS	CIRZPA		:NOT CHANNEL 0 OR 1

	J	ILLRC2,,	:ILLEGAL MESSAGE, ISSUE DIAGNOSTIC

CIRZPA	LHL	K2,CBUF		:SEARCH FOR THIS NEIGHBOR OF T-I NODE
	LHI	T1,LINPTR+LNKNOD,R14	:SEARCH FOR LINE TO T-II NODE
	SHT(T1,LNKPSZ,K2,T2)
	J	CIRZPD		:NEIGHBOR MISMATCH - REPORT TO LOG

	:FOUND LINK TO T-II NEIGHBOR FROM T-I NODE
	LHL	T2,LNKDSP,T1	:DISPL TO LINK DESC
	AR	K1,K1		:INDEX INTO LINK DESC
	AR	T2,K1		:DISPL OF PERM TABLE ENTRY
	CLH	T2,LNKDSP+LNKPSZ,T1 :IS IT BEYOND TABLE FOR THIS LINK?
	JLFS	CIRZPC		:CHANNEL # IN RANGE

	J	ILLRC2,,	:ILLEGAL MESSAGE, CHANNEL # TOO LARGE

CIRZPC	AR	T2,R14		:ADDR OF LINK DESC
	LR	R12,R14		:REMEMBER ADDRESS OF DESCRIPTOR FOR LATER
	LH	R14,,T2		:VALUE OF PERM ENTRY
	CLHI	R14,-1		:IS IT EMPTY
	JE	IND,,		:YES - IGNORE !!POSSIBLE RACE?

	NHI	R14,1FFE	:CLEAR SPEED, OLD CIR. BITS & USE EVEN BUFF. #

	:INSURE BUFFER # IS VALID
	:!!CHECK POSSIBLE RACES FOR TERMINATION ON T-I HOST PORT,
	:!!AMONG OTHERS.
	LB	R12,NODTYP,R12	:GET NODE TYPE
	CLH	R14,MXPORT,R12,R12 :A PORT?
	JLEFS	CIRZPE		:YES, OK.

	CLH	R14,MNPASS,R12,R12 :PASSTHROUGH #?
	JL	CIRZPX		:NO - CRASH, INVALID BUFF # IN PERM TABLE

	CLH	R14,MXPASS,R12,R12 :SMALL ENOUGH?
	JGFS	CIRZPX		:NO - CRASH, INVALID BUFF # IN PERM TABLE

CIRZPE	EXHR	R13,R13		:POSITION NODE #
	OHI	R14,2000,R13	:INCLUDE NODE # & WAITING FOR ZAP BIT
	STH	R14,,T2		:SAVE FOR LATER
	EXHR	R15,R15		:PLACE CHANNEL # IN LEFT HALF
	OR	R15,K2		:MERGE IN TYMNET II NODE #
	JAL	LINK,ZAPPEND	:ADD TO ZAPPER LIST

CIRZPB	J	IND,,		:RETURN TO INPUT DISPATCHER

CIRZPX	HC	0,0		:CRASH - INVALID BUFFER # IN PERM TABLE

	:ERROR - NEIGHBOR MISMATCH

CIRZPD	LR	R15,R13		:T1 NODE #
	LHI	R13,EM0150	:ERROR # - NEIGH MISMATCH IN T1-T2 ZAP
	LHL	R14,CBUF	:T2 NODE #
	JAL	LINK,ERRFIL,,
	J	IND,,



:*******************************************************:
:						T-I 3/0	:
:							:
:		PROCESS T-I ZAP REPORT FROM BASE	:
:							:
:*******************************************************:


:  A CIRCUIT TO T-I BASE HAS BEEN ZAPPED.
:  FREE HOST PORT VIA BITMAP (ZAPR), SET OLD CIRCUIT BIT (2000),
:  AND ADD ZAPPER TO ZAPPER LIST TO AWAIT TIMEOUT WHICH
:  WILL CLEAR CHANNEL TO BASE, AS WELL AS PASSTHROUGH RESOURCES
:  ALLOCATED TO T-I PORTION OF CIRCUIT CONTIGUOUS TO THIS NODE.
:  SR1 HAS NODE #, SR3 HAS PORT BUFFER #.
:    NOTE - SINCE T-I ZAP REPORT DOES NOT INDICATE LINE #, NEIGHBOR #
:  OR CHANNEL #, WE MUST GO THROUGH AN EXPENSIVE SEARCH OF THE ENTIRE
:  PERMUTER TABLE TO FIND ENTRY CORRESPONDING TO PORT BUFFER #!

CIRZAP	LHL	R15,SR1		:NODE #
	CLHI	R15,MXBASE	:IS IT A BASE
	JLEFS	CZAP0		:YES

	:ERROR, T1 ZAPPER NOT REPORTED BY BASE
	LR	R14,R15		:NODE #
	LHI	R13,EM0050	:ERROR # $8120
	LA	R15,.		:THIS ADDR
	JAL	LINK,ERRFIL,,
	J	IND,,		:RETURN TO INPUT DISPATCHER

CZAP0	JAL	LINK,NODGET	:GET PTR TO NODE DESC
	J	CZAP0E		:INCOMPLETE, IGNORE ZAPPER (DEAD END CONDITION)

	LHL	R13,SR3		:BUFF #
	LR	C3,R13
	SRLS	R13,1		:PORT #
	JAL	LINK,ZAPR	:SHOW PORT FREE
	J	CZAP0B		:!!COMPLAIN, REPORT FOR INVALID T-I PORT!

	:SEARCH PERM TABLE FOR TERMINATION BUFFER CORRESPONDING
	:TO TERMINATION PORT & SET OLD CIRCUIT BIT(2000).
	:CREATE TIMEOUT TO DELAY CHANNEL REUSE.
	:NOTE-MAX VALID PORT BUFFER # IS 1FF, THEREFORE ZAPR
	:TRAP ABOVE WILL PREVENT ACCIDENTAL MATCH OF -1 UNDER 3FFE MASK.
	LHI	K2,3FFE		:MASK TO CLEAR HIGH SPEED BIT & FORCE EVEN BUF
	NR	C3,K2		:CLEAR HIGH SPEED BITS & MAKE BUF # EVEN
	LHI	T1,LINPTR-LNKPSZ,R14 :PTR TO LINE DESC PTRS
	:SEARCH PERM TABLE FOR NEXT LINK
	IF	SUPMIC-1	:USE MICROCODE SEARCH IF SUPMIC>1
	HC	9644		:LOAD R4 OF SET 3 WITH MASK (K2)
	LIS	T2,2		:INCREMENT
	HC	9632		:LOAD R3 OF SET 3 WITH INCREMENT

CZAP0A	AIS	T1,LNKPSZ	:PT TO NEXT LINE DESC PTR
	LHL	T2,,T1		:NEIGHBOR #
	JE	CZAP0C		:CHECK FOR INTERNAL CIRCUIT

	LHL	T2,LNKDSP,T1	:DISPL TO LINE DESC
	AHI	T2,LNKDSZ,R14	:ADDRESS OF 1ST PERM TABLE ENTRY
	LHL	R0,LNKPSZ+LNKDSP,T1 :DISPL PAST END OF LINE DESC
	AR	R0,R14		:ADDRESS JUST PAST PERM TABLE THIS LINK
	HC	9650		:LOAD R5 OF SET 3 WITH LIMIT ADDRESS
	HC	2B27		:SEARCH FROM T2 FOR C3 UNDER MASK TO R0
	JBS	CZAP0A		:NOT FOUND

	HC	0		:2ND 1/2 WORD OF RETURN

	ELSE

CZAP0A	AIS	T1,LNKPSZ	:PT TO NEXT LINE DESC PTR
	LHL	T2,,T1		:NEIGHBOR #
	JE	CZAP0C		:CHECK FOR INTERNAL CIRCUIT

	LHL	T2,LNKDSP,T1	:DISPL TO LINE DESC
	AHI	T2,LNKDSZ,R14	:ADDRESS OF 1ST PERM TABLE ENTRY
	LHL	R0,LNKPSZ+LNKDSP,T1 :DISPL PAST END OF LINE DESC
	AR	R0,R14		:ADDRESS JUST PAST PERM TABLE THIS LINK
	SHTS(T2,R0,2,K2,C3,C1)
	J	CZAP0A		:NOT FOUND FOR THIS LINK, TRY NEXT ONE

	EI
	:FOUND BUFFER #
	OHI	C3,2000		:MERGE IN OLD CIRCUIT BIT
	STH	C3,,T2		:UPDATE PERM TABLE
	EXHR	R14,R15		:POSITION NODE # FOR ZAPPEND
	OR	R14,C3		:MODIFIED BUF #
	LIS	R15,0		:SHOW ZAPPER REPORTED BY T-1 BASE
	JAL	LINK,ZAPPEND	:ADD TO ZAPPER LIST
	IF	SUPMIC-1	:RESTORE DEFAULT MASK IF SUPMIC>1
	LCS	T1,1		:DEFAULT MASK OF -1
	HC	9641		:RESTORE DEFAULT MASK OF -1
	EI
	J	IND,,		:RETURN TO INPUT DISPATCHER

	:ERROR

CZAP0B	J	ILLREC,,	:INVALID T-I PORT # REPORTED

	:BUFFER # NOT FOUND FOR EXTERNAL LINKS
	:CHECK INTERNAL PERM TABLE

CZAP0C	LR	C2,K2		:ZAPI EXPECTS MASK IN C2
	LCS	K2,1		:ZAPI EXPECTS MASK IN K2
	JAL	R12,ZAPI	:CLEAR INTERNAL PERM TABLE, IF ANY
	IF	SUPMIC-1	:RESTORE DEFAULT MASK IF SUPMIC>1
	LCS	T1,1		:RESET DEFAULT MASK
	HC	9641		:LOAD R4 OF SET 3 WITH DEFAULT MASK
	EI
	

CZAP0E	J	IND,,		:RETURN TO INPUT DISPATCHER



:  HERE FOR ZAPPER TIMEOUT.
:  TRACE THE CONTIGUOUS T-I PORTION OF THE CIRCUIT AND
:  FREE THE RESOURCES INVOLVED IN THE NODE DESCRIPTORS.
:  ONLY PASSTHROUGH BUFFERS AND CHANNEL ENTRIES ARE FREED, SINCE
:  THE T-I HOST PORT BUFFER IS FREED AT THE TIME THE T-I HOST REPORTS
:  THE ZAP.  A WAITING FOR ZAP BIT (2000 BIT) WAS ADDED
:  TO THE BUFFER NUMBER AT THE TIME OF THE ORIGIONAL ZAP REPORT TO INSURE
:  THAT WE START THE CLEARING PROCESS FROM THE CORRECT PERMUTER TABLE
:  ENTRY (SINCE THE HOST PORT MAY HAVE BEEN REASSIGNED ALREADY).

:  !!!NOTE - THERE IS A RACE CONDITION, WHERE A ZAP REPORT IS
:  IS PRODUCED BY A NODE ON A CIRCUIT WHICH HAS AN ALL T-I SEGMENT
:  TERMINATING ON A T-I HOST.  IF THE T-I HOST DOESN'T ISSUE A ZAP REPORT
:  WE CAN HAVE A SITUATION WHERE THE CORRESPONDING CHANNEL IS CLEARED BY
:  THE ZAP TIMEOUT, BUT THE T-I NODE DOESN'T THINK CHANNEL IS FREE.
:  SUCH A SITUATION CAN BE THE RESULT OF AN INCOMPLETE CIRCUIT BUILD
:  (THE T-I HOST MAY NOT PROCESS ZAPPER IF IT HASN'T RECEIVED 5 SUB 9).
:  THIS CONDITION CAN BE EXACERBATED BY SOME T-I CODE WHICH MAY REPORT
:  ZAPS FOR PERM ENTRIES TO HOSTS WHEN A LINE GOES OUT, BUT MAY
:  NOT REALLY FREE UP THE HOST PORT DUE TO THE FACT THAT A 5 SUB 9 WASN'T
:  YET RECEIVED.
:  

:  TRACE THE CIRCUIT & CLEAR IT IN THE NODE DESC'S (ZAP).

CZAP1	JAL	LINK,ZNEXT	:GET NEXT ENTRY ON OLD ZAPPER LIST
	J	CZAP5		:OLD LIST EXHAUSTED (NEW IS NOW OLD LIST)

	JAL	LINK,NODGET	:GET PTR TO NODE DESC
	JBS	CZAP1		:NOT COMPLETE - IGNORE ZAPPER

	HC	0		:2ND 1/2 WORD OF RETURN

	LR	C1,C1		:WAS ZAPPER REPORTED BY T-1 BASE
	JNFS	CZAP2		:NO, REPORTED BY T-II

	JAL	LINK,ZAP	:CLEAR CIRCUIT
	JBS	CZAP1		:CONTINUE TO NEXT ZAPPER

	:ZAPPER REPORTED BY T-II NODE

CZAP2	EXHR	C2,C1		:RIGHT JUSTIFY CHANNEL #
	NHI	C1,7FFF		:ISOLATE T-2 NODE #
	LR	C4,R15		:SAVE T1 NODE #
	LR	R15,C1		:T2 NODE #
	LIS	C6,0		:INIT PTR TO T-II LINE DESCR TO 0
	JAL	LINK,NODGET	:FIND T2 NODE DESC
	J	CZAP2B		:NOT THERE - IGNORE

	:SEARCH FOR LINK TO T-I NODE FROM T-II NODE
	LHI	T1,LINPTR+LNKNOD,R14 :ADDRESS OF FIRST NEIGHBOR IN DSCR
	SHT(T1,LNKPSZ,C4,T2)
	JFS	CZAP2B		:NOT FOUND - IGNORE ZAPPER TIMEOUT

	HC	0		:2ND 1/2 WORD OF RETURN

		:FOUND LINK TO T-I NEIGHBOR
	LHL	T2,LNKDSP,T1	:DISLP TO LINK DESC
	LA	C6,LNKST,T2,R14	:SAVE ADDR OF LINK STATUS FOR T-II NODE

CZAP2B	LR	R15,C4		:RESTORE T1 NODE #
	JAL	LINK,NODGET	:RESTORE PTR TO NODE DESC
	J	K2RAAR		:IT WAS THERE A MOMENT AGO - FATAL ERROR

	:SEARCH FOR LINK TO T-II NODE FROM T-I NODE
	LHI	T1,LINPTR+LNKNOD,R14 :ADDRESS OF FIRST NEIGHBOR NODE IN DESCR
	SHT(T1,LNKPSZ,C1,T2)
	J	CZAP4		:NEIGHBOR MISMATCH, REPORT TO LOG

		:FOUND LINK TO T-II NEIGHBOR
	LHL	T2,LNKDSP,T1	:DISPL TO LINK DESC
	LA	R12,LNKST,T2,R14	:ADDRESS OF LINE STATUS T-I NODE
	NHI	C2,7FFF		:ISOLATE CHANNEL #
	SIS	C2,1		:CALCULATE DISPL TO THIS CHANNEL
	AR	C2,C2
	AR	C2,T2
	LH	T2,,C2,R14	:THIS IS PERM TABLE VALUE WE WANT
	CLHI	T2,-1		:IS IT NULL
	JE	CZAP1		:YES - SKIP

	NHI	T2,3FFE		:MODIFY BUFFER #
	CLR	T2,C3		:IS THIS WHAT WE EXPECTED
	JN	CZAP1		:NO - SKIP

	:CLEAR CIRCUIT
	LIS	K1,NOCHAN	:BIT POSITION OF NO CHANNELS FLAG
	RBT	K1,,R12		:CLEAR OUT OF CHANNELS FOR T-I NODE
	LR	C6,C6		:IS T-II NEIGHBOR THERE?
	JEFS	CZAP3A		:NO

	RBT	K1,,C6		:CLEAR OUT OF CHANNELS FOR T-II NODE

CZAP3A	NHI	C3,1FFE		:CLEAR WAITING ZAP BIT (2000)
	LCS	K1,1
	STH	K1,,C2,R14	:SHOW THIS ENTRY FREE
	LB	T1,NODTYP,R14	:NODE TYPE
	CLH	C3,MXPORT,T1,T1	:IS THIS CIRCUIT TERMINATION
	JLE	CZAP1		:YES - NO FURTHER PROCESSING REQUIRED

	CLH	C3,MXPASS,T1,T1	:POSSIBLY A PASSTHROUGH?
	JGFS	CZAPCR		:NOT VALID AT HIGH END

	LR	T2,C3		:SAVE C3 FOR ZAP
	SH	T2,MNPASS,T1,T1	:PASSTHROUGH IF GE 0
	JGEFS	CZAP3D		:VALID BUFFER #

CZAPCR	HC	0,0		:CRASH - T-II ZAP REPORT UNCOVERED AN

				:INVALID BUFFER # IN T-I PERM TABLE

CZAP3D	LHL	T1,BITMAP,R14	:DISPLACEMENT TO BITMAP
	SRLS	T2,1		:BIT DISPLACEMENT FOR BUFFER PAIR
	SBT	T2,,T1,R14	:FREE BUFFER PAIR
	LIS	R0,0		:OUT OF PASSTHROUGHS BIT IN NODE DESCR
	RBT	R0,,R14		:SHOW NOT OUT OF PASSTHROUGHS
	JEFS	CZAP3		:WASN'T, DON'T NEED TO CLEAR LINES

	LIS	R0,NOPASS	:NOPASSTHROUGH BIT POSITION FOR LINE
	LHI	T1,LINPTR,R14	:DISPLACEMENT TO LINE DESCRIPTOR PTRS
	JFS	CZAP3C		:ENTER RESET LOOP

	:LOOP TO CLEAR OUT OF PASSTHROUGH BITS IN LINK STATUS

CZAP3B	LHL	T2,2,T1		:DISPLACEMENT TO STATUS BYTE
	RBT	R0,,T2,R14	:CLEAR OUT OF PASSTHROUGH BIT
	AIS	T1,4		:INCREMENT TO NEXT DESCRIPTOR PTR

CZAP3C	LHL	T2,,T1		:NODE #
	JNBS	CZAP3B		:IF MORE, CONTINUE

CZAP3	JAL	LINK,ZAP	:TRACE ZAPPER THRU NODE DESC'S
	J	CZAP1		:PROCESS NEXT ZAPPER

		:NEIGHBOR MISMATCH

CZAP4	LHI	R13,EM0150	:ERROR - NEIGHBOR MISMATCH IN ZAP
	LR	R14,C1		:T-2 NODE #
	JAL	LINK,ERRFIL,,	:R15 HAS T-I NODE #
	J	CZAP1		:CONTINUE PROCESSING

CZAP5	J	PTL,,		:RETURN TO TIMEOUT LIST PROCESSOR

:  TRACE A CIRCUIT ZAPPER THRU NODE DESC'S CLEARING ENTRIES
:  R15 - NODE #,  R14 - PTR TO NODE DESC,  C3 - BUFF #
:NOTE - ONLY CALLED FROM TIMEOUT ROUTINE, CZAP1.  BUFFER
:NUMBER SHOULD BE VALID DUE TO CONSISTENCY CHECKING
:BEFORE ZAPPEND.

ZAP	LR	R12,LINK	:SAVE LINK
	STH	R15,H7		:SAVE NODE # WHERE ZAP STARTS
	LCS	K2,1		:-1 FOR NULL BUFFER ENTRY
	LHI	C2,3FFE		:MASK FOR BUFFER #
	NR	C3,C2		:CLEAR HIGH SPEED BITS & USE EVEN BUFF #
	CLR	C2,C3		:THESE SHOULD BE DIFFERENT
	JNFS	ZAPA		:OK

	HC	0,0		:FATAL INCONSISTENCY

	:PROCESS CIRCUIT LEAVING NODE -CLEAR OUT OF PASSTHROUGHS IF WAS
	:PASSTHROUGH, CLEAR NOCHAN.
	IF	SUPMIC-1	:USE MICROCODE SEARCH IF SUPMIC>1

ZAPA	HC	9646		:LOAD R4 OF SET 3 WITH MASK (C2)
	LIS	T1,2		:SEARCH INCREMENT
	HC	9631		:LOAD R3 OF SET 1 WITH INCREMENT
	LHI	T1,LINPTR-LNKPSZ,R14 :SEARCH PERM TABLES FOR C3
	:LOOK AT NEXT LINK'S PERM TABLE

ZAPA1	AIS	T1,LNKPSZ	:PT TO NEXT LINE DESC PTR
	LHL	C5,LNKNOD,T1	:NEIGHBOR #
	JE	ZAPIT		:NOT FOUND - CHECK IF INTERNAL CIRCUIT

	LHL	T2,LNKDSP,T1	:DISPL TO LINK DESCRIPTOR
	AR	T2,R14		:ADDRESS OF STATUS FOR LINK
	LR	C6,T2		:SAVE ADDRESS TO LINK STATUS FOR LATER
	AIS	T2,LNKDSZ	:ADDRESS OF FIRST PERM TABLE ENTRY
	LHL	R0,LNKDSP+LNKPSZ,T1 :DISPL PAST END OF PERM TABLE FOR LINK
	AR	R0,R14		:ADDRESS PAST PERM TABLE ENTRY THIS LINK
	HC	9650		:LOAD R5 OF SET 3 WITH LIMIT ADDRESS
	HC	2B27		:SEARCH LIST FROM T2 FOR <C3> UNDER MASK
	J	ZAPA1		:NOT FOUND


	:FOUND THE BUFFER #
	HC	9644		:RESTORE R4 OF SET 3 WITH -1 MASK (K2)
	ELSE

ZAPA	LHI	T1,LINPTR-LNKPSZ,R14 :SEARCH PERM TABLES FOR C3
	:LOOK AT NEXT LINK'S PERM TABLE

ZAPA1	AIS	T1,LNKPSZ	:PT TO NEXT LINE DESC PTR
	LHL	C5,LNKNOD,T1	:NEIGHBOR #
	JE	ZAPIT		:NOT FOUND - CHECK IF INTERNAL CIRCUIT

	LHL	T2,LNKDSP,T1	:DISPL TO LINK DESCRIPTOR
	AR	T2,R14		:ADDRESS OF STATUS FOR LINK
	LR	C6,T2		:SAVE ADDRESS TO LINK STATUS FOR LATER
	AIS	T2,LNKDSZ	:ADDRESS OF FIRST PERM TABLE ENTRY
	LHL	R0,LNKDSP+LNKPSZ,T1 :DISPL PAST END OF PERM TABLE FOR LINK
	AR	R0,R14		:ADDRESS PAST PERM TABLE ENTRY THIS LINK
	SHTS(T2,R0,2,C2,C3,K1)
	J	ZAPA1		:NOT IN PERM TABLE THIS LINK


	:FOUND THE BUFFER #
	EI
	LR	C4,T2		:ENTRY ADDR - START ADDR OF LINK PERM TABLE
	SR	C4,C6		:=2*(CHANNEL # -1)
	LIS	R0,NOCHAN	:BIT POSITION OF OUT OF CHANNELS IN LINE STATUS
	RBT	R0,LNKST,C6	:CLEAR OUT OF CHANNELS
	STH	K2,,T2		:SHOW THIS ENTRY AVAILABLE
	LB	C1,NODTYP,R14
	NHI	C3,1FFE		:CLEAR OLD CIRCUIT BIT
	CH	C3,MXPASS,C1,C1	:CAN IT BE A PASSTHRU
	JGFS	ZAPCR1		:CRASH - INVALID BUFFER #

	CH	C3,MXPORT,C1,C1	:CAN IT BE A PORT
	JLE	ZAPB		:YES

	SH	C3,MNPASS,C1,C1	:IS THIS A PASSTHRU BUFFER
	JGEFS	ZAPA5		:YES

ZAPCR1	HC	0,0		:CRASH - INVALID BUFFER #

ZAPA5	SRLS	C3,1		:BIT POSITION IN PASSTHRU BIT MAP
	LHL	T2,BITMAP,R14	:DISPL TO BIT MAP
	SBT	C3,,T2,R14	:SHOW THIS PASSTHRU PAIR AVAILABLE
	LIS	R0,0		:BIT 0 IN NODE DESC SHOWS OUT OF PASSTHRUS
	RBT	R0,,R14		:SHOW NOT OUT OF PASSTHRUS
	JE	ZAPB		:WAS NOT OUT OF PASSTHRUS BEFORE

	:WAS OUT OF PASSTHROUGHS - CLEAR LINK ENTRIES
	LIS	R0,1
	AM	R0,TOPAPS	:COUNT # TIMES NODE GAINED PASSTHROUGHS
	LIS	R0,NOPASS	:BIT POSITION IN LINE STATUS BYTE
	LHI	T1,LINPTR,R14	:TURN OFF OUT OF PASSTHRUS BIT IN LINE STATUS'S
	JFS	ZAPA3		:ENTER RESET LOOP

ZAPA4	LHL	T2,LNKDSP,T1	:DISPL TO LINE DESC
	RBT	R0,LNKST,T2,R14	:CLEAR BIT IN LINE STATUS BYTE
	AIS	T1,LNKPSZ	:PT TO NEXT LINE DESC PTR

ZAPA3	LHL	T2,LNKNOD,T1	:NEIGHBOR #
	JNBS	ZAPA4		:NOT DONE, CONTINUE TO RESET LINE STATUS BYTES

	:GO TO NEXT NODE, PROCESS INCOMING CIRCUIT CHANNEL # IMPLIED BY <C4>
	:IDENTIFY BUFFER PAIR, CHECK IF PASSTHROUGH, RESET NOCHANNEL BIT.

ZAPB	LIS	T1,LINOUT	:LINK OUT BIT POSITION IN STATUS BYTE
	TBT	T1,,C6		:IS LINK OUT
	JNR	R12		:YES - RETURN

	LR	C6,R15		:LAST NODE #
	LR	R15,C5		:NEXT NODE #
	CLHI	R15,T2BN	:IS NEXT NODE # T-2
	JGER	R12		:YES - STOP PROCESING ZAPPER HERE

	LR	C5,R12		:SAVE SAVED LINK
	JAL	LINK,NODGET	:GET PTR TO NODE DESC
	J	,C5		:NOT COMPLETE - RETURN

	LR	R12,C5		:RESTORE SAVED LINK
	:SEARCH FOR LINK TO NEIGHBOR
	LHI	T1,LINPTR+LNKNOD,R14 :FIND LINE TO LAST NODE
	SHT(T1,LNKPSZ,C6,C5)
	J	KRASHX	:NEIGHBOR MISMATCH - FATAL ERROR

	:FOUND LINK TO NEIGHBOR
	LHL	T2,LNKDSP,T1	:DISPL TO LINE DESC (LINE STATUS BYTE)
	LIS	R0,NOCHAN	:BIT POSITION OF OUT OF CHANNELS IN LINE STATUS
	RBT	R0,LNKST,T2,R14	:CLEAR BIT IN LINE STATUS BYTE
	AR	C4,T2		:DISPL TO PROPER PERM TABLE ENTRY
	LH	C3,,C4,R14	:BUFFER #
	STH	K2,,C4,R14	:SHOW THIS ENTRY AVAILABLE
	CLR	C3,K2		:IS THIS A DEAD END
	JER	R12		:YES RETURN

	NR	C3,C2		:CLEAR HIGH SPEED BITS & USE EVEN BUFF #
	LB	C1,NODTYP,R14
	CH	C3,MXPASS,C1,C1	:CAN THIS BE A PASSTHRU
	JGR	R12		:NO - RETURN

	CLH	C3,MNPASS,C1,C1	:IS THIS A PASSTHRU
	JGE	ZAPA		:YES - FIND WHERE IT LEAVES

	JR	R12		:RETURN


	:BUFFER # NOT FOUND IN ZAP FOR EXTERNAL LINES,
	:SETUP TO USE ZAPI TO CLEAR IF INTERNAL

ZAPIT	HS	0
	IF	SUPMIC-1
	HC	9644		:RESTORE DEFAULT MASK IF RETURN
	EI
	CLH	R15,H7		:IS THIS THE NODE STARTING THE ZAP?
	JNR	R12		:NO - RETURN TO CALLER

	CLHI	R15,MXBASE	:DID WE START AT A BASE?
	JGR	R12		:NO - RETURN


	:SEARCH INTERNAL PERMUTER TABLE FOR BUFFER # <C3>
	:UNDER 3FFE MASK.  CALLING ROUTINE GUARANTEES <C3> IS NOT 3FFE,
	:SO MATCH WITH NULL ENTRY (-1) IS IMPOSSIBLE.
	:<T1> IS ADDRESS OF LINK DESCRIPTOR PTR FOR INTERNAL PERM TABLE,
	:<R14> IS ADDRESS OF NODE DESCRIPTOR.
	:CALLED FROM CZAP0C FOR INITIAL REPORT FROM BASE
	:AND DROPPED INTO FROM ZAPIT (ABOVE) FROM ZAP ROUTINE WHEN
	:CLEARING CIRCUIT AFTER ZAPPER TIMEOUT.
	:<R12> IS LINK REGISTER
	:EXPECTS <K2> = -1, <C2> = MASK OF 3FFE

ZAPI	LHL	T2,LNKDSP,T1	:DISPL TO INTERNAL PERM TABLE
	AR	T2,R14		:START ADDRESS OF INTERNAL PERM TABLE
	LR	C6,T2		:REMEMBER FOR LATER
	LHL	R0,LNKDSP+LNKPSZ,T1	:DISPL PAST END OF NODE DESC
	AR	R0,R14		:ADDRESS PAST END OF INTERNAL PERM TABLE
	IF	SUPMIC-1	:USE MICROCODE SEARCH IF SUPMIC>1
	HC	9646		:LOAD R4 OF SET 3 WITH MASK (C2)
	LIS	K1,2		:INCREMENT
	HC	9633		:LOAD R3 OF SET 3 WITH INCREMENT (K1)
	HC	9650		:LOAD R5 OF SET 3 WITH LIMIT ADDRESS (R0)
	HC	2B27		:SEARCH FROM <T2> FOR <C3>
	:NOT FOUND
	HC	9644		:RESTORE NULL MASK
	JR	R12		:RETURN

	:FOUND ENTRY
	HC	9644		:RESTORE NULL MASK
	ELSE
	SHTS(T2,R0,2,C2,C3,K1)
	JR	R12		:RETURN NOT FOUND

	HC	0		:2ND 1/2 WORD OF RETURN

	:FOUND ENTRY
	EI
	STH	K2,,T2		:SHOW ENTRY FREE
	SR	T2,C6		:DISPL INTO INTERNAL PERM TABLE
	XHI	T2,2		:DISPL TO OTHER HALF OF PAIR
	AR	T2,C6		:ADDRESS OF OTHER HALF
	LHL	K1,,T2		:OTHER PERM VALUE
	THI	K1,1		:IF ODD THEN -1 OR TERMINAL INITIATED CIRCUIT
	JER	R12		:TRUE AUX CIRCUIT - RETURN

	STH	K2,,T2		:SHOW THIS PERM TABLE POSITION AVAILABLE
	JR	R12		:RETURN


:  DEASSIGN PORT # IN R13, R14 IS PTR TO NODE DESC, R15 HAS BASE #
:  RETURN IF INVALID T-I PORT, ELSE SKIP RETURN.
:NOTE - IF T-II NODE, THIS IS A NOP AS ZAPR IS CALLED
:TO CLEAN UP PORT ASSIGNMENTS WHEN A CIRCUIT CAN'T BE COMPLETED
:DURING CIRCUIT BUILDING.

ZAPR	LB	T1,NODTYPE,R14
	CLHI	T1,9		:IS IT T-II NODE
	JE	4,LINK		:YES - RETURN

	LHL	T2,BITMAP,R14	:DISPL TO BIT MAPS
	AH	T2,PASSTHRUS,T1,T1 :ADD # OF BYTES IN PASSTHRU MAP - DISPL TO PORT MAP
	LHL	T1,MXPORT,T1,T1	:MAX PORT BUFF #
	SRLS	T1,1		:MAX PORT #
	CR	R13,T1		:IS PORT # IN RANGE
	JGR	LINK		:NO - INVALID, RETURN

	SBT	R13,,T2,R14	:SET PORT MAP BIT TO SHOW BUFFER PAIR FREE
	J	4,LINK

	EI


::
:
	SUBTTL PATH FINDING & RELATED CODE

:THIS PROGRAM IS THE SOLE PROPERTY AND CONFIDENTIAL INFORMATION OF
:TYMSHARE INC., AND MAY NOT BE COPIED IN WHOLE OR IN PART OR
:DISCLOSED TO ANY THIRD PARTY WITHOUT THE PRIOR WRITTEN CONSENT OF
:TYMSHARE.



	:DIRECT, SPROUT & RELATED ROUTINES

:  DIRECT - OBTAIN PATH FOR A USER CIRCUIT.


:  COMPUTE DIRECTION POINTERS FOR MAPPED DESTINATION NODES IN DIRLST,
:  THE SOURCE NODE # IN LOGID.  RETURNS UNMAPPED DEST NODE # IN H1,
:  HOST IF ANY IN BILHST.  DIRBYT FOR DESTINATION NODES IS INITIALIZED
:  TO 0 (NO HOST) OR 8000+HOST # PRIOR TO CALL.
:  FLAGS & PARAMETERS -
:  R13 IS ADDRESS OF  LINK COST TABLE
:  UIRCRF IS USER IRC RESTRICTION (0 IF NONE)
:  R0=0--> CONSIDER ALL NODES, NON-ZERO --> CONSIDER ONLY T-II NODES
:NOTE - DIRLIST MAY NOT BE EMPTY!!



DIRECT	STM	R0,DIRSAV	:SAVE ALL REGISTERS
	LIS	R14,0
	STH	R14,UIRC	:INITIALIZE UIRC TO 0
	LHL	R14,LOGID	:GET UNMAPPED SOURCE NODE
	LR	R0,R0		:RESTRICTED TO T-II?
	JN	DIRKL0		:YES (REBUILD)


	IF 	1-RGN001	:&%06

	IF	SNETS		:&&03
	LHL	R15,DIRLIST	:GET A MAPPED TARGET NODE
	LB	R15,SNETNT,R15,	:GET SUBNET NUMBER
	AR	R15,R15		:CONVERT TO 1/2 OF WORD INDEX
	L	R15,SNETBA,R15,R15 :THIS IS PASSTHROUGH BIT ARRAY TO USE
	ELSE			:&@03
	LI	R15,ANPBIT 	:BIT ARRAY FOR ALL NODES
	EI			:&%03
	J	DIRKL1		:CONTINUE

	ELSE			:&&06


	:SEARCH FOR A REGION BASED ON THE SOURCE NODE AND
	:DESTINATION NODE(S).  REGION BIT ARRAY RETURNED IN R15.

	IF	SNETS		:&&03
	LHL	R15,DIRLIST	:GET A MAPPED TARGET NODE
	LB	R15,SNETNT,R15,	:GET SUBNET NUMBER
	JNFS	SEAF00		:NOT MAIN NET, USE SUBNET INSTEAD OF REGIONS

		:MAIN NET - USE REGIONS
	L	C6,RGCURT,,	:LOAD ADDRESS OF CURRENT REGION SET
	LH	T2,OKFLAG,C6	:IS THERE A REGION
	JNFS	SEAFLP		:REGION BUILT ,OK

		:DON'T HAVE REGIONS USE MAIN SUBNET
SEAF00	AR	R15,R15		:CONVERT TO 1/2 OF WORD INDEX
	L	R15,SNETBA,R15,R15 :THIS IS PASSTHROUGH BIT ARRAY TO USE
	ELSE			:&@03
	L	C6,RGCURT,,	:LOAD ADRESS OF CURRENT REGION SET
	LH	T2,OKFLAG,C6	:IS THERE A REGION
	JNFS	SEAFLP		:REGION BUILT ,OK
	LI	R15,ANPBIT 	:BIT ARRAY FOR ALL NODES
	EI			:&%03
	J	DIRKL1		:SKIP SEARCH

	:ALTERNATE METHODS/STATISTICS GATHERING TO EVALUATE
	:EFFECTIVENESS AND TO KEEP REGIONS LARGE ENOUGH.
SEAFLP	HS	0

	IF 	FLPTIM
	LIS	T2,1
	AM	T2,CNTTOT,,	:COUNT TOTAL LOGINS
	L	T2,FASTC,,	:LOAD START TIME
	ST	T2,FLTIME,,	:SAVE START TIME
	LIS	T2,2		:SET BIT 2 OF SEAFLAG
	SBT	T2,SEAFLAG,,	:FOR TIMING TEST
	LCS	T2,1		:CHECK FLIP FLOP
	XH	T2,FLIP,,	:INVERSE FLIP
	STH	T2,FLIP,,	:STORE FLIP
	JGEFS	SEAREG		:JUMP IF ZERO

	LIS	T2,1
	AM	T2,CNTFLP,,	:COUNT FLOP LOGINS

	IF	SNETS		:&&03
	L	R15,SNETBA,,	:GET ADDRESS OF MAIN NET'S BIT ARRAY
	ELSE			:%@03
	LI	R15,ANPBIT	:LOAD ADDRESS OF BIT ARRAY
	EI			:&%03
	J	DIRKL1		:DEFAULT TO ANPBIT

	EI

	IF	-FLPTIM
	LCS	T2,1		:DECR OF FLIP
	AH	T2,FLIP,,	:DECR FLIP
	JEFS	SEAREF		:IF 0 GO TO SEAREF

	STH	T2,FLIP,,	:STORE NEW FLIP
	JFS	SEAREG		:NO ACTION GO ON

SEAREF	LHI	T2,NBFLIP	:LOAD NB OF FLOPS
	STH	T2,FLIP,,	:RESTORE FLIP
	LIS	T2,1		:INCR NB OF FLIP
	AM	T2,CNTFLP,,	:COUNT NB OF FLIPS
	LIS	T2,3		:ADRESS OF BIT FOR FLIP
	SBT	T2,SEAFLAG,,	:SET FLAG 
	EI

	:ENTRY POINT FOR 2ND PASS IF FAILURE
SEAREG	LIS	T2,0		:LOAD ADRESS OF BIT
	RBT	T2,SEAFLAG,,	:CHECK FLAG
	JE	SEAR01		:NOT PASSED, GO ON

	LIS	R13,1
	AM	R13,CNTRG2,,	:COUNT FAILURES	
	L	R13,DIRSAV+R13^2 :RESTORE COST TABLE ADRESS
	LH	R14,LOGID	:RESTORE UNMAPPED SOURCE NODE

SEAR3A	LIS	K1,0		:INCR

SEAR03	LH	R15,SAVDIR,K1,	:LOAD NODE NB
	STH	R15,DIRLIS,K1	:STORE IN INTO DIRLIS
	JEFS	SEAR04		:IF 0 END OF LIST

	LHL	K2,SAVDIB,K1,	:LOAD HOST NB
	STH	K2,DIRBYT-2,R15,R15 :STORE IT
	AIS	K1,2		:INCREMENT INDEX
	JBS	SEAR03		:GO ON

SEAR04	LIS	K1,1		:LOAD BIT ADRESS
	SBT	K1,SEAFLAG,,	:SET BIT TO SHOW 2ND PASS
	IF	SNETS		:&&03
	L	R15,SNETBA,,	:ADDRESS OF MAIN NET'S BIT ARRAY
	ELSE			:&@03
	LI	R15,ANPBIT	:LOAD ADRESS OF BIT ARRAY
	EI			:&%03
	J	DIRKL1

SEAR01	NMAP(R14)
	LR	R12,R13		:COPY COST TABLE ADDRESS
	LCS	K1,2		:MAX NB OF BYTES FOR MULTITARGETING

SEAR00	AIS	K1,2		:
	LH	R13,DIRLIS,K1,	:ADDRESS OF DIRLIS
	STH	R13,SAVDIR,K1,	:SAVE DIRLIS IN SAVDIR
	JEFS	SEAR10		:SIMPLE TARGETTING,GO TO SEARCH

	LHL	K2,DIRBYT-2,R13,R13 :SAVE DIRBYT
	STH	K2,SAVDIB,K1,	:INTO SAVDIB
	JBS	SEAR00

SEAR10	CLHI	K1,2		:SIMPLE TARGETTING ?
	JGFS	SEAR11		:NO,GO TO SEAR11

	:SINGLE TARGET
	LH	R13,DIRLIS,,	:YES GET DESTINATION NODE
	LI	LINK,SREND1	:ADRESS TO JUMP FOR SIMPLE TARGETTING
	J	SEARCH		:YES,GO TO SEARCH


	:MULTI-TARGETING - CHECK IF EXCEEDS THRESHOLD (2)

SEAR11	CLHI	K1,6		:TOO MANY TARGETS ?
	IF	SEFAIL
	JLE	SEAR12		:NO

	ELSE
	JLEFS	SEAR12		:NO

	EI

	IF	FLPTIM
	LIS	K1,1
	AM	K1,CNTMLT,,	:COUNTER FOR MULTITARGETTING
	EI


	:UPDATE SDNHST HISTORY RING
	:AND DO NORMAL CIRCUIT BUILD

SEABOR	HS	0
	IF	SNETS		:&&03
	L	R15,SNETBA,,	:ADDRESS OF MAIN NET BIT ARRAY
	ELSE			:&@03
	LI	R15,ANPBIT 	:ADRESS OF PASSTHROUGHS BIT ARRAY
	EI			:&%03

	LHL	K1,SDNHIX,,	:LOAD ADRESS IN HISTORY RING
	CLHI	K1,SDNHSZ-8	:COMPARE WITH END OF CURRENT BUFFER
	JNFS	SEAWRT		:NOT LAST WORD, OK

	SIS	K1,4		:OVERLAY LAST WORD

SEAWRT	STH	R14,SDNHST,K1,	:STORE SOURCE IN HISTORY BUFFER
	STH	R13,SDNHST+2,K1, :STORE DESTINATION INTO HISTORY BUFFER
	AIS	K1,4		:INCREMENTE INDEX INTO HISTORY BUFFER
	STH	K1,SDNHIX,,	:STORE INDEX
	LIS	K1,0		:
	RBT	K1,SEAFLAG,,	:RESET REGION FLAG
	LR	R13,R12		:RETURN COST TABLE ADDRESS
	IF	FLPTIM
	LIS	K1,1		:COUNT FAILURES
	AM	K1,CNTRER,,	:FAILURES COUNTER
	EI
	J	DIRKL1		:RETURN


	:ENTRY POINT TO SEARCH FOR MULTIPLE TARGETS
	:AND TO CREATE A REGION

SEAR12	LH	R13,DIRLIS,,	:LOAD DESTINATION NODE
	LI	LINK,SEAR20	:LINK FOR MULTI TARGETTING


	:ENTRY POINT TO SEARCH FOR A SINGLE TARGET

SEARCH	LR	T2,R14		:COPY MAPPED SOURCE NODE
	AR	T2,T2		:2*SOURCE MAPPED NODE NUMBER
	LH	T1,ADLIST,T2,C6 :LOAD DESTIN
	JL	SEABOR		:NO CALLS FROM THIS NODE

	AI	T1,DEFLIST,C6	:ADDRESS OF BEGINNING OF LIST
	SHT(T1,DEFINC,R13,T2)	:SEARCH LIST
	J 	SEABOR		:NOT FOUND, GO TO INVERSE

	:GET REGION ADDRESS
	LHL	R15,2,T1,	:LOAD REGION
	AI	R15,REGION+2,C6	:ADRESS OF REGION
	ST	R15,SAVRGN,,	:SAVE ADRESS OF REGION
	LIS	T2,0
	SBT	T2,SEAFLAG,,	:SET BIT TO SHOW OK
	JR	LINK		:RETURN

	:RETURN ADDRESS FOR MULTI-REGION CONSTRUCTION
SEAR20	LR	K2,R15		:SAVE ADRESS
	LIS	K1,0		:LOAD INDEX

SEAR22	AIS	K1,2		:INCR INDEX
	LH	R13,DIRLIS,K1,	:LOAD NODE#
	JNFS	SEAR23		:FINISHED

	J	SREND1		:RETURN

SEAR23	JAL	LINK,SEARCH,,	:SEARCH NEXT ONE
	CR	R15,K2		:SAME REGION ?
	JEBS	SEAR22		:YES, GO ON

	LI	LINK,SEAR25	:LOAD ADRESS OF RETURN

SEAROR	LHI	T1,LENREG-5	:LOAD LENGTH OF REGION

SEAR21	LH	R13,,K2,T1	:LOAD PART OF REGION
	N	R13,,R15,T1	:OR REGION
	ST	R13,REBIAR,T1,
	SIS	T1,4		:DECR INDEX
	JGBS	SEAR21		:FINISHED ?

	LH	R13,,K2,	:LAST WORD PROCESS
	N	R13,,R15,	:
	ST	R13,REBIAR,,
	JR	LINK

	

SEAR25	AIS	K1,2		:DECR INDEX
	LR	C1,R15		:COPY REGION ADRESS
	LH	R13,DIRLIS,K1,	:LOAD NODE NUMBER
	JNFS	SEAR30		:NOT FINISHED

SREND	LI	R15,REBIAR	:LOAD REGION ADRESS
	LCS	T1,1
	ST	T1,SAVRGN,,	:PUT -1 TO SHOW MULTITARGETTING

SREND1	LR	R13,R12		:RETURN COPY TABLE ADDRESS
	LIS	T2,1
	AM	T2,CNTRG1,,	:COUNT LOGINS FOR REGIONS
	J	DIRKL1		:RETURN

SEAR30	JAL	LINK,SEARCH,	:PROCESS NEXT ONE
	CR	R15,C1		:SAME REGION
	JE	SREND		:FINISHED

	CR	K2,R15		:SMAE REGION
	JE	SREND

	LI	K2,REBIAR
	JAL	LINK,SEAROR

	J	SREND		:FINISHED

	EI


DIRKL0	LI	R15,T2BIT	:ONLY T-II NODES

DIRKL1	STM	R13,SPRLCT	:SAVE PARAMETERS
	L	C3,FASTC,,	:KEEP TRACK OF TIME SPENT IN DIRECT
	ST	C3,DIRST	:SAVE
	LIS	C6,1
	AM	C6,DIRCNT	:COUNT # OF TIMES DIRECT ROUTINE CALLED
	IF	IRC		:&&01
	LHL	C1,UIRCRF	:CHECK IRC RESTRICTION
	JE	DIRKL3		:NO RESTRICTION

	:USER IRC RESTRICTION - TSHUT NOT OK IRC LINES
	LIS	R0,1		:FLAG FOR TSHUT TO SHUT LINE
	STH	R0,TMPA		:FLAG FOR TSHUT TO SUPPRESS DIAGNOSTICS
	LCS	C2,1		:INDEX THRU LIST1A (BYTES)

DIRKL2	AIS	C2,1
	L	C6,LIST1A,,	:GET ADDR OF IRC DESIGNATOR LIST
	LB	T1,,C2,C6	:NEXT IRC DESIGNATOR
	LR	T1,T1		:IS THIS END OF LIST
	JE	DIRKL3		:YES

	CLR	T1,C1		:IS THIS THE OK IRC
	JEBS	DIRKL2		:YES - LOOP

	SLLS	C2,2		:INDEX WORD TABLE
	LHL	C3,LIST1,C2,	:MAPPED NODE #
	UMAP(C3)
	EXHR	C3,C3
	IF	1-FULLTI	:SIMPLIFY IF FULL T-I
	LHL	R15,LIST1+2,C2,	:OTHER MAPPED NODE # OF LINK
	UMAP(R15)
	OR	R15,C3		:NODE # PAIR FOR LINK TO BE SHUT
	ELSE
	L	R15,LIST1,C2,	:PAIR OF NODES
	EI
	TS	TMPC		:INIT FLAG TO SEE IF LINK ALREADY SHUT
	JAL	LINK,TSHUT,,	:SHUT THIS LINK
	SRLS	C2,2		:INDEX BYTE TABLE
	LH	T1,TMPC		:WAS LINK SHUT BEFORE
	JL	DIRKL2		:NO

	L	C6,LIST1A,,	:GET ADDR OF IRC DESIGNATOR LIST
	LB	T1,,C2,C6	:NEXT IRC DESIGNATOR
	OHI	T1,80		:SHOW LINK WAS SHUT BEFORE
	STB	T1,,C2,C6	:SAVE FLAG
	J	DIRKL2

	EI			:&@01

DIRKL3	JAL	LINK,SPROUT	:BUILD THE CIRCUIT
	J	DIR4A		:LIST OVERFLOW

	:PATH FINDING COMPLETE

DIR5	LHI	T2,0FFF		:CONSTANT TO TEST FOR INFINITE COST
	CLR	R0,T2		:IF LESS THAN MAYBE A PATH EXISTS
	JLFS	DIR6		:PATH MAY EXIST

	J	DIR5A		:PATH DOES NOT EXIST

DIR6	LR	C6,C1		:2*MAPPED SOURCE NODE #
	LCS	K1,1		:INITIALIZE LINK COUNT
	LIS	K2,1		:CONSTANT TO INCRENT PASS. + DESTINATION COUNT
	JFS	DIR6B		:ENTER TRACE & CONSISTENCY LOOP

DIR6A	LR	C6,T1		:SAVE NODE #
	AR	C6,C6		:DOUBLE IT
	IF	PUB		:&&00
	AM	K2,PDCCNT,C6,C6 :INCREMENT PASSTHROUGH + DEST. COUNT
	EI			:&@00

DIR6B	CLH	T2,COSTV-2,C6,	:COST DEFINED?
	JNFS	DIR6C		:YES

	J	KRASBB		:NO, INCONSISTENT - FATAL ERROR

DIR6C	AIS	K1,1		:INCREMENT NODE COUNT
	LH	T1,DIRBYT-2,C6,	:NEXT NODE OR END OF CIRCUIT MARKER
	JGBS	DIR6A		:NOT AT END OF CIRCUIT

	NHI	T1,7FFF		:DELETE POSSIBLE FLAG BIT
	STH	T1,BILHST	:DESTINATION HOST (IF NON-ZERO)
	SRLS	C6,1		:NODE # OF DESTINATION, MAPPED
	STH	C6,H1		:SAVE MAPPED DEST NODE # & SHOW PATH EXISTS
	LR	C2,C6		:SAVE FOR LATER
	CLHI	R0,800		:THIS TEST IS SUFFICIENT BUT NOT NECESSARY
	JLFS	DIR7		:A PATH EXISTS

	AR	C6,C6		:A PATH EXISTS ONLY IF DEST OUT OF PASSTHRUS
	L	R14,NODTBP,C6,C6 :ADDR OF NODE DESC
	JGFS	DIR6D		:DESCRIPTOR COMPLETE

	J	KRASHQ		:NODE DESC NOT COMPLETE - FATAL ERROR

DIR6D	LH	T2,,R14		:IF SIGN BIT ON THEN OUT OF PASSTHRUS
	JGE	DIR5A		:NOT ON - REJECT LOGIN

:  A PATH EXISTS - ACCUMULATE STATISTICS & SETUP FOR SKIP RETURN

DIR7	L	C6,FASTC,,	:TIME AT EXIT
	S	C6,DIRST	:TIME STARTED
	AM	C6,DIRTIM	:ACCUMULATE TIME
	AM	K1,DIRLCT	:INCREMENT RUNNING COUNT OF LINKS IN PATHS

	IF	RGN001		:&&06
	:THIS PART OF THE CODE IS USEFUL ONLY WHEN A PATH IS NOT FOUND 
	:AT ONCE. IT TRACES THE PATH AND RESET THE BITS IN THE CORRESPONDING 
	:REGION

	LIS	T2,0		:OFFSET FOR FLAG
	RBT	T2,SEAFLAG,,	:RESET FLAG
	LIS	T2,1		:OFFSET FOR FLAG
	RBT	T2,SEAFLAG,,	:CHECK FLAG
	JE	DIR7M		:NO ERROR IN REGION

	L	T2,SAVRGN,,	:LOAD REGION ADRESS
	JL	DIR7M		:IF ADRESS<0 , SKIP

	:ADD PATH TO REGION (2ND PASS)
	LH	C3,DIRBYT-2,C1, :LOAD FIRST NODE
	RBT	C3,,T2		:RESET BIT TO SHOW IN REGION

DIR7N	LH	C4,DIRBYT-2,C3,C3	:LOAD NEXT NODE
	JLEFS	DIR7M		:END OF LIST

	RBT	C3,,T2		:RESET BIT TO SHOW IN REGION
	LR	C3,C4		:SAVE NODE#
	JBS	DIR7N		:GO ON

DIR7M	HS	0
	IF	FLPTIM
	LIS	T2,2		:ADRESS OF BIT IN SEAFLAG
	RBT	T2,SEAFLAG,,	:RESET BIT 
	JE	DIR7P		:NO TIMING, JUMP

	L	T2,FASTC,,	:LOAD TIME OF EXIT
	S	T2,FLTIME,,	:COUNT TIME SPENT
	LH	C3,FLIP,,	:CHECK FLIP FLOP
	JGEFS	DIR7P1		:REGION USED

	AM	T2,FLNORG,,	:NO REGIONS
	JFS	DIR7P		:COUNT DONE

DIR7P1	AM	T2,FLREGN,,	:REGIONS TIMING	
	EI

	IF	-FLPTIM
	LIS	T2,3		:LOAD ADRESS OF BIT
	RBT	T2,SEAFLAG,,	:RESET BIT FOR FLIP
	JE	DIR7P		:NO FLIP, DON'T BOTHER

	L	T2,FLMREG,,	:LOAD REGION ADRESS
	LH	C3,DIRBYT-2,C1, :LOAD FIRST NODE
	RBT	C3,,T2		:RESET BIT TO SHOW IN REGION
	JEFS	DIR7N1		:IF ALREADY RESET,DONT COUNT

	LIS	C5,1
	AM	C5,BSTCNT,,	:COUNT BIT IF RESET

DIR7N1	LH	C4,DIRBYT-2,C3,C3	:LOAD NEXT NODE
	JLEFS	DIR7M		:END OF LIST

	RBT	C3,,T2		:RESET BIT TO SHOW IN REGION
	JEFS	DIR7N2		:IF ALREADY RESET,DONT COUNT

	LIS	C5,1
	AM	C5,BSTCNT,,	:COUNT BIT IF RESET

DIR7N2	LR	C3,C4		:SAVE NODE#
	JBS	DIR7N1		:GO ON

	EI
	EI			:&@06

DIR7P	LR	T2,C1		:2*MAPPED SOURCE NODE #
	SRLS	T2,1		:MAPPED SOURCE NODE #
	CLH	K1,MAXPLC	:IS PATH LENGTH LOCAL MAX
	JLEFS	DIR7C		:NO

	STH	K1,MAXPLC	:LOCAL MAX PATH LENGTH
	STH	T2,MAXPLS	:ASSOCIATED SOURCE
	STH	C2,MAXPLD	:ASSOCIATED DESTINATION NODE

DIR7C	HS	0
	LHL	C3,SDNHIX,,	:INDEX HISTORY RING FOR SOUCE-DESTINATIONS
	STH	T2,SDNHST,C3,	:REMEMBER SOURCE NODE
	STH	C2,SDNHST+2,C3,	:AND DESTINATION NODE
	AIS	C3,4
	NHI	C3,SDNHSZ-4	:MASK
	STH	C3,SDNHIX,,	:UPDATE INDEX

	IF	SDDISK		:&&05
	:HANDLE DOUBLE BUFFERED DISK HISTORY
	CLHI	C3,SDNHSZ-4	:INDEX AT LAST WORD OF RING?
	JN	DIR7G		:NO - CHECK FOR END OF FIRST BUFFER

	L	C4,SLOWC,,	:ELSE TIME STAMP
	A	C4,TIME		:COMPLETE WITH DATE
	ST	C4,SDNHST,C3,	:LAST WORD OF RING
	LHI	C3,SDNHSZ/2	:LOAD INDEX TO SECOND HALF RING
	STH	C3,SDNHIX,,	:ASSUME ERROR - RECOLLECT SECOND HALF
	LH	C4,SDDSK1,,	:LOAD STATUS OF LAST WRITE
	JGEFS	DIR7F		:WRITE COMPLETE - GO CHECK WRITE ERROR

DIR7I	LIS	C3,1		:ELSE
	AHM	C3,SDSLOS,,	:ADD ONE TO LOST BUFFER COUNT
	J	DIR7E		:CONTINUE PROCESS

DIR7F	LIS	C5,0		:INDEX FIRST HALF OF RING
	LI	C3,SDNHST+(SDNHSZ/2) :ADDRESS SECOND HALF OF RING
	J	DIR7H		:CHECK FOR ERROR AND WRITE OR REWRITE

DIR7G	CLHI	C3,(SDNHSZ/2)-4	:INDEX AT LAST WORD OF FIRST HALF RING?
	JN	DIR7E		:NO - CONTINUE PROCESS

	L	C4,SLOWC,,	:ELSE TIME STAMP
	ST	C4,SDNHST,C3,	:LAST WORD OF FIRST HALF RING
	LIS	C3,0		:LOAD INDEX TO FIRST HALF RING
	STH	C3,SDNHIX,,	:ASSUME ERROR - RECOLLECT FIRST HALF RING
	LH	C4,SDDSK1,,	:LOAD STATUS OF LAST WRITE
	JL	DIR7I		:WRITE INCOMPLETE - GO ADD ONE TO COUNT

	LHI	C5,SDNHSZ/2	:INDEX SECOND HALF
	LI	C3,SDNHST	:ADDRESS FIRST HALF OF RING

DIR7H	LB	C4,SDDSK1,,	:REMOVE LOCAL UNIT
	JE	DIR7J		:IF LAST WRITE WAS GOOD - SET UP WRITE

	DECHK(SDDSK1`,`,)	:COMMON ERROR ROUTINE
	L	C5,SDDSK1+SHRPOS,, :ELSE FLAG SECTOR CAUSING ERROR
	STH	C5,SDERR,,	:SAVE LAST SECTOR IN ERROR
	LIS	C4,1		:ADD ONE
	AHM	C4,SDERRC,,	:TO COUNT OF WRITE ERRORS
	JFS	DIR7K		:GO ISSUE REWRITE

DIR7J	ST	C3,SDDSK1+SHRVMA,, :STORE ADDRESS OF BUFFER
	STH	C5,SDNHIX,,	:INDEX NEW CURRENT BUFFER
	LHL	C5,SDNSEC,,	:LOAD NEW SECTOR ADDRESS
	ST	C5,SDDSK1+SHRPOS,, :STORE SECTOR ADDRESS

DIR7K	LHI	C3,SDLU+8100	:SET CODE FOR WRITE W/O SLEEP
	STH	C3,SDDSK1+SHRRS,, :STORE REQUEST CODE IN PARM BLOCK
	LHI	C3,SDNHSZ/2	:LOAD LENGTH OF BUFFER
	ST	C3,SDDSK1+SHRCNT,, :SAVE IN PARM BLOCK
	SVC	SHARE,SDDSK1,,	:ISSUE WRITE REQUEST
	AIS	C5,SDNHSZ/200	:ADD SECTORS USED
	CLHI	C5,SDMAXS	:COMPARE TO LAST SECTOR ADDRESS
	JLEFS	DIR7L		:IF LESS OR EQUAL - KEEP GOING

	LIS	C5,0		:ELSE WRAP AROUND

DIR7L	STH	C5,SDNSEC,,		:SAVE NEXT ADDRESS

DIR7E	HS	0		:END POINT OF SDN WRITE LOGIC
	EI			:&@05


	IF	PUB		:&&00
	LIS	C3,1
	AM	K1,SNLCNT,C1,C1 :SUCCESSFUL SOURCE NODE LINK COUNT
	AR	C2,C2		:MAKE DEST NODE 1/2 WORD WORD INDEX
	AHM	C3,DNCCNT,C2,	:SUCCESSFUL DESTINATION NODE COUNT
	AM	K1,DNLCNT,C2,C2	:SUCCESSFUL DESTINATION NODE LINK COUNT
	SRLS	C2,1		:RESTORE MAPPED NODE #
	EI			:&@00
	LIS	C3,1
	AM	C3,DIRPCT	:INCREMENT RUNNING COUNT OF PATHS BUILT
	NHI	R0,7FF		:STRIP POSSIBLE OUT OF PASSTHROUGHS BIT
	CLH	R0,MAXPLC+2	:COMPARE TO LOCAL MAX PATH COST
	JLEFS	DIR7D		:NOT NEW LOCAL MAX

	STH	R0,MAXPLC+2	:NEW LOCAL MAX
	STH	T2,MAXPCS	:ASSOCIATED SOURCE NODE
	STH	C2,MAXPCD	:ASSOCIATED DESTINATION NODE

DIR7D	AM	R0,DIRTPC	:AGGREGATE TOTAL PATH COST
	IF	PUB		:&&00
	CLHI	K1,PLSMAX	:MORE THAN MAX LINKS?
	JLEFS	DIR7A		:NO

	LHI	K1,PLSMAX	:TRUNCATE AT MAX LINKS

DIR7A	SLLS	K1,4		:MAKE A STAT TABLE INDEX (20X BYTES/ENTRY)
	LA	K1,PLSTAT,K1,K1	:USE RX2 ADDRESSING
	AM	C3,PLCNT,K1	:COUNT NUMBER OF PATHS WITH THIS MANY LINKS
	AM	C6,PLTIME,K1	:AGGREGATE DIRECT TIME FOR THIS LENGTH
	AM	R0,PLCOST,K1	:AGGREGATE PATH COSTS FOR THIS LENGTH
	CLH	R0,PLMCST,K1	:DOES PATH COST EXCEED MAX FOR THIS LENGTH?
	JLEFS	DIR7B		:NO

	STH	R0,PLMCST,K1	:REMEMBER MAX COST FOR THIS LENGTH PATH
	STH	C2,PLMCDN,K1	:REMEMBER MAPPED DESTINATION NODE
	STH	T1,PLMCDH,K1	:REMEMBER DESTINATION HOST
	STH	T2,PLMCSN,K1	:REMEMBER MAPPED SOURCE NODE #

DIR7B	HS	0
	EI			:&@00


	LIS	T1,4
	AM	T1,DIRSAV+LINK^2 :SETUP FOR SKIP RETURN




DIRCOM	HS	0
	IF	IRC		:&&01
:  SEARCH IRC COST ROTATION LISTS
	LHL	C3,UIRCRF	:CHECK IRC RESTRICTION
	JE	DIRKL5		:NO RESTRICTION - ROTATE

:	USER IRC RESTRICTION - UNSHUT TEMP SHUT LINES
	STH	C3,UIRC		:SAVE RESTRICTION FOR ACCOUNTING
	LIS	R0,0		:FLAG FOR TSHUT TO UNSHUT LINK
	STH	R0,TMPA		:FLAG FOR TSHUT TO SUPPRESS DIAGNOSTICS
	LCS	C2,1		:INDEX THRU LIST1A (BYTES)

DIRKL8	L	C6,LIST1A,,	:GET ADDR OF IRC DESIGNATOR LIST

DIRKL7	AIS	C2,1
	LB	T1,,C2,C6	:NEXT IRC DESIGNATOR
	JNFS	DIRKL6		:NOT END OF LIST

	J	DIRJ		:END OF LIST - RETURN

DIRKL6	CLR	T1,C3		:IS THIS THE OK IRC
	JEBS	DIRKL7		:YES - LOOP

	THI	T1,80		:WAS THIS LINK SHUT BEFORE
	JEFS	DIRKL4		:NO

	NHI	T1,7F		:CLEAR FLAG BIT
	STB	T1,,C2,C6
	J	DIRKL7

:		LINK NOT SHUT BEFORE

DIRKL4	SLLS	C2,2		:INDEX WORD TABLE
	IF	FULLTI		:SIMPLIFY CODE FOR FULL TI RANGE
	L	R15,LIST1,C2,	:NODE PAIR
	ELSE
	LHL	K1,LIST1,C2,	:MAPPED NODE #
	UMAP(K1)
	EXHR	K1,K1
	LHL	R15,LIST1+2,C2,	:OTHER MAPPED NODE # OF LINK
	UMAP(R15)
	OR	R15,K1		:NODE # PAIR FOR LINK TO BE UNSHUT
	EI
	JAL	LINK,TSHUT,,	:UNSHUT THIS LINK
	SRLS	C2,2		:INDEX BYTE TABLE
	J	DIRKL8



:	NO USER IRC RESTRICTION - ROTATE PENALITIES

DIRKL5	LHL	C6,H1		:MAPPED NODE # OF DEST
	JE	DIRJ		:NO PATH FOUND - RETURN

	AR	C6,C6
	LR	R13,C1		:2*MAPPED SOURCE NODE #
	JFS	DIR8A		:ENTER LOOP

	:NO IRC LINES ON NODE - CAN SKIP LINK TEST

DIR8	LR	R13,C4
	AR	R13,R13		:2X MAPPED NODE #

DIR8A	CLR	C6,R13		:IS THIS END OF CIRCUIT
	JE	DIRJ		:YES - TERMINATE SEARCH

	LHL	C4,DIRBYT-2,R13, :MAPPED NODE # OF NEXT NODE IN CIRCUIT
	TBT	C4,IRCLND	:DOES THIS NODE HAVE IRC LINES?
	JEBS	DIR8		:NO

	:"NEXT" NODE HAS IRC LINES - SEE IF THIS LINK
	SRLS	R13,1		:MAPPED PREVIOUS NODE # IN CIRCUIT
	TBT	R13,IRCLND	:DOES THIS NODE ALSO HAVE IRC LINES?
	JEBS	DIR8		:NO, DON'T BOTHER CHECKING FURTHER

	CLR	C4,R13		:CHECK ORDER OF NODS FOR LINK
	JGFS	DIR8B	

	LR	C1,C4		:LESSER NODE
	LR	C5,R13		:GREATER NODE
	JFS	DIR8C

DIR8B	LR	C1,R13		:LESSER NODE
	LR	C5,C4		:GREATER NODE

DIR8C	JAL	LINK,SLIST1	:SEARCH LIST1 FOR THIS PAIR
	J	DIR8		:NOT FOUND - CONTINUE

	LR	C1,T2		:INDEX INTO LIST1
	SRLS	C1,2		:INDEX INTO LIST1A
	A	C1,LIST1A,,	:ADDR OF IRC # FOR THIS LINE
	LB	C1,,C1		:IRC # FOR THIS LINE
	STH	C1,UIRC		:REMEMBER IRC # FOR ACCOUNTING
	A	T2,LIST2,,	:ADDR OF PTR INTO LIST3
	L	C1,,T2		:ADDR IN LIST3
	JL	DIR8		:THIS LINK NOT PART OF A ROTATION GROUP


	:ROTATE WITHIN THIS GROUP
	:FIRST MAKE CURRENTLY PREFERRED LINK A PENALTY LINK
	:THEN SELECT NEXT AVAILABLE LINK AS PREFERRED LINK.
	:IT IS A FATAL ERROR FOR ALL LINKS TO BE IN PENALTY
	:OR FOR THE USED LINK NOT TO BE IN ITS OWN GROUP.
	LR	T2,C1		:ADDRESS OF FIRST LINK IN GROUP
	SIS	T2,4		:ADJUST FOR PRE-INCREMENT

DIR9	AIS	T2,4
	LH	C2,,T2		:LOOK FOR SIGN BIT IN GROUP = PREFERRED LINK
	JGBS	DIR9		:CONTINUE SEARCH

	JLFS	DIR9A		:OK - FOUND A PREFERRED LINK

	HC	0,0		:ALL LINKS IN PENALTY - FATAL ERROR

DIR9A	NHI	C2,7FFF		:CLEAR SIGN BIT
	STH	C2,,T2		:RESTORE TO LIST3 WITH SIGN OFF FOR PENALTY
	LIS	T1,1		:SET IRC PENALTY FOR THIS LINK
	AM	T1,IRCRCT	:ALSO INCREMENT ROTATION COUNTER
	LHL	R15,2,T2	:GET OTHER NODE IN LINK
	JAL	C4,ROTCST	:CHANGE COST INDICES FOR NODE #'S IN C2

		:SELECT PREFERRED LINK FROM GROUP

DIRA	AIS	T2,4		:SKIP TO NEXT LINK
	LR	T1,T2		:REMEMBER WHERE AT IN CASE ERROR IN LIST3
	JFS	DIRC		:ENTER SEARCH LOOP

DIRB	AIS	T2,4		:INCREMENT TO NEXT LINK IN GROUP
	CLR	T2,T1		:ARE WE BACK TO WHERE WE STARTED?
	JNFS	DIRC		:NO

	HC	0,0		:FATAL ERROR - USED LINK NOT IN OWN GROUP!

DIRC	LHL	C2,,T2		:FIRST NODE IN NEXT LINK
	JNFS	DIRD		:NO WRAP

	LR	T2,C1		:WRAP
	LHL	C2,,T2		:GET FIRST NODE IN FIRST PAIR IN GROUP

DIRD	LHL	R15,2,T2	:2ND NODE DEFINING LINK
	JAL	LINK,NODGET	:FIND NODE DESC TO CHECK LINK OUT
	J	DIRB		:NO NODE DESC - CHECK NEXT LINK

	LHI	R12,LINPTR+LNKNOD,R14	:SETUP TO SEARCH NEIGHBOR #'S
	SHT(R12,LNKPSZ,C2,R13)	:SEARCH FOR NEIGHBOR
	J	DIRB		:NEIGHBOR MISMATCH - CHECK NEXT LINK

	AH	R14,LNKDSP,R12	:ADDRESS OF LINK DESC
	LHL	R13,LNKST,R14	:STATUS BYTE & COST INDEX

TEQ	EQ	1^(0F-T2OUT)!1^(0F-LINOUT)!1^(0F-LINSHT) :CRIT. LINK STATUS BITS
	THI	R13,TEQ		:CHECK IF LINK OK AS PREFERRED LINK
	JN	DIRB		:NOT OK, LOOK AT NEXT LINK

	:REMOVE PENALTY BITS FOR LINK &
	:SET PREFERRED IRC LINK STATUS FOR LINK <C2>,<R15> IN GROUP
	NHI	R13,-2		:EXCLUDE IRC PENALTY BIT FOR NODE <R15>
	STH	R13,LNKST,R14	:UPDATE NODE DESCRIPTOR
	LHI	T1,8000,C2	:SET SIGN BIT TO SHOW PREFERRED LINK
	STH	T1,,T2		:STORE IN GROUP
	LR	T1,R15		:REMEMBER NODE #
	LR	R15,C2		:OTHER NODE
	JAL	LINK,NODGET	:GET NEIGHBOR'S DESCRIPTOR
	J	DIRJ		:NOT THERE YET, DONE

	LHI	R12,LINPTR+LNKNOD,R14 :SETUP TO SEARCH FOR NODE <T1>
	SHT(R12,LNKPSZ,T1,R13)	:LOOK FOR LINK
	J	DIRJ		:MUST BE LINK IN FLUX

	AH	R14,LNKDSP,R12	:ADDRESS OF LINK DESCRIPTOR
	LHL	R13,LNKST,R14	:STATUS & COST BYTES
	NHI	R13,-2		:EXCLUDE IRC PENALTY BIT
	STH	R13,LNKST,R14	:RESTORE
	EI			:&@01
		:CLEAN UP & EXIT

DIRJ	LH	R15,H1		:MAPPED DEST NODE NUMBER
	JGEFS	DIRJ1		:INSURE VALID

	HC	0,0		:FATAL ERROR

DIRJ1	IF	FULLTI
	LM	R0,DIRSAV
	JR	LINK

	ELSE
	CLHI	R15,MXBASE	:IS IT A T-I BASE?
	JGFS	DIRJ2		:NO

	LM	R0,DIRSAV	:RESTORE REGISTERS
	JR	LINK		:RETURN 

DIRJ2	CLHI	R15,T2BN-BRGAP-RIIGAP :IS IT A REMOTE?
	JLFS	DIRJ3		:YES

	AHI	R15,BRGAP+RIIGAP
	JFS	DIRJ4

DIRJ3	AHI	R15,BRGAP

DIRJ4	STH	R15,H1		:SAVE UNMAPPED NODE #
	LM	R0,DIRSAV	:RESTORE REGISTERS
	JR	LINK		:RETURN

	EI


	:ERROR - LIST OVERFLOW

DIR4A	HS	0
	IF	RGN001		:&&06
	LIS	T2,0		:ADDRESS REGION USED FLAG
	TBT	T2,SEAFLAG,,	:WAS REGION USED?
	JN	SEAREG		:YES - RETRY WITH ANPBIT

	LHI	R13,EM01A0	:ERROR - DIRECT LIST OVERFLOW
	LHL	R14,LOGID	:TELL WHERE CIRCUIT COMING FROM
	LHL	R15,UNAME	:TELL A POSSIBLE DESTINATION
	JAL	LINK,ERRFIL,,

DIR5A	LIS	T1,1		:PATH DOES NOT EXIST
	LIS	C6,0		:TEST BIT 0
	TBT	C6,SEAFLAG,,	:WAS REGION USED?
	JN	SEAREG		:YES - RETRY WITH ANPBIT

	ELSE			:&@06
	LHI	R13,EM01A0	:ERROR - DIRECT LIST OVERFLOW
	LHL	R14,LOGID	:TELL WHERE CIRCUIT COMING FROM
	LHL	R15,UNAME	:TELL A POSSIBLE DESTINATION
	JAL	LINK,ERRFIL,,

DIR5A	LIS	T1,1		:PATH DOES NOT EXIST
	EI			:&%06

	AHM	T1,REJECT,,	:INCR REJECT COUNT
	L	C6,FASTC,,	:COMPUTE TIME SPENT IN DIRECT
	S	C6,DIRST	:SUBTRACT START TIME
	AM	C6,DIRTIM	:ACCUMULATE TIME SPENT HERE
	LHL	T1,LOGID	:REQUESTING NODE
	STH	T1,LREJECT,,	:INFORM PROBE OF SOURCE
	LHL	R15,DIRNOD	:PICK FIRST POSSIBLE DEST
	UMAP(R15)
	STH	R15,LREJECT+2,,	:INFORM PROBE OF DEST
	LIS	T2,0
	STH	T2,H1		:FLAG TO SHOW NO CIRCUIT
	J	DIRCOM		:CLEAN UP & RETURN


	IF	IRC		:&&01


:  IRC ROTATE SUBROUTINES

	:INCLUDE OR DELETE IRC PENALTY BIT FROM LINK DESCRIPTORS
	:FOR LINK <C2>,<R15>. <T1> 0 TO DELETE PENALTY,
	:<T1>=1 TO IMPLEMENT PENALTY
	:ONLY CALLED FROM DIRECT FOR ROTATION.  <C4> IS LINK.

ROTCST	JAL	LINK,NODGET	:GET DESCRIPTOR FOR <R15>
	J	RTCST2		:NOT THERE

	LHI	K1,LINPTR+LNKNOD,R14 :SETUP TO SEARCH
	SHT(K1,LNKPSZ,C2,C3)	:FIND NEIGHBOR <C2>
	J	RTCST3		:NEIGHBOR MISMATCH

	AH	R14,LNKDSP,K1	:ADDRESS STATUS & COST BYTES
	LHL	K1,LNKST,R14	:STATUS & COST INDEX
	NHI	K1,-2		:EXCLUDE CURRENT IRC PENALTY BIT
	OR	K1,T1		:NEW VALUE

RTCST1	STH	K1,LNKST,R14

RTCST2	LR	C3,R15		:REMEMBER NODE
	LR	R15,C2		:NEIGHBOR NODE
	JAL	LINK,NODGET	:POINT TO DESCRIPTOR
	J	,C4		:NODE NOT IN NET, RETURN

	LHI	K1,LINPTR+LNKNOD,R14 :SETUP FOR SEARCH FOR <C3>
	SHT(K1,LNKPSZ,C3,C2)
	J	RTCST4		:NEIGHBOR MISMATCH

	AH	R14,LNKDSP,K1	:ADDRESS STATUS/COST BYTES
	LHL	K1,LNKST,R14	:GET STATUS/COST
	NHI	K1,-2		:EXCLUDE PENALTY BIT
	OR	K1,T1		:NEW PENALTY
	STH	K1,LNKST,R14	:UPDATE
	JR	C4		:RETURN

	:NEIGHBOR MISMATCH

RTCST3	LA	C3,RTCST2	:RETURN HERE
	JFS	RTCST5		:CONTINUE

RTCST4	LR	C2,C3		:SETUP LINK
	LR	C3,C4		:RETURN TO CALLER

RTCST5	CLHI	R15,T2BN	:NODE T-II?
	JGER	C3		:YES, COULD BE LINK OUT

	ST	T1,ASTEMP	:SAVE T1 & T2 (MODIFIED BY ERRFIL)
	ST	T2,ASTEMP+4
	LHI	R13,EM0068	:ERROR TYPE - ROTATE ERROR
	EXHR	R14,C2		:POSITION NODE #
	OR	R15,R14		:SETUP FOR LOG
	LIS	R14,1		:SUBTYPE 1 - NEIGHBOR MISMATCH
	JAL	LINK,ERRFIL,,
	L	T1,ASTEMP	:RESTORE T1 & T2
	L	T2,ASTEMP+4
	JR	C3		:RETURN - NEIGHBOR MISMATCH


:  POINT TO IRC LIST1 ENTRY FOR MAPPED NODE PAIR <C1>-<C5>,
:  WITH <C1> THE LESSER NODE.
:  RETURN IF NOT FOUND, ELSE SKIP RETURN WITH T2 INDEX FOR LIST1.
:  USES K1.
	IF	SUPMIC-1

SLIST1	LIS	T2,4
	HC	9632		:SETUP SEARCH INCREMENT
	LI	T2,LIST1-4	:ADDRESS LIST1

SLISTA	AIS	T2,4		:NEXT LINK
	HC	2A25		:SEARCH FOR <C1>
	JR	LINK		:NOT FOUND

	HC	0		:2ND 1/2 WORD OF RETURN

	CLH	C5,2,T2		:DOES GREATER NODE MATCH?
	JNBS	SLISTA		:NO

	SI	T2,LIST1	:CONVERT TO INDEX
	J	4,LINK		:RETURN FOUND

	ELSE

SLIST1	LCS	T2,4		:INDEX THRU LIST1

SLISTA	AIS	T2,4		:INCR INDEX
	LHL	K1,LIST1,T2,	:TABLE ENTRY
	JER	LINK		:LIST EXHAUSTED - RETURN

	CLR	K1,C1		:IS THIS LESSER NODE?
	JNBS	SLISTA		:NO, CONTINUE

	CLH	C5,LIST1+2,T2,	:THIS THE GREATER NODE ALSO?
	JNBS	SLISTA		:NO - LOOP

	J	4,LINK		:SKIP RETURN

	EI
	EI			:&@01





	:SPROUT -
	:SUBROUTINE TO SPROUT A FOREST OF TREES CONSISTING
	:OF LEAST COST PATHS TO NODES IN THE INITIAL
	:DESTINATION SET.  SOURCE NODE PROVIDES A
	:THRESHOLD FOR PATH COST, BEYOND WHICH PATHS WILL 
	:NOT BE BUILT.

	:PARAMETERS ARE PROVIDED IN A TABLE WHICH
	:PROVIDES CRITICAL ADDRESSES & VALUES DESCRIBED
	:BELOW.  CALLING ROUTINE MUST ALSO INSURE
	:THE MAPPED NODE #S FOR THE INITIAL DESTINATION
	:SET IS PLACED IN THE NODE LIST "DIRLIST",
	:WITH A TERMINATOR OF 0.  COSTS CORRESPONDING
	:TO THESE NODES MUST BE SETUP IN "DIRCST".

	:RETURN IF LIST OVERFLOW, OTHERWISE SKIP
	:RETURN (4) WHEN DONE, WITH <R0> THE COST FROM THE SOURCE NODE.

	:SINCE NODE '2000 IS A VALID, BUT UNUSED NODE #,
	:NODE '2000 WILL FORCE BUILD OF FOREST
	:OF MAXIMAL TREES, WITH THE EXCEPTION
	:THAT NODES NOT SUPPORTING PASSTHROUGHS
	:WILL NOT SHOW UP IN THE TREES UNLESS THEY
	:WERE DEFINED AS DESTINATIONS.

	:CLOBBERS ALL REGISTERS.
	:NOTE - ASSUMES MXNODE>24 DECIMAL

	:SPRSBT	HS	1	:PRIOR STATE OF PASS BIT FOR SOURCE
	:SPRMXN	HS	1	:MAX # OF NODES
	:SPRLST	WS	1	:ADDRESS OF NODE LIST "DIRLIST"
	:SPRBIT	WS	1	:ADDRESS OF NODE LIST BIT ARRAY "DIRVEC"
	:SPRNTP	WS	1	:ADDRESS OF 'NODTBP' TABLE
	:SPRDIR	WS	1	:ADDRESS-2 OF DIRECTION TABLE
	:SPRPCT	WS	1	:ADDRESS-2 OF PATH COST TABLE
	:SPRDCS	WS	1	:ADDRESS OF DESTINATION COST LIST "DIRCST"
	:SPRLCT	WS	1	:ADDRESS OF LINK COST TABLE
	:SPRSRC	WS	1	:UNMAPPED SOURCE NODE #
	:SPRPBT	WS	1	:ADDRESS OF PASSTHROUGH BIT ARRAY
	:SPRLNK	WS	1	:LINK SAVE


	:ENTER HERE TO EXTEND A FOREST OF TREES - BYPASS COST INITIALIZATION

SPREXT	ST	LINK,SPRLNK	:SAVE LINK
	J	SPREXE		:BYPASS COST INITIALIZATION

	:NORMAL SPROUT ENTRY

SPROUT	ST	LINK,SPRLNK	:SAVE LINK
	JAL	R0,SPRINC	:INITIALIZE COST TABLE

	:INITIALIZE BIT VECTOR TO 0
	:ALTERNATE ENTRY POINT IF COST TABLE INITIALIZATION BYPASSED

SPREXE	REGSET(R4)
	L	K1,SPRBIT
	LHL	T2,SPRMXN	:MAX # NODES
	SRLS	T2,5		:# NODES/WORD
	SLLS	T2,2		:# BYTES/WORD
	SHI	T2,2C		:PRE-DECEMENT
	JLFS	SPRI03		:NOT ENOUGH

SPRI02	STM	R4,NOTI*T2BN^-5,K1,T2
	SR	T2,T1
	JGBS	SPRI02

	:COMPLETE WITH WORD STORES

SPRI03	AHI	T2,30

SPRI04	ST	R15,NOTI*T2BN^-5,K1,T2
	SIS	T2,4
	JGBS	SPRI04		:MORE

	ST	R15,NOTI*T2BN^-5,K1 :FINISH UP

	:SETUP DATA CORRESPONDING TO DESTINATION NODES & COSTS
	LM	C3,SPRLST	:GET PARAMETERS
	LIS	K1,0		:INIT PTR TO BEGINNING OF SPRLST
	LIS	K2,0		:INIT PTR TO END OF SPRLST
	LHL	T2,,K2,C3	:GET A DESTINATION NODE
	JNFS	SPRI05		:NON-NULL LIST

	HC	0,0		:NULL - CRASH

SPRI05	LR	C1,T2
	SLLS	C1,2		:INDEX SPRNTP
	L	C1,,C1,C5	:GET PTR TO NODE DESCRIPTOR
	JGFS	SPRI06		:NODE KNOWN

	HC	0,0		:UNKNOWN DESTINATION - FATAL

SPRI06	SBT	T2,,C4		:SET BIT TO SHOW ON LIST
	LHL	C1,,K2,R12	:COST TO DESTINATION
	AR	T2,T2
	STH	C1,,T2,R11	:SAVE IT
	AIS	K2,2
	LHL	T2,,K2,C3	:GET NEXT TARGET NODE
	JN	SPRI05		:CONTINUE

	LIS	C1,1
	AM	C1,SPMTCT-4,K2,K2 :COUNT MULTI-TARGETING FREQUENCY

	:SETUP FOR SOURCE NODE (2000 IS A GOOD SOURCE TO BUILD
	:FOREST OF OPTIMAL PATH TREES TO DESTINATION SET.)
	LR	C1,R14		:GET UNMAPPED SOURCE NODE
	LR	T1,R15		:GET ADDRESS OF PASSTHROUGH BIT ARRAY
	NMAP(C1)
	RBT	C1,,T1		:SHOW SOURCE OK
	JEFS	SPRI0B		:WAS NOT SET BEFORE

	STH	C1,SPRSBT	:SHOW PRIOR STATE
	JFS	SPRI0C

SPRI0B	STH	K1,SPRSBT	:SHOW WAS PASSTHROUGHS OK

SPRI0C	AR	C1,C1		:SETUP 2*MAPPED SOURCE NODE
	IF	SUPMIC
	:NOTE - DIRLEN IS ALWAYS 3FF FOR MICROCODE
	LHI	0,0FFF		:INITIAL COST FOR SOURCE 
	HC	1E03		:1ST MICRO-CODE
	HC	1FC6		:2ND MICRO-CODE
	J	SPRCOV		:LIST OVERFLOW

	:SPROUTING DONE
	STH	R0,,R11,C1 	:SAVE PATH COST TO SOURCE
	L	LINK,SPRLNK
	AIS	LINK,4		:NO OVERFLOW

SPRCD	LHL	R15,SPRSBT	:RESTORE BIT
	SBT	R15,,T1
	JR	LINK		:RETURN

	:OVERFLOW

SPRCOV	L	LINK,SPRLNK	:RESTORE LINK
	JBS	SPRCD		:CONTINUE

	ELSE
	:CODE TO SPROUT A FOREST OF TREES REPRESENTING
	:THE LEAST COST PATHS TO ANY NODE IN THE DESTINATION
	:SET.  THE FOLLOWING REGISTERS CONTAIN ESSENTIAL
	:PARAMETERS AND ARE INITIALIZED BY PRIOR LM.
	:<T1> - ADDRESS OF PASSTHROUGH BIT ARRAY
	:<K1> - PTR TO NODE LIST (DIRLIST), INITIALIZED TO 0
	:<K2> - PTR TO END OF NODE LIST
	:<C1> - 2 X MAPPED SOURCE NODE
	:<C4> - ADDRESS OF NODE LIST BIT ARRAY (DIRVEC)
	:<C6> ADDRESS OF DIRBYT-2
	:<R11> - ADDRESS OF COSTV-2
	:<R13> - ADDRESS OF LINK COST TABLE


	:CODE SPECIFIC SETUP
	AR	C1,R11		:CREATE INDEX TO SOURCE COST
	LHI	C3,DIRLEN	:MASK FOR DIRLIST
		:REMOVE NEXT NODE FROM DIRLIST
		:AND EXAMINE NEIGHBORS FOR COST IMPROVEMENTS

SPRC1	LHL	R0,DIRLIST,K1	:GET NEXT ENTRY ON LIST
	AIS	K1,2		:INCR PTR
	NR	K1,C3		:USE MODULUS ARITHMETIC (DIRLEN)
	RBT	R0,,C4		:TURN OFF BIT FOR THIS NODE
	LR	T2,R0
	AR	T2,T2		:SETUP TO INDEX WORD LIST
	L	R14,NODTBP,T2,T2 :PTR TO NODE DESC
	JGFS	SPRC3		:DESCR BUILT, LOOK AT NEIGHBORS

SPRC2	CLR	K1,K2		:IS THIS END OF LIST?
	JNBS	SPRC1		:NO, CONTINUE

	J	SPRDON		:YES, DONE PROCESSING LIST

		:
		:EXAMINE NEIGHBORS OF NODE FROM LIST LOOKING
		:FOR USEFUL COST IMPROVMENTS.  SUCH COST
		:IMPROVEMENTS WILL ADD THE NEIGHBOR TO THE
		:LIST AND WILL ALTER THE TREE.  NEIGHBOR
		:IS ADDED TO TOP OF LIST IF SEEN BEFORE,
		:OTHERWISE IT IS ADDED TO THE BOTTOM OF
		:THE LIST.

SPRC3	LHL	T2,,R11,T2	:COST TO DEST FROM THIS NODE
	LHI	C2,LINPTR,R14	:PTR TO LINE DESC PTRS

SPRC4	LHL	R12,LNKNOD,C2	:NEIGHBOR #
	JEBS	SPRC2		:FINISHED WITH NEIGHBORS, RTN TO LIST

		:EXAMINE NEIGHBOR <R12>

SPRC5	NMAP(R12)
	TBT	R12,,T1		:IS THIS NODE OK TO CONSIDER?
	JEFS	SPRC9		:YES

	AIS	C2,4		:INDEX NEXT NEIGHBOR
	IF	FULLTI
	JBS	SPRC4		:CONTINUE

	ELSE
	J	SPRC4		:CONTINUE

	EI

SPRC9	AR	R12,R12		:2*MAPPED NEIGHBOR #
	LHL	R15,LNKDSP,C2	:DISPL TO LINE DESC
	LHL	R15,,R15,R14	:STATUS & COST INDEX FROM NODE R0 TO NODE R12
	LBR	C5,R15		:ISOLATE INDEX TO COST TABLE
	LB	C5,,R13,C5	:COST OF THIS LINK
	STBR	C5,R15		:MERGE COST WITH STATUS
	AR	R15,T2		:NEW COST (ANY STATUS BITS ON MAKE IT LARGE)
	LHL	C5,,R11,R12	:GET CURRENT COST FROM NEIGHBOR
	CLR	R15,C5		:IS THERE A COST IMPROVEMENT
	JGE	SPRCC		:NO IMPROVEMENT - CHECK NEXT LINE

	CLH	R15,,C1		:IS THERE A COST IMPROVEMENT OVER THE SOURCE
	JGE	SPRCC		:NO IMPROVEMENT - CHECK NEXT LINE

	STH	R15,,R11,R12	:SHOW NEW COST
	STH	R0,,C6,R12	:SET NEW DIRECTION VALUE
	SRLS	R12,1		:MAPPED NEIGHBOR #
	SBT	R12,,C4		:INDICATE THIS NODE IN LIST
	JNFS	SPRCC		:IF NODE ALREADY ON LIST DON'T ADD IT

	CLHI	C5,0FFF		:DOES THE OLD COST SHOW WAS HERE BEFORE?
	JEFS	SPRCA		:NO - ADD TO BOTTOM OF LIST

	:HAVE SEEN THIS NODE BEFORE - ADD TO TOP OF LIST
	SIS	K1,2		:BACKUP TOP OF LIST PTR
	NR	K1,C3		:WRAP IF NECESSARY
	STH	R12,DIRLIST,K1	:SAVE NEW TOP
	JFS	SPRCB		:CONTINUE

	:HAVN'T SEEN THIS NODE BEFORE, ADD TO BOTTOM OF LIST

SPRCA	STH	R12,DIRLIST,K2	:ADD NODE TO LIST
	AIS	K2,2		:INCR END PTR OF LIST
	NR	K2,C3		:USE MODULUS ARITHMETIC (DIRLEN)

SPRCB	CLR	K1,K2		:IS THERE A LIST OVERFLOW
	JEFS	SPRCOV		:YES

SPRCC	AIS	C2,LNKPSZ	:PT TO NEXT LINE DESC PTR
	LHL	R12,LNKNOD,C2	:NEXT NEIGHBOR #
	JN	SPRC5		:NOT FINISHED WITH NEIGHBORS

	CLR	K1,K2		:IS LIST EMPTY
	JN	SPRC1		:NO, CONTINUE TO NEXT ENTRY

	JFS	SPRDON		:DONE

	:OVERFLOW

SPRCOV	SR	C1,R11		:RECOVER 2*MAPPED SOURCE NODE
	L	LINK,SPRLNK	:RESTORE LINK
	JFS	SPRCD		:CONTINUE

	:SPROUTING DONE

SPRDON	LHL	R0,,C1		:COST OF PATH FROM SOURCE
	SR	C1,R11		:RECOVER 2*MAPPED SOURCE NODE
	L	LINK,SPRLNK
	AIS	LINK,4		:NO OVERFLOW

SPRCD	LHL	R15,SPRSBT	:RESTORE BIT
	SBT	R15,,T1
	JR	LINK		:RETURN

	EI


	:SUBROUTINE TO INITIALIZE ALL COSTS TO 0FFF
	:USES R0 FOR LINK REGISTER!!
	:CLOBBERS ALL REGISTERS

SPRINC	REGSET(R4,0FFF0FFF)	
	LHI	T1,30
	LHL	T2,SPRMXN	:# NODES
	SRLS	T2,1		:DROP ODD BIT
	SLLS	T2,2		:CONVERT TO # BYTES TO CLEAR
	SHI	T2,2C		:PRE-DECREMENT INDEX
	L	K1,SPRPCT	:COST TABLE ADDR

SPRI01	STM	R4,2+NOTI*T2BN*2,K1,T2
	SR	T2,T1
	JGEBS	SPRI01

	STM	R4,2+NOTI*T2BN*2,K1,
	JR	R0		:RETURN TO CALLER





:    R >